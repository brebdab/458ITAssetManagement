{"version":3,"sources":["serviceWorker.ts","utils/utils.tsx","utils/api-config.tsx","store/actions/actionTypes.tsx","forms/formUtils.tsx","store/actions/state.tsx","components/elementView/dragDropList.tsx","store/utility.tsx","components/elementView/elementUtils.tsx","forms/field.tsx","forms/rackRangeForm.tsx","components/elementView/filterSelect.tsx","components/elementView/powerView/powerView.tsx","components/elementView/elementTable.tsx","utils/permissionUtils.tsx","components/elementView/elementTab.tsx","components/elementView/detailedView/rackView/rackView.tsx","components/elementView/rackSelectView.tsx","components/elementView/rackTab.tsx","components/elementView/elementTabContainer.tsx","forms/assetForm.tsx","forms/modelForm.tsx","forms/datacenterForm.tsx","forms/auth/register.tsx","forms/changePlanForm.tsx","forms/userForm.tsx","forms/formPopup.tsx","components/elementView/detailedView/propertiesView.tsx","components/elementView/detailedView/decommissionedPropertiesView.tsx","components/elementView/detailedView/assetView/graph.tsx","components/elementView/detailedView/assetView/assetView.tsx","components/elementView/detailedView/modelView/modelView.tsx","components/elementView/detailedView/assetView/barcodeView.tsx","components/fallback.tsx","components/lib/fileSelect.tsx","components/import/importInstructionsLite.tsx","components/import/viewModified.tsx","components/import/import.tsx","components/landingView/landingView.tsx","components/logs/logs.tsx","components/navigation/navigation.tsx","components/report/report.tsx","components/changePlanner/CPDetailView.tsx","components/userView/user.tsx","components/changePlanner/changePlannerView.tsx","forms/auth/login.tsx","forms/auth/loginView.tsx","App.tsx","store/reducers/state.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ROUTES","ElementType","PowerSide","API_ROOT","AssetFormLabels","AssetFieldsTable","asset_number","model","model__vendor","model__model_number","rack","rack__datacenter__name","rack_position","owner","comment","decommissioning_user","time_decommissioned","DecommissionedFieldsTable","ModelFieldsTable","vendor","model_number","height","display_color","num_network_ports","network_ports","num_power_ports","cpu","memory_gb","storage","isObject","obj","Object","isModelObject","isDatacenterObject","abbreviation","isRackObject","rack_num","isAssetObject","isRackRangeFields","letter_start","isUserObject","username","isChangePlanObject","name","isAssetCPObject","change_plan","getHeaders","token","headers","Authorization","getChangePlanRowStyle","item","fontWeight","isAssetCP","color","FormTypes","DUKE_OAUTH_URI","setChangePlan","changePlan","type","updateChangePlans","status","console","log","updateChangePlansBoolean","authSuccess","authFail","error","logout","localStorage","removeItem","checkAdmin","dispatch","axios","get","then","res","data","is_admin","catch","err","checkPermissions","permissionState","model_management","asset_management","power_control","audit_read","admin","datacenter_permissions","setPermissionState","loginHelper","key","expirationDate","Date","getTime","setItem","toString","escapeRegExpChars","text","replace","isMacAddressValid","RegExp","exec","macAddressInfo","filterAssetField","query","field","_index","exactMatch","normalizedTitle","toLowerCase","normalizedQuery","indexOf","filterModelField","filterString","filterRack","rowLetter","row_letter","rackNum","filterDatacenter","datacenter","filterChangePlan","filterModel","normalizedVendor","normalizedModel","filterAsset","asset","normalizedHostname","highlightText","lastIndex","words","split","filter","word","length","map","regexp","join","tokens","before","slice","push","rest","DragDropListTypes","renderAssetFieldItem","handleClick","modifiers","matchesPredicate","active","onClick","renderModelFieldItem","renderStringItem","renderRackItem","renderDatacenterItem","label","renderModelItem","renderChangePlanItem","renderAssetItem","StringSelect","Select","ofType","StringSuggest","Suggest","ModelSelect","RackSelect","DatacenterSelect","AssetSelect","ChangePlanSelect","updateObject","oldObject","updatedProperties","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","ElementTableOpenAlert","FilterTypes","PagingTypes","TextFilterTypes","DragDropList","onDragEnd","destination","items","props","source","index","setState","onChange","this","FILTER","SORT","className","icon","IconNames","DOUBLE_CARET_VERTICAL","droppableId","direction","provided","snapshot","ref","innerRef","style","isDraggingOver","background","display","borderRadius","padding","minHeight","width","overflow","margin","droppableProps","getIcon","id","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","grid","renderItem","getEmptyListMessage","placeholder","React","Component","numberFields","getFilterType","RACKRANGE","DATETIME","includes","NUMERIC","TEXT","renderTextFilterItem","match_type","value","renderNumericFilterItem","min","max","renderRackRangeFilterItem","letter_end","num_end","num_start","renderDatetimeFilterItem","after","undefined","toLocaleString","modifyModel","post","deleteModel","deleteAsset","modifyAsset","config","params","decommissionAsset","modifyChangePlan","deleteChangePlan","deleteDatacenter","dc","modifyDatacenter","deleteUser","user","modifyUser","Field","e","currentTarget","RackRangeForm","state","values","componentDidMount","JSON","parse","stringify","componentWillReceiveProps","nextProps","inline","handleChange","FilterSelect","filter_type","test","handleDatetimeChange","range","toISOString","handleSubmit","preventDefault","handleAddFilter","getTextFilterOptions","getNumericFilterOptions","getRackFilterOptions","getDatetimeFilterOptions","formatDate","date","parseDate","str","allowSingleDayRange","shortcuts","singleMonthOnly","closeOnSelection","timePrecision","timePickerProps","useAmPm","target","CONTAINS","EXACT","fields","onSubmit","FieldSelect","popoverProps","minimal","popoverClassName","usePortal","itemRenderer","getItemRenderer","onItemSelect","setFilterType","itemPredicate","getItemFilterer","noResults","disabled","rightIcon","getButtonText","renderFilterOptions","connect","isAdmin","withRouter","PowerView","toaster","addToast","toast","timeout","show","addSuccessToast","message","intent","Intent","PRIMARY","addErrorToast","DANGER","refHandlers","powerConnections","powerStatus","statusLoaded","alertOpen","confirmationMessage","assetIsDecommissioned","power_connections","power_status","response","failure_message","getUsername","shouldUpdate","updated","rows","i","port_number","left_right","is_network_controlled","Classes","DARK","getPowerPortRows","keys","success_message","alert","callback","title","INFO_SIGN","confirmButtonText","isOpen","onConfirm","onClose","autoFocus","canEscapeKeyClear","position","Position","TOP","ElementTable","page_type","filters","sort_by","sorted_cols","curr_page","total_pages","isEditFormOpen","editFormValues","openAlert","NONE","selected_userid","isPowerOptionsOpen","getDataInProgress","selected","selectedAll","editUserFormOpen","validRequestMadeWithToken","resetPage","previousPage","getData","next_page","updatePageData","nextPage","handlePagingChange","page","getScrollIcon","disableSorting","iconSize","Icon","SIZE_STANDARD","handleSort","renderFilterItem","ASSET","MODEL","DELETE","removeFilterItem","renderSortItem","DRAG_HANDLE_VERTICAL","ascending","removeSortItem","updateSortOrder","updateSortData","sorts","updateFilterData","addFilter","filters_copy","currDatacenter","filter_datacenter","resp","getPages","page_num","addWarnToast","WARNING","action","updateTableData","setFieldNames","setFieldNamesFromData","forEach","col","handleInlineButtonClick","handleEditFormClose","getEditForm","initialValues","MODIFY","elementName","handleClose","submitForm","getSubmitFormFunction","getUserEditForm","userId","successfulModification","getPowerOptions","assetPower","isDecommissioned","successfulModifcationWithWarning","warning","handleEditFormSubmit","warning_message","updateDatacenters","handleEditFormOpen","handleEditButtonClick","shouldShowColumn","handleDeleteOpen","handleDeleteCancel","handleDecommissionOpen","DECOMMISSION","handleDecommissionCancel","handleDelete","CHANGEPLANS","handleDecommission","handleDeleteButtonClick","handleDecommissionButtonClick","handlePowerButtonClick","renderPermissionsButton","find","shouldUpdateData","related_asset","history","DASHBOARD","cancelButtonText","onCancel","disableFiltering","TEN","FIFTY","ALL","CARET_LEFT","SIZE_LARGE","CARET_RIGHT","DATACENTER","USER","isNullOrUndefined","checked","event","updateBarcodes","routeToDetailView","stopPropagation","entries","backgroundColor","execution_time","size","Spinner","ERROR","actions","hasAddElementPermission","elementType","permissions","fs","require","ElementTab","fileNameIsOpen","fileName","networkFileName","updateTable","barcodes","getExportData","path","file","networkFile","datacenterName","filtersCopy","ALL_DATACENTERS","body","export_csv","page_size","url","page_count","getElementData","handleDataUpdate","bodyCopy","handleOpen","createModel","createAsset","createDatacenter","createUser","createChangePlan","datacenters","onDatacenterSelect","element","fileRegEx","extension","ext","networkExtension","networkExt","fill","renderBarcodeButton","CREATE","to","pathname","BARCODE_PRINT","RackView","isDeleteOpen","letter","num","RACK_PRINT","print","rackResp","currHeight","assets","assign","maxHeight","inst","shift","warn","unshift","lineHeight","ASSETS","unitBarRows","racks","getItem","loading","getRows","getUnitRows","RackSelectView","viewRange","errors","handleSwitchChange","handleBooleanChange","SIZE_SMALL","RackTab","selectedRackRange","deleteRackInfo","isConfirmationOpen","viewAll","submitInProgress","handleConfirmationCancel","handleConfirmationOpen","viewRackForm","showError","rack_datacenter","deleteRack","rack_new","actuallyDelete","updateRackData","getAllRacks","createRack","RACK","ElementTabContainer","getDatacenters","getTabName","animate","selectedTabId","renderActiveTabPanelOnly","vertical","large","tab","panel","isActive","Expander","AssetForm","initialState","setPowerPortInputState","power_ports_default","port","initialGetRacks","gettingAssetsInProgress","gettingRacksInProgress","gettingPowerPortsInProgress","models","users","left_ports","right_ports","power_ports","isAlertOpen","warningMessage","selectedValue","mapAssetObject","mac_addresses","network_connections","validateMacAddresses","$","scrollTop","newValues","valid","mac_address","getUsers","usernames","getRacks","getModels","getValidAssets","assetsWithHostname","getPowerButtonStatus","side","portString","shouldDisablePowerPort","getPortsForSide","LEFT","left_available","String","right_available","setDefaultPortValues","left_suggest","RIGHT","right_suggest","changeCheckBoxState","clearPowerSelection","getPowerPortFields","parseInt","port_fields","marginTop","getSelectedPort","source_port","connection","destination_port","handleChangeDecline","handleChangeAccept","handleDatacenterSelect","handleRackSelect","getAssetNumber","getPowerPortAvailability","clearedNetworkConnections","getClearedNetworkConnections","clearedPowerConnections","getClearedPowerSelections","destination_hostname","newNetworkConnection","modification","networkConnections","getAssetObjectFromHostname","WARNING_SIGN","getChangeWarningAlert","content","getValidDatacenters","showChangeWarningAlert","keepChildrenMounted","handleNetworkConnectionAssetSelection","getSelectedNetworkConnectionAsset","getPortsFromHostname","dest_port","handleNetworkConnectionPortSelection","clearNetworkConnectionSelection","INPUT","ModelForm","vendors","networkPortsTemp","isNaN","pop","handleNetworkPortNameChange","selectText","select","keydown","keyCode","getVendors","inputProps","defaultSelectedItem","inputValueRenderer","onQueryChange","DatacenterForm","FormItem","Form","Item","RegistrationForm","confirmDirty","form","validateFieldsAndScroll","userName","email","first_name","firstName","last_name","lastName","password1","password","password2","confirm","authSignup","handleConfirmBlur","compareToFirstPassword","rule","getFieldValue","validateToNextPassword","validateFields","force","getFieldDecorator","rules","required","validator","onBlur","WrappedRegistrationForm","create","RegForm","addProps","ChangePlanForm","UserForm","datacenter_selection","show_asset_options","updatedPermissions","sort","compare","getUserPermissions","alignIndicator","Alignment","updateBooleanPermissions","renderDatacenterChecks","a","b","checks","renderDatacenter","FormPopup","enforceFocus","canEscapeKeyClose","canOutsideClickClose","PropertiesView","dat","MODELS","Math","ceil","renderData","DecommissionedPropertiesView","NetworkGraph","options","layout","edges","arrows","nodes","border","highlight","font","physics","interaction","hover","zoomView","onClickNode","events","networkGraph","graph","AssetView","isFormOpen","isDecommissionOpen","powerShouldUpdate","successfullyLoadedData","updateAsset","rid","handleFormClose","updateAssetData","updateAssetDataCP","getAssetIdFromHostname","node","network_graph","redirectToAsset","handleFormOpen","handleFormSubmit","assetKey","assetcp","is_conflict","asset_conflict_location","asset_conflict_asset_name","asset_conflict_hostname","is_decommissioned","detectConflict","getNetworkConnectionForPort","renderPower","modelkey","async","ModelView","updateModel","BarcodeView","moveBy","renderBarcodes","row","text-align","fontSize","textMargin","Fallback","some","v","isExistingPath","NotFound","NotAuthorized","NotAuthorizedAdmin","FileSelector","prompt","bind","files","InstructionsLite","uploadType","href","Modifier","modifiedModels","operation","existing","substring","portNum","modified","linkedModel","check","findIndex","mods","modelsModified","checkObj","renderOneModification","memory","network_port_name_1","network_port_name_2","network_port_name_3","network_port_name_4","power_port_connection_1","power_port_connection_2","src_hostname","src_port","src_mac","dest_hostname","renderModifications","uploadModified","toasts","types","modelsAdded","modelsIgnored","SUCCESS","modelList","approved_modifications","Checks","BulkImport","uploadFileIsOpen","modelAlterationsIsOpen","assetAlterationsIsOpen","networkAlterationsIsOpen","loadedModels","loadedAssets","uploading","notify","assetUploadType","handleFilepickerOpen","handleFilepickerCancel","handleFileUpload","encodedFile","selectedFile","getBase64","handleUpload","resourceType","uploadBulk","modifications","ignoredModels","ignored","addedModels","added","modifiedAssets","ignoredAssets","addedAssets","modifiedNetwork","ignoredNetwork","addedNetwork","setFile","selectButtonText","marginBottom","isCloseButtonShown","messageType","createAlertToasts","postBody","import_csv","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsDataURL","LandingView","showTabs","transitionDuration","getLogFilters","filterValue","username_filter","hostname_filter","Number","Logs","logs","search_query","is_state_loaded","getTotalPages","getLogs","updateLogsAndPages","page_number","handleSearch","query_filters","onFormSubmit","BOTTOM_RIGHT","log_content","related_model","dir","HUNDRED","renderLinkedLog","Navigation","changePlans","sucessfulChangePlanRequest","isAuthenticated","CHANGE_PLAN","REPORT","LOGS","USERS","align","GIT_BRANCH","clearUsernameAndLogout","LOGIN","Report","freeRack","model_allocation","owner_allocation","vendor_allocation","state_loaded","selectedTab","datacenter_loaded","datacenterSelectionAlert","no_data","modelFields","allocation_percent","ownerFields","vendorFields","showReport","elevation","Elevation","TWO","toFixed","showDatacenterReport","small","getDatacenterReport","free_rackspace_percent","dcs","getGlobalReport","newTab","Tabular","entry","ModificationType","User","ChangePlannerView","NormalLoginForm","onAuth","non_field_errors","WrappedNormalLoginForm","LoginView","handleSSOClick","redirect_uri","access_token","QueryString","hash","ZERO","acess_token","getChangePlanDetail","CPDetailView","route_id","dataLoaded","openPrint","disableButtons","printWorkOrder","disable","conflicts","asset_cp","updateData","conflict","override_live","changes","getHighlightStyle","setButtonState","every","setTimeout","handleExecuteCancel","handleExecute","toggleCollapse","removeModification","conflict_message","conflict_resolvable","resolveConflict","renderAssetData","App","RedirectToLoginRoute","PrivateRoute","component","render","AdminRoute","onTryAutoSignup","toMatchItem","navigator","userAgent","basename","exact","BULK_IMPORT","authStart","authLogout","authAdmin","aciton","reducer","composeEnhances","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","app","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d307eab8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport { API_ROOT } from \"./api-config\";\r\nimport { IFilter, ITableSort } from \"../components/elementView/elementUtils\";\r\n\r\nexport interface ElementObject {\r\n  id: string;\r\n}\r\n\r\nexport enum ROUTES {\r\n  LOGIN = \"/login\",\r\n  RACKS = \"/dashboard/racks\",\r\n  DATACENTERS = \"/dashboard/datacenters\",\r\n  MODELS = \"/dashboard/models\",\r\n  ASSETS = \"/dashboard/assets\",\r\n  DASHBOARD = \"/dashboard\",\r\n  REPORT = \"/dashboard/report\",\r\n  LOGS = \"/dashboard/logs\",\r\n  RACK_PRINT = \"/dashboard/rack-print\",\r\n  BULK_IMPORT = \"/dashboard/bulk-upload/:resourceType\",\r\n  USERS = \"/dashboard/users\",\r\n  CHANGE_PLAN = \"/dashboard/change-plans\",\r\n  BARCODE_PRINT = \"/assets/barcode-print\",\r\n}\r\nexport enum ElementType {\r\n  RACK = \"racks\",\r\n  ASSET = \"assets\",\r\n  MODEL = \"models\",\r\n  USER = \"users\",\r\n  DATACENTER = \"datacenters\",\r\n  CHANGEPLANS = \"change-plans\",\r\n}\r\nexport enum PowerSide {\r\n  LEFT = \"L\",\r\n  RIGHT = \"R\",\r\n}\r\nexport interface ChangePlan extends ElementObject {\r\n  name: string;\r\n  execution_time?: string;\r\n}\r\nexport interface AssetObjectOld extends ElementObject {\r\n  hostname: string;\r\n  rack_position: string;\r\n  model?: ModelObject;\r\n  rack?: RackObject;\r\n  network_connections: {};\r\n  owner?: string;\r\n  comment?: string;\r\n}\r\n\r\nexport interface AssetObject extends ParentAssetObject {\r\n  model: ModelObject;\r\n  rack: RackObject;\r\n  network_graph: NetworkGraphData;\r\n}\r\nexport interface AssetCPObject extends AssetObject {\r\n  change_plan: ChangePlan;\r\n  is_conflict: boolean;\r\n  asset_conflict_hostname: AssetObject;\r\n  asset_conflict_asset_name: AssetObject;\r\n  asset_conflict_location: AssetObject;\r\n  related_asset: AssetObject;\r\n  is_decommissioned: boolean;\r\n}\r\ninterface ParentAssetObject extends ElementObject {\r\n  asset_number: string;\r\n  hostname: string;\r\n  rack_position: string;\r\n  mac_addresses: { [port: string]: string };\r\n  network_connections: Array<NetworkConnection>;\r\n  power_connections: { [port: string]: PowerConnection };\r\n  owner: string;\r\n  comment: string;\r\n  decommissioning_user?: string;\r\n  time_decommissioned?: string;\r\n}\r\n\r\nexport interface RackRangeFields {\r\n  datacenter: string;\r\n  letter_start: string;\r\n  letter_end: string;\r\n  num_start: string;\r\n  num_end: string;\r\n}\r\n\r\nexport interface NetworkConnection {\r\n  source_port: string | null | undefined;\r\n  destination_hostname: string | null | undefined;\r\n  destination_port: string | null | undefined;\r\n}\r\n\r\nexport const AssetFieldsTable: any = {\r\n  asset_number: \"Asset Number\",\r\n  hostname: \"Hostname\",\r\n  model: \"Model\",\r\n  model__vendor: \"Model Vendor\",\r\n  model__model_number: \"Model Number\",\r\n  rack: \"Rack\",\r\n\r\n  rack__datacenter__name: \"Datacenter\",\r\n  rack_position: \"Rack Position\",\r\n  owner: \"Owner\",\r\n  comment: \"Comment\",\r\n  decommissioning_user: \"Decommissioning User\",\r\n  time_decommissioned: \"Time Decommissioned\",\r\n};\r\n\r\nexport const DecommissionedFieldsTable: any = {\r\n  decommissioning_user: \"User\",\r\n  time_decommissioned: \"Time\",\r\n};\r\n\r\nexport const ModelFieldsTable: any = {\r\n  vendor: \"Vendor\",\r\n  model_number: \"Model Number\",\r\n  height: \"Height\",\r\n  display_color: \"Display Color\",\r\n  num_network_ports: \"No. Network Ports\",\r\n  network_ports: \"Network Ports\",\r\n  num_power_ports: \"No. Power Ports\",\r\n  cpu: \"CPU\",\r\n  memory_gb: \"Memory (GB)\",\r\n  storage: \"Storage\",\r\n  comment: \"Comment\",\r\n};\r\n\r\nexport enum AssetFormLabels {\r\n  asset_number = \"Asset Number\",\r\n  hostname = \"Hostname\",\r\n  datacenter = \"Datacenter*\",\r\n  rack = \"Rack*\",\r\n  rack_position = \"Rack Position*\",\r\n  model = \"Model*\",\r\n  owner = \"Owner\",\r\n  comment = \"Comment\",\r\n  network_ports = \"Network Ports\",\r\n  power_connections = \"Power Connections\",\r\n}\r\nexport interface Link {\r\n  to: number;\r\n  from: number;\r\n}\r\n\r\nexport interface Node {\r\n  id: number;\r\n  label: string;\r\n}\r\nexport interface NetworkGraphData {\r\n  nodes: Array<Node>;\r\n  links: Array<Link>;\r\n}\r\nexport interface PowerConnection {\r\n  left_right: PowerSide;\r\n  port_number: string;\r\n}\r\nexport interface ShallowAssetObject extends ParentAssetObject {\r\n  model: string | null | undefined;\r\n  rack: string | null | undefined;\r\n}\r\n\r\nexport interface SortFilterBody {\r\n  sort_by: Array<ITableSort>;\r\n  filters: Array<IFilter>;\r\n}\r\n\r\nexport interface PowerPortAvailability {\r\n  left_suggest: string;\r\n  left_available: Array<string>;\r\n  right_suggest: string;\r\n  right_available: Array<string>;\r\n}\r\nexport interface UserInfoObject extends ElementObject {\r\n  username: string;\r\n  email?: string;\r\n  first_name?: string;\r\n  last_name?: string;\r\n  is_admin?: boolean;\r\n}\r\n\r\nexport interface CreateUserObject {\r\n  password1: string;\r\n  password2: string;\r\n  username: string;\r\n  email?: string;\r\n  first_name?: string;\r\n  last_name?: string;\r\n}\r\n\r\nexport interface RackObject extends ElementObject {\r\n  datacenter: DatacenterObject;\r\n  row_letter: string;\r\n  rack_num: string;\r\n  height: string;\r\n  is_network_controlled?: boolean;\r\n}\r\n\r\nexport interface RackResponseObject {\r\n  rack: RackObject;\r\n  assets: Array<AssetObjectOld>;\r\n}\r\n\r\nexport interface DatacenterObject extends ElementObject {\r\n  name: string;\r\n  abbreviation: string;\r\n}\r\n\r\nexport interface ModificationsObject {\r\n  existing: Array<ModelObjectOld>;\r\n  modified: Array<ModelObjectOld>;\r\n}\r\n\r\nexport interface ModelObjectOld extends ElementObject {\r\n  vendor: string;\r\n  model_number: string;\r\n  height: string;\r\n  display_color?: string;\r\n  num_ethernet_ports?: string; //\r\n  num_power_ports?: string; //\r\n  cpu?: string;\r\n  memory_gb?: string; //\r\n  storage?: string;\r\n  comment?: string;\r\n}\r\n\r\nexport interface ModelObject extends ElementObject {\r\n  vendor: string;\r\n  model_number: string;\r\n  height: string;\r\n  display_color?: string;\r\n  num_network_ports?: string;\r\n  network_ports?: Array<string>; //\r\n  num_power_ports?: string; //\r\n  cpu?: string;\r\n  memory_gb?: string; //\r\n  storage?: string;\r\n  comment?: string;\r\n}\r\nexport interface ModelDetailObject {\r\n  model: ModelObjectOld;\r\n  assets: Array<AssetObjectOld>;\r\n}\r\n\r\nexport interface UserPermissionsObject {\r\n  [index: string]: any;\r\n  model_management: boolean;\r\n  asset_management: boolean;\r\n  power_control: boolean;\r\n  audit_read: boolean;\r\n  admin: boolean;\r\n  datacenter_permissions: Array<string>;\r\n}\r\n\r\nexport type ElementObjectType =\r\n  | ModelObjectOld\r\n  | ModelObject\r\n  | RackObject\r\n  | AssetObjectOld\r\n  | AssetObject\r\n  | ShallowAssetObject\r\n  | UserInfoObject\r\n  | DatacenterObject\r\n  | ChangePlan;\r\n\r\nexport type FormObjectType =\r\n  | ModelObjectOld\r\n  | RackObject\r\n  | AssetObjectOld\r\n  | AssetObject\r\n  | DatacenterObject\r\n  | RackRangeFields\r\n  | ShallowAssetObject\r\n  | UserInfoObject\r\n  | CreateUserObject\r\n  | ChangePlan\r\n  | UserPermissionsObject;\r\n\r\nexport function isObject(obj: any) {\r\n  return obj === Object(obj);\r\n}\r\nexport function isModelObject(obj: any): obj is ModelObject {\r\n  return obj && obj.model_number;\r\n}\r\nexport function isDatacenterObject(obj: any): obj is DatacenterObject {\r\n  return obj && obj.abbreviation;\r\n}\r\nexport function isRackObject(obj: any): obj is RackObject {\r\n  return obj && obj.rack_num;\r\n}\r\nexport function isAssetObject(obj: any): obj is AssetObject {\r\n  return obj && obj.model;\r\n}\r\nexport function isRackRangeFields(obj: any): obj is RackRangeFields {\r\n  return obj && (obj.letter_start || obj.letter_start === \"\");\r\n}\r\nexport function isUserObject(obj: any): obj is UserInfoObject {\r\n  return obj && obj.username;\r\n}\r\nexport function isChangePlanObject(obj: any): obj is ChangePlan {\r\n  return obj && obj.name && !obj.abbreviation;\r\n}\r\nexport function isAssetCPObject(obj: any): obj is AssetCPObject {\r\n  return obj && obj.change_plan;\r\n}\r\nexport const getHeaders = (token: string) => {\r\n  return {\r\n    headers: {\r\n      Authorization: \"Token \" + token,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getChangePlanRowStyle = (item: any) => {\r\n  return {\r\n    fontWeight: isAssetCP(item) ? (\"bold\" as any) : (\"normal\" as any),\r\n    color: isAssetCP(item) ? \"#bf8c0a\" : \"white\",\r\n  };\r\n};\r\n\r\nexport function isAssetCP(obj: any): boolean {\r\n  return obj && obj.change_plan;\r\n}\r\n\r\nexport const isAdmin = (headers: any) => {\r\n  let isAdmin = false;\r\n  axios\r\n    .get(API_ROOT + \"api/iamadmin\", headers)\r\n    .then((res) => {\r\n      if (res.data.is_admin) {\r\n        isAdmin = true;\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n  return isAdmin;\r\n};\r\n\r\nexport function getFields(type: string, headers: any) {\r\n  return axios\r\n    .post(\r\n      API_ROOT + \"api/\" + type + \"/get-many\",\r\n      { sort_by: [], filters: [] },\r\n      headers\r\n    )\r\n    .then((res) => {\r\n      let items: Array<string>;\r\n      if (type === ElementType.MODEL) {\r\n        items = Object.keys(res.data.models[0]);\r\n      } else {\r\n        items = Object.keys(res.data.assets[0]);\r\n      }\r\n      var keys = [];\r\n      for (var i = 0; i < items.length; i++) {\r\n        if (items[i] !== \"id\") {\r\n          keys.push(items[i]);\r\n        }\r\n      }\r\n      return keys;\r\n    });\r\n}\r\n","let backendHost;\r\n\r\nconst hostname = window && window.location && window.location.hostname;\r\n\r\nif (hostname === \"rack-city-dev.herokuapp.com\") {\r\n  backendHost = \"https://rack-city-dev.herokuapp.com\";\r\n} else if (hostname === \"rack-city-staging.herokuapp.com\") {\r\n  backendHost = \"https://rack-city-staging.herokuapp.com\";\r\n} else if (hostname === \"rack-city-prod.herokuapp.com\") {\r\n  backendHost = \"https://rack-city-prod.herokuapp.com\";\r\n} else {\r\n  backendHost = \"http://192.168.1.17:8000\"; //process.env.REACT_APP_BACKEND_HOST || \"http://127.0.0.1:8000\";\r\n}\r\n\r\nexport const API_ROOT = `${backendHost}/`;\r\n","export const AUTH_START = \"AUTH_START\";\r\nexport const AUTH_SUCCESS = \"AUTH_SUCCESS\";\r\nexport const AUTH_FAIL = \"AUTH_FAIL\";\r\nexport const AUTH_LOGOUT = \"AUTH_LOGOUT\";\r\nexport const AUTH_ADMIN = \"AUTH_ADMIN\";\r\nexport const REGISTRATION_SUCCESS = \"REGISTRATION_SUCCESS\";\r\nexport const REGISTRATION_FAIL = \"REGISTRATION FAIL\";\r\nexport const SWITCH_CHANGE_PLAN = \"SWITCH CHANGE PLAN\";\r\nexport const UPDATE_CHANGE_PLANS = \"UPDATE CHANGE PLANS\";\r\nexport const SET_PERMISSION_STATE = \"SET PERMISSION STATE\";\r\n","import {\r\n  ItemPredicate,\r\n  ItemRenderer,\r\n  Suggest,\r\n  Select,\r\n} from \"@blueprintjs/select\";\r\nimport React from \"react\";\r\nimport { MenuItem } from \"@blueprintjs/core\";\r\nimport {\r\n  ModelObject,\r\n  RackObject,\r\n  DatacenterObject,\r\n  AssetObject,\r\n  AssetFieldsTable,\r\n  ModelFieldsTable,\r\n  ChangePlan,\r\n} from \"../utils/utils\";\r\n\r\nexport enum FormTypes {\r\n  CREATE = \"create\",\r\n  MODIFY = \"modify\",\r\n  DELETE = \"delete\",\r\n}\r\nexport function escapeRegExpChars(text: string) {\r\n  // eslint-disable-next-line\r\n  return text.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\r\n}\r\nexport function isMacAddressValid(text: string) {\r\n  const regex = new RegExp(\r\n    \"^([0-9A-Fa-f]{2}[-_:.,;]){5}([0-9A-Fa-f]{2})$|^[A-Fa-f0-9]{12}$\"\r\n  );\r\n  if (regex.exec(text)) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport const macAddressInfo = (\r\n  <p>6-byte hexadecimal string with optional delimiters</p>\r\n);\r\nexport const filterNumber: ItemPredicate<string> = (\r\n  query,\r\n  value,\r\n  _index,\r\n  exactMatch\r\n) => {\r\n  const normalizedQuery = query.toLowerCase();\r\n  const normalizedValue = value.toString().toLowerCase();\r\n  if (exactMatch) {\r\n    return query === value;\r\n  }\r\n  return normalizedQuery === normalizedValue;\r\n};\r\n\r\nexport const filterAssetField: ItemPredicate<string> = (\r\n  query,\r\n  field,\r\n  _index,\r\n  exactMatch\r\n) => {\r\n  let normalizedTitle;\r\n  if (AssetFieldsTable[field]) {\r\n    normalizedTitle = AssetFieldsTable[field].toLowerCase();\r\n  } else {\r\n    normalizedTitle = field.toLowerCase();\r\n  }\r\n  const normalizedQuery = query.toLowerCase();\r\n\r\n  if (exactMatch) {\r\n    return normalizedTitle === normalizedQuery;\r\n  } else {\r\n    return normalizedTitle.indexOf(normalizedQuery) >= 0;\r\n  }\r\n};\r\n\r\nexport const filterModelField: ItemPredicate<string> = (\r\n  query,\r\n  field,\r\n  _index,\r\n  exactMatch\r\n) => {\r\n  let normalizedTitle;\r\n  if (ModelFieldsTable[field]) {\r\n    normalizedTitle = ModelFieldsTable[field].toLowerCase();\r\n  } else {\r\n    normalizedTitle = field.toLowerCase();\r\n  }\r\n  const normalizedQuery = query.toLowerCase();\r\n\r\n  if (exactMatch) {\r\n    return normalizedTitle === normalizedQuery;\r\n  } else {\r\n    return normalizedTitle.indexOf(normalizedQuery) >= 0;\r\n  }\r\n};\r\nexport const filterString: ItemPredicate<string> = (\r\n  query,\r\n  vendor,\r\n  _index,\r\n  exactMatch\r\n) => {\r\n  const normalizedTitle = vendor.toLowerCase();\r\n  const normalizedQuery = query.toLowerCase();\r\n\r\n  if (exactMatch) {\r\n    return normalizedTitle === normalizedQuery;\r\n  } else {\r\n    return normalizedTitle.indexOf(normalizedQuery) >= 0;\r\n  }\r\n};\r\n\r\nexport const filterRack: ItemPredicate<RackObject> = (\r\n  query,\r\n  rack,\r\n  _index,\r\n  exactMatch\r\n) => {\r\n  const rowLetter = rack.row_letter.toLowerCase();\r\n  const rackNum = rack.rack_num;\r\n  const normalizedQuery = query.toLowerCase();\r\n\r\n  if (exactMatch) {\r\n    return rackNum === normalizedQuery || rowLetter === normalizedQuery;\r\n  } else {\r\n    return (rowLetter + rackNum).indexOf(normalizedQuery) >= 0;\r\n  }\r\n};\r\nexport const filterDatacenter: ItemPredicate<DatacenterObject> = (\r\n  query,\r\n  datacenter,\r\n  _index,\r\n  exactMatch\r\n) => {\r\n  const name = datacenter.name.toLowerCase();\r\n  const abbreviation = datacenter.abbreviation.toLowerCase();\r\n  const normalizedQuery = query.toLowerCase();\r\n\r\n  if (exactMatch) {\r\n    return name === normalizedQuery || abbreviation === normalizedQuery;\r\n  } else {\r\n    return (abbreviation + name).indexOf(normalizedQuery) >= 0;\r\n  }\r\n};\r\n\r\nexport const filterChangePlan: ItemPredicate<ChangePlan> = (\r\n  query,\r\n  changePlan,\r\n  _index,\r\n  exactMatch\r\n) => {\r\n  const name = changePlan.name.toLowerCase();\r\n\r\n  const normalizedQuery = query.toLowerCase();\r\n\r\n  if (exactMatch) {\r\n    return name === normalizedQuery;\r\n  } else {\r\n    return name.indexOf(normalizedQuery) >= 0;\r\n  }\r\n};\r\nexport const filterModel: ItemPredicate<ModelObject> = (\r\n  query,\r\n  model,\r\n  _index,\r\n  exactMatch\r\n) => {\r\n  const normalizedVendor = model.vendor.toLowerCase();\r\n  const normalizedModel = model.model_number.toLowerCase();\r\n  const normalizedQuery = query.toLowerCase();\r\n\r\n  if (exactMatch) {\r\n    return (\r\n      normalizedVendor === normalizedQuery ||\r\n      normalizedModel === normalizedQuery\r\n    );\r\n  } else {\r\n    return (\r\n      `. ${normalizedVendor} ${normalizedModel}`.indexOf(normalizedQuery) >= 0\r\n    );\r\n  }\r\n};\r\n\r\nexport const filterAsset: ItemPredicate<AssetObject> = (\r\n  query,\r\n  asset,\r\n  _index,\r\n  exactMatch\r\n) => {\r\n  if (asset.hostname) {\r\n    const normalizedHostname = asset.hostname.toLowerCase();\r\n\r\n    const normalizedQuery = query.toLowerCase();\r\n\r\n    if (exactMatch) {\r\n      return normalizedHostname === normalizedQuery;\r\n    } else {\r\n      return `. ${normalizedHostname}`.indexOf(normalizedQuery) >= 0;\r\n    }\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nfunction highlightText(text: string, query: string) {\r\n  let lastIndex = 0;\r\n  const words = query\r\n    .split(/\\s+/)\r\n    .filter((word) => word.length > 0)\r\n    .map(escapeRegExpChars);\r\n  if (words.length === 0) {\r\n    return [text];\r\n  }\r\n\r\n  const regexp = new RegExp(words.join(\"|\"), \"gi\");\r\n  const tokens: React.ReactNode[] = [];\r\n  while (true) {\r\n    const match = regexp.exec(text);\r\n    if (!match) {\r\n      break;\r\n    }\r\n    const length = match[0].length;\r\n    const before = text.slice(lastIndex, regexp.lastIndex - length);\r\n    if (before.length > 0) {\r\n      tokens.push(before);\r\n    }\r\n    lastIndex = regexp.lastIndex;\r\n    tokens.push(<strong key={lastIndex}>{match[0]}</strong>);\r\n  }\r\n  const rest = text.slice(lastIndex);\r\n  if (rest.length > 0) {\r\n    tokens.push(rest);\r\n  }\r\n  return tokens;\r\n}\r\n\r\nexport const renderAssetFieldItem: ItemRenderer<string> = (\r\n  field,\r\n  { handleClick, modifiers, query }\r\n) => {\r\n  if (!modifiers.matchesPredicate) {\r\n    return null;\r\n  }\r\n  const text = AssetFieldsTable[field];\r\n  return (\r\n    <MenuItem\r\n      active={modifiers.active}\r\n      text={highlightText(text, query)}\r\n      onClick={handleClick}\r\n    />\r\n  );\r\n};\r\nexport const renderModelFieldItem: ItemRenderer<string> = (\r\n  field,\r\n  { handleClick, modifiers, query }\r\n) => {\r\n  if (!modifiers.matchesPredicate) {\r\n    return null;\r\n  }\r\n  const text = ModelFieldsTable[field];\r\n  return (\r\n    <MenuItem\r\n      active={modifiers.active}\r\n      text={highlightText(text, query)}\r\n      onClick={handleClick}\r\n    />\r\n  );\r\n};\r\n\r\nexport const renderStringItem: ItemRenderer<string> = (\r\n  vendor,\r\n  { handleClick, modifiers, query }\r\n) => {\r\n  if (!modifiers.matchesPredicate) {\r\n    return null;\r\n  }\r\n  return (\r\n    <MenuItem\r\n      active={modifiers.active}\r\n      text={highlightText(vendor, query)}\r\n      onClick={handleClick}\r\n    />\r\n  );\r\n};\r\n\r\nexport const renderRackItem: ItemRenderer<RackObject> = (\r\n  rack: RackObject,\r\n  { handleClick, modifiers, query }\r\n) => {\r\n  if (!modifiers.matchesPredicate) {\r\n    return null;\r\n  }\r\n  const text = rack.row_letter + rack.rack_num;\r\n  return (\r\n    <MenuItem\r\n      active={modifiers.active}\r\n      text={highlightText(text, query)}\r\n      onClick={handleClick}\r\n    />\r\n  );\r\n};\r\n\r\nexport const renderDatacenterItem: ItemRenderer<DatacenterObject> = (\r\n  datacenter: DatacenterObject,\r\n  { handleClick, modifiers, query }\r\n) => {\r\n  if (!modifiers.matchesPredicate) {\r\n    return null;\r\n  }\r\n  const text = datacenter.name;\r\n  return (\r\n    <MenuItem\r\n      active={modifiers.active}\r\n      label={datacenter.abbreviation}\r\n      text={highlightText(text, query)}\r\n      onClick={handleClick}\r\n    />\r\n  );\r\n};\r\n\r\nexport const renderModelItem: ItemRenderer<ModelObject> = (\r\n  model: ModelObject,\r\n  { handleClick, modifiers, query }\r\n) => {\r\n  if (!modifiers.matchesPredicate) {\r\n    return null;\r\n  }\r\n  const text = model.vendor;\r\n  return (\r\n    <MenuItem\r\n      active={modifiers.active}\r\n      label={model.model_number}\r\n      text={highlightText(text, query)}\r\n      onClick={handleClick}\r\n    />\r\n  );\r\n};\r\nexport const renderChangePlanItem: ItemRenderer<ChangePlan> = (\r\n  changePlan: ChangePlan,\r\n  { handleClick, modifiers, query }\r\n) => {\r\n  if (!modifiers.matchesPredicate) {\r\n    return null;\r\n  }\r\n  const text = changePlan.name;\r\n  return (\r\n    <MenuItem\r\n      active={modifiers.active}\r\n      text={highlightText(text, query)}\r\n      onClick={handleClick}\r\n    />\r\n  );\r\n};\r\n\r\nexport const renderAssetItem: ItemRenderer<AssetObject> = (\r\n  asset: AssetObject,\r\n  { handleClick, modifiers, query }\r\n) => {\r\n  if (!modifiers.matchesPredicate) {\r\n    return null;\r\n  }\r\n  const text = asset.hostname;\r\n  if (text) {\r\n    return (\r\n      <MenuItem\r\n        active={modifiers.active}\r\n        label={asset.model.vendor + \" \" + asset.model.model_number}\r\n        text={highlightText(text, query)}\r\n        onClick={handleClick}\r\n      />\r\n    );\r\n  }\r\n  return null;\r\n};\r\nexport const renderCreateItemOption = (\r\n  query: string,\r\n  active: boolean,\r\n  handleClick: React.MouseEventHandler<HTMLElement>\r\n) => (\r\n  <MenuItem\r\n    icon=\"add\"\r\n    text={`Use \"${query}\"`}\r\n    active={active}\r\n    onClick={handleClick}\r\n    shouldDismissPopover={false}\r\n  />\r\n);\r\nexport const StringSelect = Select.ofType<string>();\r\nexport const StringSuggest = Suggest.ofType<string>();\r\nexport const ModelSelect = Select.ofType<ModelObject>();\r\nexport const RackSelect = Select.ofType<RackObject>();\r\nexport const DatacenterSelect = Select.ofType<DatacenterObject>();\r\nexport const AssetSelect = Select.ofType<AssetObject>();\r\nexport const ChangePlanSelect = Select.ofType<ChangePlan>();\r\n","import axios from \"axios\";\r\nimport { API_ROOT } from \"../../utils/api-config\";\r\nimport * as actionTypes from \"./actionTypes\";\r\nimport { ChangePlan } from \"../../utils/utils\";\r\nimport { PermissionState } from \"../../utils/permissionUtils\";\r\n\r\nexport const DUKE_OAUTH_URI =\r\n  \"https://oauth.oit.duke.edu/oauth/authorize.php?client_id=hyposoft-rack-city&response_type=token&state=1129&scope=basic&redirect_uri=\";\r\n\r\nexport const setChangePlan = (changePlan: ChangePlan) => {\r\n  return {\r\n    type: actionTypes.SWITCH_CHANGE_PLAN,\r\n    changePlan: changePlan,\r\n  };\r\n};\r\n\r\nexport const updateChangePlans = (status: boolean) => {\r\n  console.log(\"setting update changee plans to\", status);\r\n  return {\r\n    type: actionTypes.UPDATE_CHANGE_PLANS,\r\n    updateChangePlansBoolean: status,\r\n  };\r\n};\r\nexport const setPermissionState = (permissionState: PermissionState) => {\r\n  return {\r\n    type: actionTypes.SET_PERMISSION_STATE,\r\n    permissionState: permissionState,\r\n  };\r\n};\r\nexport const authStart = () => {\r\n  return {\r\n    type: actionTypes.AUTH_START,\r\n  };\r\n};\r\n\r\nvar console: any = {};\r\n\r\nconsole.log = function () {};\r\nexport const authSuccess = (token: string) => {\r\n  return {\r\n    type: actionTypes.AUTH_SUCCESS,\r\n    token: token,\r\n  };\r\n};\r\n\r\nexport const authAdmin = () => {\r\n  return {\r\n    type: actionTypes.AUTH_ADMIN,\r\n  };\r\n};\r\n\r\nexport const authFail = (error: string) => {\r\n  return {\r\n    type: actionTypes.AUTH_FAIL,\r\n    error: error,\r\n  };\r\n};\r\n\r\nexport const registrationFail = (error: string) => {\r\n  return {\r\n    type: actionTypes.REGISTRATION_FAIL,\r\n    error: error,\r\n  };\r\n};\r\n\r\nexport const logout = () => {\r\n  localStorage.removeItem(\"token\");\r\n  localStorage.removeItem(\"expirationDate\");\r\n  return {\r\n    type: actionTypes.AUTH_LOGOUT,\r\n  };\r\n};\r\n\r\nexport const authLogin = (username: string, password: string) => {\r\n  return (dispatch: any) => {\r\n    dispatch(authStart());\r\n\r\n    console.log(API_ROOT + \"rest-auth/login/\");\r\n\r\n    axios\r\n      .post(API_ROOT + \"rest-auth/login/\", {\r\n        username: username,\r\n        password: password,\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        loginHelper(res, dispatch);\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"login failed\", err);\r\n        dispatch(authFail(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const netidAuthLogin = (access_token: string) => {\r\n  return (dispatch: any) => {\r\n    dispatch(authStart());\r\n    console.log(API_ROOT + \"api/users/netid-login\");\r\n    axios\r\n      .post(API_ROOT + \"api/users/netid-login\", {\r\n        access_token: access_token,\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        loginHelper(res, dispatch);\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"login failed\", err);\r\n        dispatch(authFail(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const checkAdmin = (token: string) => {\r\n  return (dispatch: any) => {\r\n    const headers = {\r\n      headers: {\r\n        Authorization: \"Token \" + token,\r\n      },\r\n    };\r\n    axios\r\n      .get(API_ROOT + \"api/iamadmin\", headers)\r\n      .then((res) => {\r\n        if (res.data.is_admin) {\r\n          dispatch(authAdmin());\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n};\r\n\r\nexport const checkPermissions = (token: string) => {\r\n  return (dispatch: any) => {\r\n    const headers = {\r\n      headers: {\r\n        Authorization: \"Token \" + token,\r\n      },\r\n    };\r\n    axios\r\n      .get(API_ROOT + \"api/users/permissions/mine\", headers)\r\n      .then((res) => {\r\n        let permissionState: PermissionState = {\r\n          model_management: res.data.model_management,\r\n          asset_management: res.data.asset_management,\r\n          power_control: res.data.power_control,\r\n          audit_read: res.data.audit_read,\r\n          admin: res.data.admin,\r\n          datacenter_permissions: res.data.datacenter_permissions,\r\n        };\r\n        dispatch(setPermissionState(permissionState));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n};\r\n\r\nexport const loginHelper = (res: any, dispatch: any) => {\r\n  const token = res.data.key;\r\n  const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\r\n  localStorage.setItem(\"token\", token);\r\n  localStorage.setItem(\"expirationDate\", expirationDate.toString());\r\n\r\n  dispatch(authSuccess(token));\r\n  dispatch(checkAdmin(token));\r\n  dispatch(checkPermissions(token));\r\n  // dispatch(checkAuthTimeout(3600));\r\n};\r\n\r\nexport const authCheckState = () => {\r\n  return (dispatch: any) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token === undefined) {\r\n      dispatch(logout());\r\n    } else {\r\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\")!);\r\n      if (expirationDate <= new Date()) {\r\n        dispatch(logout());\r\n      } else {\r\n        dispatch(authSuccess(token!));\r\n        dispatch(checkAdmin(token!));\r\n        dispatch(checkPermissions(token!));\r\n      }\r\n    }\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  DragDropContext,\r\n  Draggable,\r\n  Droppable,\r\n  DropResult,\r\n} from \"react-beautiful-dnd\";\r\nimport { Callout } from \"@blueprintjs/core\";\r\nimport { IconNames } from \"@blueprintjs/icons\";\r\n\r\n// fake data generator\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list: any, startIndex: number, endIndex: number) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 4;\r\n\r\nconst getItemStyle = (isDragging: boolean, draggableStyle: any) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: `0 ${grid}px 0 0`,\r\n  borderRadius: 3,\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? \"#202B33\" : \"#30404D\",\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle,\r\n});\r\n\r\nconst getListStyle = (isDraggingOver: boolean) => ({\r\n  background: \"#202B33\",\r\n  display: \"flex\",\r\n  borderRadius: 5,\r\n  padding: 2,\r\n  minHeight: 40,\r\n  width: \"100%\",\r\n  overflow: \"auto\",\r\n  margin: 5,\r\n});\r\nexport enum DragDropListTypes {\r\n  FILTER = \"filter\",\r\n  SORT = \"sort\",\r\n}\r\nexport interface DragDropListProps {\r\n  items: Array<any>;\r\n  type: DragDropListTypes;\r\n  renderItem(item: any): any;\r\n  onChange?(items: Array<any>): void;\r\n}\r\nclass DragDropList extends React.Component<DragDropListProps> {\r\n  //   constructor(props) {\r\n  //     super(props);\r\n  //     this.state = {\r\n  //       items: getItems(6),\r\n  //     };\r\n  //     this.onDragEnd = this.onDragEnd.bind(this);\r\n  //   }\r\n\r\n  onDragEnd = (result: DropResult) => {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const items = reorder(\r\n      this.props.items,\r\n      result.source.index,\r\n      result.destination.index\r\n    );\r\n\r\n    this.setState({\r\n      items,\r\n    });\r\n    if (this.props.onChange) {\r\n      this.props.onChange(items);\r\n    }\r\n  };\r\n  getEmptyListMessage() {\r\n    if (this.props.type === DragDropListTypes.FILTER) {\r\n      return <Callout>Select filter(s) above</Callout>;\r\n    }\r\n    if (this.props.type === DragDropListTypes.SORT) {\r\n      return <Callout>Select column(s) to sort by below</Callout>;\r\n    }\r\n  }\r\n  getIcon() {\r\n    if (this.props.type === DragDropListTypes.FILTER) {\r\n      return (\r\n        <Callout className=\"callout-icon\" icon={IconNames.FILTER}></Callout>\r\n      );\r\n    }\r\n    if (this.props.type === DragDropListTypes.SORT) {\r\n      return (\r\n        <Callout\r\n          className=\"callout-icon\"\r\n          icon={IconNames.DOUBLE_CARET_VERTICAL}\r\n        ></Callout>\r\n      );\r\n    }\r\n  }\r\n  // Normally you would want to split things out into separate components.\r\n  // But in this example everything is just done in one place for simplicity\r\n  render() {\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\r\n          {(provided, snapshot) => (\r\n            <div\r\n              ref={provided.innerRef}\r\n              style={getListStyle(snapshot.isDraggingOver)}\r\n              {...provided.droppableProps}\r\n            >\r\n              {this.getIcon()}\r\n              {this.props.items.length > 0\r\n                ? this.props.items.map((item: any, index: number) => (\r\n                    <Draggable\r\n                      key={item.id}\r\n                      draggableId={item.id}\r\n                      index={index}\r\n                    >\r\n                      {(provided, snapshot) => (\r\n                        <div\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          style={getItemStyle(\r\n                            snapshot.isDragging,\r\n                            provided.draggableProps.style\r\n                          )}\r\n                        >\r\n                          {this.props.renderItem(item)}\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  ))\r\n                : this.getEmptyListMessage()}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DragDropList;\r\n","export const updateObject = (oldObject: any, updatedProperties: any) => {\r\n  return {\r\n    ...oldObject, // takes the old object and update keys from updatedProperties\r\n    ...updatedProperties,\r\n  };\r\n};\r\n","import {\r\n  RackRangeFields,\r\n  ModelObject,\r\n  AssetObject,\r\n  DatacenterObject,\r\n  UserInfoObject,\r\n  ChangePlan,\r\n  UserPermissionsObject,\r\n} from \"../../utils/utils\";\r\nimport { API_ROOT } from \"../../utils/api-config\";\r\nimport axios from \"axios\";\r\nexport interface ITableSort {\r\n  field: string;\r\n  ascending: boolean;\r\n  id: string;\r\n}\r\n\r\nexport enum ElementTableOpenAlert {\r\n  NONE = \"none\",\r\n  DELETE = \"delete\",\r\n  DECOMMISSION = \"decommission\",\r\n  GRANT_ADMIN = \"grant_admin\",\r\n  REVOKE_ADMIN = \"revoke_admin\",\r\n}\r\n\r\nexport enum FilterTypes {\r\n  TEXT = \"text\",\r\n  NUMERIC = \"numeric\",\r\n  RACKRANGE = \"rack_range\",\r\n  DATETIME = \"datetime\",\r\n}\r\n\r\nexport enum PagingTypes {\r\n  TEN = 10,\r\n  FIFTY = 50,\r\n  HUNDRED = 100,\r\n  ALL = \"View All\",\r\n}\r\nexport enum TextFilterTypes {\r\n  EXACT = \"exact\",\r\n  CONTAINS = \"contains\",\r\n}\r\n\r\nexport interface IFilter {\r\n  id: string;\r\n  field: string;\r\n  filter_type?: FilterTypes;\r\n  filter?: TextFilter | NumericFilter | RackRangeFields | DatetimeFilter;\r\n}\r\nconst numberFields = [\r\n  \"rack_position\",\r\n  \"height\",\r\n  \"num_ethernet_ports\",\r\n  \"num_power_ports\",\r\n  \"memory_gb\",\r\n  \"num_network_ports\",\r\n];\r\n\r\nexport function getFilterType(field: string | undefined) {\r\n  if (field) {\r\n    if (field === \"rack\") {\r\n      return FilterTypes.RACKRANGE;\r\n    } else if (field === \"time_decommissioned\") {\r\n      return FilterTypes.DATETIME;\r\n    } else if (numberFields.includes(field)) {\r\n      return FilterTypes.NUMERIC;\r\n    }\r\n    return FilterTypes.TEXT;\r\n  }\r\n}\r\n\r\nexport interface NumericFilter {\r\n  min?: number;\r\n  max?: number;\r\n}\r\nexport interface TextFilter {\r\n  value?: string;\r\n  match_type: string;\r\n}\r\nexport interface DatetimeFilter {\r\n  after?: string;\r\n  before?: string;\r\n}\r\n\r\nexport const renderTextFilterItem = (item: TextFilter) => {\r\n  return `${item.match_type} ${item.value}`;\r\n};\r\n\r\nexport const renderNumericFilterItem = (item: NumericFilter) => {\r\n  return `between ${item.min} - ${item.max}`;\r\n};\r\n\r\nexport const renderRackRangeFilterItem = (item: RackRangeFields) => {\r\n  if (item.letter_end && item.num_end) {\r\n    return `rows  ${item.letter_start} - ${item.letter_end} & letters ${item.num_start} - ${item.num_end}`;\r\n  } else if (item.letter_end) {\r\n    return `rows  ${item.letter_start} - ${item.letter_end} & letters ${item.num_start}`;\r\n  } else if (item.num_end) {\r\n    return `row  ${item.letter_start}  & letters ${item.num_start} - ${item.num_end}`;\r\n  } else {\r\n    return ` ${item.letter_start}${item.num_start} `;\r\n  }\r\n};\r\n\r\nexport const renderDatetimeFilterItem = (item: DatetimeFilter) => {\r\n  const after: Date | undefined = item.after ? new Date(item.after) : undefined;\r\n  const before: Date | undefined = item.before\r\n    ? new Date(item.before)\r\n    : undefined;\r\n  if (after && before) {\r\n    return `from ${after.toLocaleString()} to ${before.toLocaleString()}`;\r\n  } else if (after) {\r\n    return `after ${after.toLocaleString()}`;\r\n  } else if (before) {\r\n    return `before ${before.toLocaleString()}`;\r\n  }\r\n};\r\n\r\nexport const modifyModel = (model: ModelObject, headers: any) => {\r\n  return axios.post(API_ROOT + \"api/models/modify\", model, headers);\r\n};\r\nexport const deleteModel = (model: ModelObject, headers: any) => {\r\n  const data = { id: model!.id };\r\n  return axios.post(API_ROOT + \"api/models/delete\", data, headers);\r\n};\r\nexport const deleteAsset = (asset: AssetObject, headers: any) => {\r\n  const data = { id: asset.id };\r\n  return axios.post(API_ROOT + \"api/assets/delete\", data, headers);\r\n};\r\nexport const modifyAsset = (\r\n  asset: AssetObject,\r\n  headers: any,\r\n  changePlan: ChangePlan\r\n): Promise<any> => {\r\n  let config;\r\n  if (!changePlan) {\r\n    config = headers;\r\n  } else {\r\n    config = {\r\n      headers: headers[\"headers\"],\r\n      params: {\r\n        change_plan: changePlan.id,\r\n      },\r\n    };\r\n  }\r\n  return axios.post(API_ROOT + \"api/assets/modify\", asset, config);\r\n};\r\nexport const decommissionAsset = (\r\n  asset: AssetObject,\r\n  headers: any,\r\n  changePlan: ChangePlan\r\n) => {\r\n  let config;\r\n  if (!changePlan) {\r\n    config = headers;\r\n  } else {\r\n    config = {\r\n      headers: headers[\"headers\"],\r\n      params: {\r\n        change_plan: changePlan.id,\r\n      },\r\n    };\r\n  }\r\n\r\n  const data = { id: asset.id };\r\n  return axios.post(API_ROOT + \"api/assets/decommission\", data, config);\r\n};\r\n\r\nexport const modifyChangePlan = (\r\n  changePlan: ChangePlan,\r\n  headers: any\r\n): Promise<any> => {\r\n  return axios.post(API_ROOT + \"api/change-plans/modify\", changePlan, headers);\r\n};\r\nexport const deleteChangePlan = (\r\n  changePlan: ChangePlan,\r\n  headers: any\r\n): Promise<any> => {\r\n  return axios.post(API_ROOT + \"api/change-plans/delete\", changePlan, headers);\r\n};\r\n\r\nexport const deleteDatacenter = (\r\n  dc: DatacenterObject,\r\n  headers: any\r\n): Promise<any> => {\r\n  const data = { id: dc.id };\r\n  return axios.post(API_ROOT + \"api/datacenters/delete\", data, headers);\r\n};\r\n\r\nexport const modifyDatacenter = (\r\n  dc: DatacenterObject,\r\n  headers: any\r\n): Promise<any> => {\r\n  return axios.post(API_ROOT + \"api/datacenters/modify\", dc, headers);\r\n};\r\nexport const deleteUser = (\r\n  user: UserInfoObject,\r\n  headers: any\r\n): Promise<any> => {\r\n  const data = { id: user.id };\r\n  return axios.post(API_ROOT + \"api/users/delete\", data, headers);\r\n};\r\nexport const modifyUser = (\r\n  data: UserPermissionsObject,\r\n  headers: any\r\n): Promise<any> => {\r\n  return axios.post(API_ROOT + \"api/users/permissions/set\", data, headers);\r\n};\r\n","import { InputGroup } from \"@blueprintjs/core\";\r\nimport * as React from \"react\";\r\n\r\nexport interface IFieldProps {\r\n  field: string;\r\n  className?: string;\r\n  placeholder?: string;\r\n  value?: any;\r\n  type?: string;\r\n  onChange(field: { [key: string]: any }): void;\r\n}\r\n\r\nclass Field extends React.Component<IFieldProps> {\r\n  render() {\r\n    return (\r\n      <InputGroup\r\n        type={this.props.type}\r\n        className={this.props.className}\r\n        placeholder={this.props.placeholder}\r\n        value={this.props.value}\r\n        onChange={(e: any) =>\r\n          this.props.onChange({ [this.props.field]: e.currentTarget.value })\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default Field;\r\n","import { FormGroup } from \"@blueprintjs/core\";\r\nimport * as React from \"react\";\r\nimport Field from \"./field\";\r\nimport { RackRangeFields } from \"../utils/utils\";\r\ninterface RackRangeFormProps {\r\n  handleChange(field: { [key: string]: any }): void;\r\n  className?: string;\r\n  values: RackRangeFields;\r\n}\r\ninterface RackRangeFormState {\r\n  values: RackRangeFields;\r\n}\r\n\r\nvar console: any = {};\r\nconsole.log = function () {};\r\nclass RackRangeForm extends React.Component<\r\n  RackRangeFormProps,\r\n  RackRangeFormState\r\n> {\r\n  public state = {\r\n    values: {} as RackRangeFields,\r\n  };\r\n  componentDidMount = () => {\r\n    this.setState({\r\n      values: JSON.parse(JSON.stringify(this.props.values)),\r\n    });\r\n  };\r\n  componentWillReceiveProps = (nextProps: RackRangeFormProps) => {\r\n    if (\r\n      JSON.stringify(nextProps.values) !== JSON.stringify(this.props.values)\r\n    ) {\r\n      this.setState({\r\n        values: JSON.parse(JSON.stringify(nextProps.values)),\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className={this.props.className + \" rack-range\"}>\r\n        <div className=\"rack-letter\">\r\n          <FormGroup\r\n            className={this.props.className}\r\n            inline={true}\r\n            label=\"Row Letter Range   \"\r\n          >\r\n            <Field\r\n              field=\"letter_start\"\r\n              placeholder=\"start\"\r\n              type=\"text\"\r\n              value={this.state.values.letter_start}\r\n              onChange={this.props.handleChange}\r\n            />\r\n          </FormGroup>\r\n          <p className=\"dash\">to</p>\r\n\r\n          <FormGroup className={this.props.className}>\r\n            <Field\r\n              field=\"letter_end\"\r\n              type=\"text\"\r\n              placeholder=\"end\"\r\n              value={this.props.values.letter_end}\r\n              onChange={this.props.handleChange}\r\n            />\r\n          </FormGroup>\r\n        </div>\r\n        <div className=\"rack-letter\">\r\n          <FormGroup\r\n            className={this.props.className}\r\n            inline={true}\r\n            label=\"Rack Number Range\"\r\n          >\r\n            <Field\r\n              field=\"num_start\"\r\n              type=\"text\"\r\n              placeholder=\"start\"\r\n              value={this.props.values.num_start}\r\n              onChange={this.props.handleChange}\r\n            />\r\n          </FormGroup>\r\n          <p className=\"dash\">to</p>\r\n\r\n          <FormGroup className={this.props.className}>\r\n            <Field\r\n              field=\"num_end\"\r\n              type=\"text\"\r\n              placeholder=\"end\"\r\n              value={this.props.values.num_end}\r\n              onChange={this.props.handleChange}\r\n            />\r\n          </FormGroup>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default RackRangeForm;\r\n","import { Button, FormGroup, HTMLSelect, MenuItem } from \"@blueprintjs/core\";\r\nimport { DateRangeInput, DateRange } from \"@blueprintjs/datetime\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport { Select } from \"@blueprintjs/select\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport Field from \"../../forms/field\";\r\nimport \"../../forms/forms.scss\";\r\nimport {\r\n  filterAssetField,\r\n  renderAssetFieldItem,\r\n  renderModelFieldItem,\r\n  renderStringItem,\r\n  filterModelField,\r\n  filterString,\r\n} from \"../../forms/formUtils\";\r\nimport RackRangeForm from \"../../forms/rackRangeForm\";\r\nimport { updateObject } from \"../../store/utility\";\r\nimport {\r\n  AssetFieldsTable,\r\n  isRackRangeFields,\r\n  RackRangeFields,\r\n  ModelFieldsTable,\r\n} from \"../../utils/utils\";\r\nimport {\r\n  FilterTypes,\r\n  getFilterType,\r\n  IFilter,\r\n  NumericFilter,\r\n  TextFilter,\r\n  TextFilterTypes,\r\n  DatetimeFilter,\r\n} from \"./elementUtils\";\r\nimport \"./elementView.scss\";\r\n\r\n// var console: any = {};\r\n// console.log = function () { };\r\n\r\ninterface FilterSelectProps {\r\n  token: string;\r\n  fields: Array<string>;\r\n  handleAddFilter(filter: IFilter): void;\r\n}\r\n\r\nclass FilterSelect extends React.Component<\r\n  FilterSelectProps & RouteComponentProps,\r\n  IFilter\r\n> {\r\n  state = {\r\n    id: \"\",\r\n    field: \"\",\r\n    filter: {} as TextFilter | NumericFilter | RackRangeFields | DatetimeFilter,\r\n    filter_type: FilterTypes.TEXT,\r\n  };\r\n  renderFilterOptions(field: string | undefined) {\r\n    const type = getFilterType(field);\r\n    if (type === FilterTypes.TEXT) {\r\n      return this.getTextFilterOptions();\r\n    }\r\n    if (type === FilterTypes.NUMERIC) {\r\n      return this.getNumericFilterOptions();\r\n    }\r\n    if (type === FilterTypes.RACKRANGE) {\r\n      return this.getRackFilterOptions();\r\n    }\r\n    if (type === FilterTypes.DATETIME) {\r\n      return this.getDatetimeFilterOptions();\r\n    }\r\n    return null;\r\n  }\r\n  setTextFilterType(type: TextFilterTypes) {\r\n    this.setState({});\r\n  }\r\n  getRackFilterOptions() {\r\n    console.log(this.state.filter);\r\n    return this.state.filter && isRackRangeFields(this.state.filter) ? (\r\n      <div>\r\n        <RackRangeForm\r\n          className=\"\"\r\n          values={this.state.filter}\r\n          handleChange={this.handleChange}\r\n        />\r\n      </div>\r\n    ) : null;\r\n  }\r\n  getDatetimeFilterOptions() {\r\n    return (\r\n      <FormGroup label=\"Date range\">\r\n        <DateRangeInput\r\n          formatDate={(date: Date) => date.toLocaleString()}\r\n          onChange={this.handleDatetimeChange}\r\n          parseDate={(str: string) => new Date(str)}\r\n          allowSingleDayRange={true}\r\n          shortcuts={true}\r\n          singleMonthOnly={true}\r\n          closeOnSelection={false}\r\n          timePrecision=\"minute\"\r\n          timePickerProps={{ useAmPm: true }}\r\n        />\r\n      </FormGroup>\r\n    );\r\n  }\r\n  getNumericFilterOptions() {\r\n    return (\r\n      <div className=\"range\">\r\n        <FormGroup label=\"Min\">\r\n          <Field field=\"min\" placeholder=\"min\" onChange={this.handleChange} />\r\n        </FormGroup>\r\n        <FormGroup label=\"Max\">\r\n          <Field field=\"max\" placeholder=\"max\" onChange={this.handleChange} />\r\n        </FormGroup>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getTextFilterOptions() {\r\n    return (\r\n      <div>\r\n        <div className=\"bp3-select field test-select\">\r\n          <HTMLSelect\r\n            onChange={(e: any) =>\r\n              this.handleChange({ match_type: e.target.value })\r\n            }\r\n          >\r\n            {\" \"}\r\n            <option> {TextFilterTypes.CONTAINS}</option>\r\n            <option>{TextFilterTypes.EXACT}</option>\r\n          </HTMLSelect>\r\n        </div>\r\n        <FormGroup label=\"Query\">\r\n          <Field\r\n            field=\"value\"\r\n            placeholder=\"query\"\r\n            type=\"string\"\r\n            onChange={this.handleChange}\r\n          />\r\n        </FormGroup>\r\n      </div>\r\n    );\r\n  }\r\n  setFilterType(field: string) {\r\n    this.setState({\r\n      field: field,\r\n      filter_type: getFilterType(field),\r\n    });\r\n    const type = getFilterType(field);\r\n    if (type === FilterTypes.TEXT) {\r\n      const filter: TextFilter = {\r\n        match_type: TextFilterTypes.CONTAINS,\r\n      };\r\n      console.log(updateObject(this.state.filter, { ...filter }));\r\n      this.setState({\r\n        filter: filter,\r\n      });\r\n    }\r\n    if (type === FilterTypes.NUMERIC) {\r\n      const filter: NumericFilter = {};\r\n      this.setState({\r\n        filter: filter,\r\n      });\r\n    }\r\n    if (type === FilterTypes.RACKRANGE) {\r\n      const filter: RackRangeFields = { letter_start: \"\" } as RackRangeFields;\r\n      this.setState({\r\n        filter: filter,\r\n      });\r\n    }\r\n    if (type === FilterTypes.DATETIME) {\r\n      console.log(\"set type to datetime\");\r\n      const filter: DatetimeFilter = {};\r\n      this.setState({\r\n        filter: filter,\r\n      });\r\n    }\r\n  }\r\n  handleChange = (field: { [key: string]: any }) => {\r\n    const test = updateObject(this.state.filter, {\r\n      ...field,\r\n    });\r\n    console.log(\r\n      updateObject(this.state.filter, {\r\n        ...field,\r\n      })\r\n    );\r\n    this.setState({\r\n      filter: test,\r\n    });\r\n  };\r\n  handleDatetimeChange = (range: DateRange) => {\r\n    console.log(\"handling datetime change\");\r\n    let filter: DatetimeFilter = {\r\n      after: range[0] ? range[0].toISOString() : undefined,\r\n      before: range[1] ? range[1].toISOString() : undefined,\r\n    };\r\n    this.setState({ filter: filter });\r\n    console.log(\"datetime filter: \");\r\n    console.log(this.state.filter);\r\n  };\r\n  handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    console.log(\"test\");\r\n    const filter: IFilter = {\r\n      field: this.state.field,\r\n      filter_type: this.state.filter_type,\r\n      filter: this.state.filter,\r\n      id: this.state.field + JSON.stringify(this.state.filter),\r\n    };\r\n    console.log(filter);\r\n\r\n    this.props.handleAddFilter(filter);\r\n  };\r\n\r\n  getItemRenderer() {\r\n    if (this.props.fields.includes(\"asset_number\")) {\r\n      return renderAssetFieldItem;\r\n    } else if (this.props.fields.includes(\"vendor\")) {\r\n      return renderModelFieldItem;\r\n    }\r\n    return renderStringItem;\r\n  }\r\n\r\n  getItemFilterer() {\r\n    if (this.props.fields.includes(\"asset_number\")) {\r\n      return filterAssetField;\r\n    } else if (this.props.fields.includes(\"vendor\")) {\r\n      return filterModelField;\r\n    }\r\n    return filterString;\r\n  }\r\n\r\n  getButtonText(field: string) {\r\n    if (AssetFieldsTable[field]) {\r\n      return AssetFieldsTable[field];\r\n    } else if (ModelFieldsTable[field]) {\r\n      return ModelFieldsTable[field];\r\n    }\r\n    return field;\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"test-fields\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <FormGroup className=\"field-select\" label=\"Select Field To Filter \">\r\n            {\" \"}\r\n            <FieldSelect\r\n              popoverProps={{\r\n                minimal: true,\r\n                popoverClassName: \"dropdown\",\r\n                usePortal: true,\r\n              }}\r\n              // inputValueRenderer={(letter: string) => letter}\r\n              itemRenderer={this.getItemRenderer()}\r\n              items={this.props.fields}\r\n              onItemSelect={(field: string) => this.setFilterType(field)}\r\n              itemPredicate={this.getItemFilterer()}\r\n              noResults={<MenuItem disabled={true} text=\"No matching fields\" />}\r\n            >\r\n              <Button\r\n                rightIcon=\"caret-down\"\r\n                text={\r\n                  this.state.field\r\n                    ? this.getButtonText(this.state.field)\r\n                    : \"Select a Field\"\r\n                }\r\n              />\r\n            </FieldSelect>\r\n          </FormGroup>\r\n\r\n          {this.state.field\r\n            ? [\r\n                this.renderFilterOptions(this.state.field),\r\n                <div className=\"add-filter\">\r\n                  <Button icon=\"filter\" type=\"submit\">\r\n                    Add Filter\r\n                  </Button>\r\n                </div>,\r\n              ]\r\n            : null}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst FieldSelect = Select.ofType<string>();\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n    isAdmin: state.admin,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(withRouter(FilterSelect));\r\n","import {\r\n  Classes,\r\n  AnchorButton,\r\n  Alert,\r\n  Toaster,\r\n  IToastProps,\r\n  Position,\r\n  Intent,\r\n  Spinner,\r\n  Callout,\r\n} from \"@blueprintjs/core\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport axios from \"axios\";\r\nimport * as React from \"react\";\r\nimport { API_ROOT } from \"../../../utils/api-config\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  AssetObject,\r\n  getHeaders,\r\n  getChangePlanRowStyle,\r\n  ChangePlan,\r\n} from \"../../../utils/utils\";\r\nimport \"./powerView.scss\";\r\nimport { IconNames } from \"@blueprintjs/icons\";\r\nimport { PermissionState } from \"../../../utils/permissionUtils\";\r\n\r\ninterface PowerViewProps {\r\n  token: string;\r\n  callback?: Function;\r\n  asset?: AssetObject;\r\n  shouldUpdate: boolean;\r\n  updated: Function;\r\n  isAdmin: boolean;\r\n  changePlan: ChangePlan;\r\n  assetIsDecommissioned: boolean;\r\n  permissionState: PermissionState;\r\n}\r\n\r\ninterface PowerViewState {\r\n  powerConnections: any;\r\n  powerStatus: any;\r\n  statusLoaded: boolean;\r\n  alertOpen: boolean;\r\n  confirmationMessage: string;\r\n  username?: string;\r\n}\r\n\r\nexport class PowerView extends React.PureComponent<\r\n  RouteComponentProps & PowerViewProps,\r\n  PowerViewState\r\n> {\r\n  //TOASTS\r\n  private toaster: Toaster = {} as Toaster;\r\n  private addToast = (toast: IToastProps) => {\r\n    toast.timeout = 5000;\r\n    if (this.toaster) {\r\n      this.toaster.show(toast);\r\n    }\r\n  };\r\n  private addSuccessToast = (message: string) => {\r\n    this.addToast({ message: message, intent: Intent.PRIMARY });\r\n  };\r\n  private addErrorToast = (message: string) => {\r\n    this.addToast({ message: message, intent: Intent.DANGER });\r\n  };\r\n\r\n  private refHandlers = {\r\n    toaster: (ref: Toaster) => (this.toaster = ref),\r\n  };\r\n\r\n  public state: PowerViewState = {\r\n    powerConnections: undefined,\r\n    powerStatus: undefined,\r\n    statusLoaded: true,\r\n    alertOpen: false,\r\n    confirmationMessage: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.props.assetIsDecommissioned && !this.props.changePlan) {\r\n      this.setState({\r\n        statusLoaded: true,\r\n      });\r\n      axios\r\n        .get(\r\n          API_ROOT + \"api/power/get-state/\" + this.props.asset!.id,\r\n          getHeaders(this.props.token)\r\n        )\r\n        .then((res) => {\r\n          this.setState({\r\n            powerConnections: res.data.power_connections,\r\n            powerStatus: res.data.power_status,\r\n            statusLoaded: true,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          this.addErrorToast(err.response.data.failure_message);\r\n          this.setState({\r\n            statusLoaded: true,\r\n          });\r\n        });\r\n    } else {\r\n      this.setState({\r\n        statusLoaded: true,\r\n      });\r\n    }\r\n    this.getUsername(this.props.token);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.props.shouldUpdate) {\r\n      if (!this.props.assetIsDecommissioned && !this.props.changePlan) {\r\n        axios\r\n          .get(\r\n            API_ROOT + \"api/power/get-state/\" + this.props.asset!.id,\r\n            getHeaders(this.props.token)\r\n          )\r\n          .then((res) => {\r\n            this.setState({\r\n              powerConnections: res.data.power_connections,\r\n              powerStatus: res.data.power_status,\r\n              statusLoaded: true,\r\n            });\r\n          })\r\n          .catch((err) => {\r\n            this.addErrorToast(err.response.data.failure_message);\r\n            this.setState({\r\n              statusLoaded: true,\r\n            });\r\n          });\r\n        this.setState({\r\n          statusLoaded: true,\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        statusLoaded: true,\r\n      });\r\n    }\r\n    this.props.updated();\r\n  }\r\n\r\n  getUsername(token: string) {\r\n    const headers = {\r\n      headers: {\r\n        Authorization: \"Token \" + token,\r\n      },\r\n    };\r\n    axios\r\n      .get(API_ROOT + \"api/users/who-am-i\", headers)\r\n      .then((res) => {\r\n        this.setState({ username: res.data.username });\r\n      })\r\n      .catch((err) => {});\r\n  }\r\n\r\n  getPowerPortRows() {\r\n    const rows = [];\r\n    if (this.props.asset) {\r\n      for (\r\n        let i = 1;\r\n        i < ((this.props.asset.model.num_power_ports as unknown) as number) + 1;\r\n        i++\r\n      ) {\r\n        rows.push(\r\n          <tr>\r\n            <td style={getChangePlanRowStyle(this.props.asset)}>{i}</td>\r\n            {this.props.asset!.power_connections[i] ? (\r\n              <td style={getChangePlanRowStyle(this.props.asset)}>\r\n                {this.props.asset!.power_connections[i].port_number}\r\n                {this.props.asset!.power_connections[i].left_right}\r\n              </td>\r\n            ) : (\r\n              <td></td>\r\n            )}\r\n            {this.props.asset!.rack.is_network_controlled ? (\r\n              this.state.powerStatus ? (\r\n                <td>{this.state.powerStatus[i]}</td>\r\n              ) : this.props.assetIsDecommissioned || this.props.changePlan ? (\r\n                <td> </td>\r\n              ) : (\r\n                <td>Unable to contact PDU controller</td>\r\n              )\r\n            ) : (\r\n              <td>PDU not network controlled</td>\r\n            )}\r\n          </tr>\r\n        );\r\n      }\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={Classes.DARK}>\r\n        {this.state.statusLoaded ? (\r\n          !(\r\n            this.props.asset &&\r\n            ((this.props.asset.model.num_power_ports as unknown) as number) > 0\r\n          ) ? (\r\n            <div className=\"propsview\">\r\n              <h3>Power Connections</h3>\r\n              <Callout\r\n                title=\"No power ports\"\r\n                icon={IconNames.INFO_SIGN}\r\n              ></Callout>\r\n              {this.props.callback === undefined ? null : (\r\n                <AnchorButton\r\n                  className={\"power-close\"}\r\n                  intent=\"danger\"\r\n                  minimal\r\n                  text=\"Close\"\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      powerConnections: undefined,\r\n                      powerStatus: undefined,\r\n                      statusLoaded: false,\r\n                    });\r\n                    this.props.callback!();\r\n                  }}\r\n                />\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className=\"propsview\">\r\n              <h3>Power Connections</h3>\r\n              <div className=\"network-connections\">\r\n                <table className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-striped\">\r\n                  <tr>\r\n                    <th>Power Port Number</th>\r\n                    <th>PDU Port Number</th>\r\n                    <th>Power Status</th>\r\n                  </tr>\r\n                  <tbody>{this.getPowerPortRows()}</tbody>\r\n                </table>\r\n              </div>\r\n              {this.props.asset!.rack.is_network_controlled &&\r\n              Object.keys(this.props.asset!.power_connections).length > 0 &&\r\n              this.state.powerStatus &&\r\n              !this.props.assetIsDecommissioned &&\r\n              !this.props.changePlan ? (\r\n                <AnchorButton\r\n                  className={\"power-close\"}\r\n                  intent={\r\n                    this.state.powerStatus[\r\n                      Object.keys(this.state.powerStatus)[0]\r\n                    ] === \"OFF\"\r\n                      ? \"primary\"\r\n                      : \"danger\"\r\n                  }\r\n                  minimal\r\n                  text={\r\n                    this.state.powerStatus[\r\n                      Object.keys(this.state.powerStatus)[0]\r\n                    ] === \"OFF\"\r\n                      ? \"Turn on\"\r\n                      : \"Turn off\"\r\n                  }\r\n                  icon=\"power\"\r\n                  disabled={\r\n                    !(\r\n                      this.props.permissionState.admin ||\r\n                      this.props.permissionState.power_control ||\r\n                      this.state.username === this.props.asset.owner\r\n                    )\r\n                  }\r\n                  onClick={\r\n                    this.state.powerStatus[\r\n                      Object.keys(this.state.powerStatus)[0]\r\n                    ] === \"OFF\"\r\n                      ? () => {\r\n                          this.setState({\r\n                            statusLoaded: !this.state.statusLoaded,\r\n                          });\r\n                          axios\r\n                            .post(\r\n                              API_ROOT + \"api/power/mask-on\",\r\n                              { id: this.props.asset!.id },\r\n                              getHeaders(this.props.token)\r\n                            )\r\n                            .then((res) => {\r\n                              this.setState({\r\n                                alertOpen: true,\r\n                                confirmationMessage: res.data.success_message,\r\n                              });\r\n                              this.componentDidMount();\r\n                            })\r\n                            .catch((err) => {\r\n                              alert(err);\r\n                            });\r\n                        }\r\n                      : () => {\r\n                          this.setState({\r\n                            statusLoaded: !this.state.statusLoaded,\r\n                          });\r\n                          axios\r\n                            .post(\r\n                              API_ROOT + \"api/power/mask-off\",\r\n                              { id: this.props.asset!.id },\r\n                              getHeaders(this.props.token)\r\n                            )\r\n                            .then((res) => {\r\n                              this.setState({\r\n                                alertOpen: true,\r\n                                confirmationMessage: res.data.success_message,\r\n                              });\r\n                              this.componentDidMount();\r\n                            })\r\n                            .catch((err) => {\r\n                              alert(err);\r\n                            });\r\n                        }\r\n                  }\r\n                />\r\n              ) : null}\r\n              {this.props.asset!.rack.is_network_controlled &&\r\n              Object.keys(this.props.asset!.power_connections).length > 0 &&\r\n              this.state.powerStatus &&\r\n              !this.props.assetIsDecommissioned &&\r\n              !this.props.changePlan ? (\r\n                <AnchorButton\r\n                  className={\"power-close\"}\r\n                  minimal\r\n                  intent=\"warning\"\r\n                  text={\"Cycle Power\"}\r\n                  disabled={\r\n                    !(\r\n                      this.props.permissionState.admin ||\r\n                      this.props.permissionState.power_control ||\r\n                      this.state.username === this.props.asset.owner\r\n                    )\r\n                  }\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      statusLoaded: !this.state.statusLoaded,\r\n                    });\r\n                    axios\r\n                      .post(\r\n                        API_ROOT + \"api/power/cycle\",\r\n                        { id: this.props.asset!.id },\r\n                        getHeaders(this.props.token)\r\n                      )\r\n                      .then((res) => {\r\n                        this.setState({\r\n                          alertOpen: true,\r\n                          confirmationMessage: res.data.success_message,\r\n                        });\r\n                        this.componentDidMount();\r\n                      })\r\n                      .catch((err) => {\r\n                        alert(err);\r\n                      });\r\n                  }}\r\n                />\r\n              ) : null}\r\n              {this.props.callback === undefined ? null : (\r\n                <AnchorButton\r\n                  className={\"power-close\"}\r\n                  intent=\"danger\"\r\n                  minimal\r\n                  text=\"Close\"\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      powerConnections: undefined,\r\n                      powerStatus: undefined,\r\n                      statusLoaded: false,\r\n                    });\r\n                    this.props.callback!();\r\n                  }}\r\n                />\r\n              )}\r\n            </div>\r\n          )\r\n        ) : (\r\n          <Spinner />\r\n        )}\r\n        <Alert\r\n          className={Classes.DARK}\r\n          confirmButtonText=\"Okay\"\r\n          isOpen={this.state.alertOpen}\r\n          onConfirm={() => {\r\n            this.setState({\r\n              alertOpen: false,\r\n            });\r\n          }}\r\n          onClose={() => {\r\n            this.setState({\r\n              alertOpen: false,\r\n            });\r\n          }}\r\n        >\r\n          <p>{this.state.confirmationMessage}</p>\r\n        </Alert>\r\n        <Toaster\r\n          autoFocus={false}\r\n          canEscapeKeyClear={true}\r\n          position={Position.TOP}\r\n          ref={this.refHandlers.toaster}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStatetoProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n    isAdmin: state.admin,\r\n    changePlan: state.changePlan,\r\n    permissionState: state.permissionState,\r\n  };\r\n};\r\n\r\nexport default withRouter(connect(mapStatetoProps)(PowerView));\r\n","import {\r\n  Alert,\r\n  AnchorButton,\r\n  Classes,\r\n  Dialog,\r\n  HTMLSelect,\r\n  Icon,\r\n  Intent,\r\n  IToastProps,\r\n  Position,\r\n  Toaster,\r\n  Spinner,\r\n  Callout,\r\n  Checkbox,\r\n} from \"@blueprintjs/core\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport { IconNames } from \"@blueprintjs/icons\";\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport FormPopup from \"../../forms/formPopup\";\r\nimport { FormTypes } from \"../../forms/formUtils\";\r\nimport { updateObject } from \"../../store/utility\";\r\nimport {\r\n  AssetObject,\r\n  DatacenterObject,\r\n  ElementObjectType,\r\n  ElementType,\r\n  getHeaders,\r\n  isAssetObject,\r\n  isDatacenterObject,\r\n  isModelObject,\r\n  isObject,\r\n  isRackObject,\r\n  isRackRangeFields,\r\n  isUserObject,\r\n  RackRangeFields,\r\n  SortFilterBody,\r\n  UserInfoObject,\r\n  AssetFieldsTable,\r\n  ModelFieldsTable,\r\n  ROUTES,\r\n  isChangePlanObject,\r\n  ChangePlan,\r\n  getChangePlanRowStyle,\r\n  isAssetCPObject,\r\n} from \"../../utils/utils\";\r\nimport * as actions from \"../../store/actions/state\";\r\nimport DragDropList, { DragDropListTypes } from \"./dragDropList\";\r\nimport {\r\n  deleteAsset,\r\n  decommissionAsset,\r\n  deleteDatacenter,\r\n  deleteModel,\r\n  deleteUser,\r\n  ElementTableOpenAlert,\r\n  FilterTypes,\r\n  IFilter,\r\n  ITableSort,\r\n  modifyAsset,\r\n  modifyDatacenter,\r\n  modifyModel,\r\n  NumericFilter,\r\n  DatetimeFilter,\r\n  PagingTypes,\r\n  renderNumericFilterItem,\r\n  renderRackRangeFilterItem,\r\n  renderTextFilterItem,\r\n  renderDatetimeFilterItem,\r\n  TextFilter,\r\n  modifyChangePlan,\r\n  deleteChangePlan,\r\n} from \"./elementUtils\";\r\nimport \"./elementView.scss\";\r\nimport FilterSelect from \"./filterSelect\";\r\nimport { PowerView } from \"./powerView/powerView\";\r\nimport \"./powerView/powerView.scss\";\r\nimport { isNullOrUndefined } from \"util\";\r\nimport { PermissionState } from \"../../utils/permissionUtils\";\r\n\r\ninterface ElementTableState {\r\n  items: Array<ElementObjectType>;\r\n  sort_by: Array<ITableSort>;\r\n  filters: Array<IFilter>;\r\n  sorted_cols: Array<string>;\r\n  curr_page: number;\r\n  total_pages: number;\r\n  page_type: PagingTypes;\r\n  fields: Array<string>;\r\n  isEditFormOpen: boolean;\r\n  editFormValues: ElementObjectType;\r\n  openAlert: ElementTableOpenAlert;\r\n  selected_userid?: string;\r\n  isPowerOptionsOpen: boolean;\r\n  assetPower?: AssetObject;\r\n  getDataInProgress: boolean;\r\n  selected: Array<string>;\r\n  selectedAll: boolean;\r\n  editUserFormOpen: boolean;\r\n}\r\n\r\ninterface ElementTableProps {\r\n  isDecommissioned: boolean;\r\n  callback?: Function;\r\n  updateBarcodes?: Function;\r\n  type: ElementType;\r\n  token: string;\r\n  disableSorting?: boolean;\r\n  disableFiltering?: boolean;\r\n  currDatacenter?: DatacenterObject;\r\n  datacenters?: Array<DatacenterObject>;\r\n  permissionState: PermissionState;\r\n  getData?(\r\n    type: string,\r\n    page_num: number,\r\n    page_type: PagingTypes,\r\n    body: SortFilterBody,\r\n    token: string\r\n  ): Promise<Array<ElementObjectType>>;\r\n\r\n  getFieldNames?(type: string, headers: any): Promise<Array<string>>;\r\n  getPages?(\r\n    type: string,\r\n    page_size: PagingTypes,\r\n    filters: Array<IFilter>,\r\n    token: string\r\n  ): Promise<number>;\r\n  data?: Array<ElementObjectType>;\r\n  shouldUpdateData?: boolean;\r\n  isAdmin: boolean;\r\n  updateDatacenters?(): void;\r\n  updateChangePlans(status: boolean): void;\r\n  changePlan: ChangePlan;\r\n}\r\n\r\n// var console: any = {};\r\n// console.log = function() {};\r\nclass ElementTable extends React.Component<\r\n  ElementTableProps & RouteComponentProps,\r\n  ElementTableState\r\n> {\r\n  public state: ElementTableState = {\r\n    page_type: 10,\r\n    filters: [],\r\n    sort_by: [],\r\n    items: [],\r\n    sorted_cols: [],\r\n    curr_page: 1,\r\n    total_pages: 0,\r\n    fields: [],\r\n    isEditFormOpen: false,\r\n    editFormValues: {} as ElementObjectType,\r\n    openAlert: ElementTableOpenAlert.NONE,\r\n    selected_userid: undefined,\r\n    isPowerOptionsOpen: false,\r\n    getDataInProgress: false,\r\n    selected: [],\r\n    selectedAll: false,\r\n    editUserFormOpen: false,\r\n  };\r\n  validRequestMadeWithToken = false;\r\n\r\n  //PAGING LOGIC\r\n  resetPage = () => {\r\n    this.setState({\r\n      curr_page: 1,\r\n    });\r\n  };\r\n  previousPage = () => {\r\n    if (this.state.curr_page > 1 && this.props.getData) {\r\n      const next_page = this.state.curr_page - 1;\r\n      this.setState({\r\n        curr_page: next_page,\r\n      });\r\n      this.updatePageData(this.state.page_type, next_page);\r\n    }\r\n  };\r\n  nextPage = () => {\r\n    if (this.state.curr_page < this.state.total_pages && this.props.getData) {\r\n      const next_page = this.state.curr_page + 1;\r\n      this.setState({\r\n        curr_page: next_page,\r\n      });\r\n      this.updatePageData(this.state.page_type, next_page);\r\n    }\r\n  };\r\n  componentWillReceiveProps(\r\n    nextProps: ElementTableProps & RouteComponentProps\r\n  ) {\r\n    if (nextProps.currDatacenter !== this.props.currDatacenter) {\r\n      this.setState({\r\n        curr_page: 1,\r\n      });\r\n      this.updatePageData(this.state.page_type, 1);\r\n    }\r\n    if (nextProps.token !== this.props.token) {\r\n      this.updateTableData();\r\n    }\r\n\r\n    if (nextProps.data !== this.props.data) {\r\n      this.setFieldNamesFromData(nextProps.data!);\r\n\r\n      if (nextProps.data) {\r\n        this.setState({\r\n          items: nextProps.data,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  handlePagingChange = (page: PagingTypes) => {\r\n    this.setState({\r\n      page_type: page,\r\n      curr_page: 1,\r\n    });\r\n    this.updatePageData(page, 1);\r\n  };\r\n  // FILTERING AND SORTING DISPLAY\r\n\r\n  getScrollIcon = (field: string) => {\r\n    return this.props.disableSorting ? null : (\r\n      <Icon\r\n        className=\"icon\"\r\n        icon={IconNames.DOUBLE_CARET_VERTICAL}\r\n        iconSize={Icon.SIZE_STANDARD}\r\n        onClick={() => this.handleSort(field)}\r\n      />\r\n    );\r\n  };\r\n  renderFilterItem = (item: IFilter) => {\r\n    let display;\r\n    if (item.filter_type === FilterTypes.TEXT) {\r\n      display = renderTextFilterItem(item.filter! as TextFilter);\r\n    } else if (item.filter_type === FilterTypes.NUMERIC) {\r\n      display = renderNumericFilterItem(item.filter! as NumericFilter);\r\n    } else if (item.filter_type === FilterTypes.RACKRANGE) {\r\n      display = renderRackRangeFilterItem(item.filter as RackRangeFields);\r\n    } else if (item.filter_type === FilterTypes.DATETIME) {\r\n      display = renderDatetimeFilterItem(item.filter as DatetimeFilter);\r\n    }\r\n    let field = item.field;\r\n    if (this.props.type === ElementType.ASSET) {\r\n      field = AssetFieldsTable[item.field];\r\n    } else if (this.props.type === ElementType.MODEL) {\r\n      field = ModelFieldsTable[item.field];\r\n    }\r\n    return (\r\n      <div className=\"drag-drop-text\">\r\n        <span>{`${field} ${display}\r\n      `}</span>\r\n\r\n        <span>\r\n          <Icon\r\n            className=\"icon\"\r\n            icon={IconNames.DELETE}\r\n            iconSize={Icon.SIZE_STANDARD}\r\n            onClick={() => this.removeFilterItem(item)}\r\n          />\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderSortItem = (item: ITableSort) => {\r\n    return (\r\n      <div className=\"drag-drop-text \">\r\n        <span>\r\n          <Icon\r\n            className=\"icon\"\r\n            icon={IconNames.DRAG_HANDLE_VERTICAL}\r\n            iconSize={Icon.SIZE_STANDARD}\r\n          />\r\n        </span>\r\n        <span>{`${item.field} by ${\r\n          item.ascending ? \"ascending\" : \"descending\"\r\n        }`}</span>\r\n\r\n        <span>\r\n          <Icon\r\n            className=\"icon\"\r\n            icon={IconNames.DELETE}\r\n            iconSize={Icon.SIZE_STANDARD}\r\n            onClick={() => this.removeSortItem(item.field)}\r\n          />\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // SORTING AND FILTERING LOGIC\r\n  updateSortOrder = (items: Array<ITableSort>) => {\r\n    this.setState({\r\n      sort_by: items,\r\n    });\r\n    this.updateSortData(items);\r\n  };\r\n\r\n  removeSortItem = (field: string) => {\r\n    let sorts = this.state.sort_by;\r\n    let sorted_cols = this.state.sorted_cols;\r\n    const index = sorted_cols.indexOf(field, 0);\r\n    if (index > -1) {\r\n      sorted_cols.splice(index, 1);\r\n    }\r\n    sorts = sorts.filter((item) => {\r\n      return item.field !== field;\r\n    });\r\n    this.setState({\r\n      sort_by: sorts,\r\n      sorted_cols,\r\n    });\r\n    this.updateSortData(sorts);\r\n  };\r\n  removeFilterItem = (filter: IFilter) => {\r\n    const filters = this.state.filters.filter((item) => {\r\n      return JSON.stringify(item) !== JSON.stringify(filter);\r\n    });\r\n    this.setState({\r\n      filters,\r\n    });\r\n    this.updateFilterData(filters);\r\n  };\r\n\r\n  handleSort(field: string) {\r\n    let ascending;\r\n    let sorts = this.state.sort_by;\r\n\r\n    const sorted_cols = this.state.sorted_cols;\r\n    if (this.state.sorted_cols.includes(field)) {\r\n      ascending = !this.state.sort_by.find((item) => item.field === field)!\r\n        .ascending;\r\n      sorts = sorts.filter((item) => {\r\n        return item.field !== field;\r\n      });\r\n      this.setState({\r\n        sort_by: sorts,\r\n      });\r\n    } else {\r\n      ascending = true;\r\n      sorted_cols.push(field);\r\n    }\r\n\r\n    sorts.push({\r\n      field,\r\n      ascending,\r\n      id: field,\r\n    });\r\n    this.setState({\r\n      sort_by: sorts,\r\n      sorted_cols,\r\n    });\r\n    this.updateSortData(sorts);\r\n  }\r\n\r\n  addFilter = (filter: IFilter) => {\r\n    const filters_copy = this.state.filters.slice();\r\n\r\n    if (isRackRangeFields(filter.filter)) {\r\n      if (this.props.currDatacenter && this.props.currDatacenter.id !== \"\") {\r\n        let filter_datacenter = updateObject(filter.filter, {\r\n          datacenter: this.props.currDatacenter!.id,\r\n        });\r\n        filter = updateObject(filter, { filter: filter_datacenter });\r\n      }\r\n    }\r\n    filters_copy.push(filter);\r\n    let resp = this.updateFilterData(filters_copy);\r\n    if (resp) {\r\n      resp\r\n        .then((res) => {\r\n          this.setState({\r\n            filters: filters_copy,\r\n          });\r\n        })\r\n        .catch((err) => {});\r\n    }\r\n  };\r\n\r\n  updateFilterData = (items: Array<IFilter>) => {\r\n    let resp;\r\n    if (this.props.callback! !== undefined) this.props.callback(items);\r\n    this.resetPage();\r\n\r\n    if (this.props.getPages) {\r\n      this.props\r\n        .getPages(\r\n          this.props.type,\r\n          this.state.page_type,\r\n          items,\r\n          this.props.token\r\n        )\r\n        .then((res) => {\r\n          this.setState({\r\n            total_pages: res,\r\n          });\r\n        });\r\n    }\r\n    if (this.props.getData) {\r\n      this.setState({ getDataInProgress: true });\r\n      resp = this.props.getData!(\r\n        this.props.type,\r\n        1,\r\n        this.state.page_type,\r\n        { sort_by: this.state.sort_by, filters: items },\r\n        this.props.token\r\n      );\r\n      resp\r\n        .then((res) => {\r\n          this.setState({ getDataInProgress: false });\r\n          this.setState({\r\n            items: res,\r\n          });\r\n          if (res.length === 0) {\r\n            this.setState({\r\n              curr_page: 0,\r\n            });\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          this.setState({ getDataInProgress: false });\r\n          this.addToast({\r\n            message: err.response.data.failure_message,\r\n            intent: Intent.DANGER,\r\n          });\r\n        });\r\n    }\r\n    return resp;\r\n  };\r\n\r\n  updatePageData = (page: PagingTypes, page_num: number) => {\r\n    if (this.props.getData) {\r\n      this.setState({\r\n        getDataInProgress: true,\r\n      });\r\n      this.props.getData!(\r\n        this.props.type,\r\n        page_num,\r\n        page,\r\n        { sort_by: this.state.sort_by, filters: this.state.filters },\r\n        this.props.token\r\n      )\r\n        .then((res) => {\r\n          this.setState({\r\n            items: res,\r\n            getDataInProgress: false,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          this.addToast({\r\n            message: err.response.data.failure_message,\r\n            intent: Intent.DANGER,\r\n          });\r\n          this.setState({\r\n            getDataInProgress: false,\r\n          });\r\n        });\r\n    }\r\n    if (this.props.getPages) {\r\n      this.props\r\n        .getPages(this.props.type, page, this.state.filters, this.props.token)\r\n        .then((res) => {\r\n          this.setState({\r\n            total_pages: res,\r\n          });\r\n        });\r\n    }\r\n  };\r\n  updateSortData = (items: Array<ITableSort>) => {\r\n    if (this.props.getData) {\r\n      this.setState({\r\n        getDataInProgress: true,\r\n      });\r\n      this.props.getData!(\r\n        this.props.type,\r\n        this.state.curr_page,\r\n        this.state.page_type,\r\n        { sort_by: items, filters: this.state.filters },\r\n        this.props.token\r\n      )\r\n        .then((res) => {\r\n          this.setState({\r\n            items: res,\r\n            getDataInProgress: false,\r\n          });\r\n        })\r\n        .catch(() => {\r\n          this.setState({\r\n            getDataInProgress: false,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  //TOASTS\r\n  private toaster: Toaster = {} as Toaster;\r\n  private addToast = (toast: IToastProps) => {\r\n    toast.timeout = 5000;\r\n    this.toaster.show(toast);\r\n  };\r\n  private addSuccessToast = (message: string) => {\r\n    this.addToast({ message: message, intent: Intent.PRIMARY });\r\n  };\r\n  private addWarnToast = (message: string) => {\r\n    this.addToast({\r\n      message: message,\r\n      intent: Intent.WARNING,\r\n      action: {\r\n        onClick: () => this.setState({ isEditFormOpen: true }),\r\n        text: \"Edit values\",\r\n      },\r\n    });\r\n  };\r\n  private addErrorToast = (message: string) => {\r\n    this.addToast({ message: message, intent: Intent.DANGER });\r\n  };\r\n\r\n  private refHandlers = {\r\n    toaster: (ref: Toaster) => (this.toaster = ref),\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    if (this.props.shouldUpdateData && !this.props.data) {\r\n      this.updateTableData();\r\n    }\r\n    if (this.props.token && !this.validRequestMadeWithToken) {\r\n      this.updateTableData();\r\n      this.validRequestMadeWithToken = true;\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    if (this.props.data) {\r\n      this.setState({\r\n        items: this.props.data,\r\n      });\r\n      this.setFieldNames();\r\n    } else {\r\n      this.updateTableData();\r\n    }\r\n  }\r\n\r\n  updateTableData = () => {\r\n    if (this.props.getData && this.props.token) {\r\n      this.setState({\r\n        getDataInProgress: true,\r\n      });\r\n      this.props\r\n        .getData(\r\n          this.props.type,\r\n          this.state.curr_page,\r\n          this.state.page_type,\r\n          { sort_by: this.state.sort_by, filters: this.state.filters },\r\n          this.props.token\r\n        )\r\n        .then((res) => {\r\n          this.validRequestMadeWithToken = true;\r\n\r\n          this.setState({\r\n            items: res,\r\n            getDataInProgress: false,\r\n          });\r\n          this.setFieldNames();\r\n        })\r\n        .catch((err) => {\r\n          this.setState({\r\n            getDataInProgress: false,\r\n          });\r\n        });\r\n    }\r\n    if (this.props.getPages) {\r\n      this.props\r\n        .getPages(\r\n          this.props.type,\r\n          this.state.page_type,\r\n          this.state.filters,\r\n          this.props.token\r\n        )\r\n        .then((res) => {\r\n          this.setState({\r\n            total_pages: res,\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  setFieldNamesFromData = (items: Array<ElementObjectType>) => {\r\n    let fields: Array<string> = [];\r\n    Object.keys(items[0]).forEach((col: string) => {\r\n      if (col === \"model\") {\r\n        fields.push(\"model__vendor\");\r\n        fields.push(\"model__model_number\");\r\n      } else if (col === \"rack\") {\r\n        fields.push(\"rack\");\r\n        fields.push(\"rack__datacenter__name\");\r\n      } else if (\r\n        col !== \"id\" &&\r\n        col !== \"decommissioned_id\" &&\r\n        col !== \"network_ports\" &&\r\n        col !== \"comment\" &&\r\n        col !== \"power_connections\" &&\r\n        col !== \"mac_addresses\" &&\r\n        col !== \"network_connections\" &&\r\n        col !== \"network_graph\" &&\r\n        col !== \"is_admin\"\r\n      ) {\r\n        fields.push(col);\r\n      }\r\n    });\r\n\r\n    this.setState({\r\n      fields: fields,\r\n    });\r\n  };\r\n  setFieldNames = () => {\r\n    if (this.state.items && this.state.items.length > 0) {\r\n      this.setFieldNamesFromData(this.state.items);\r\n    }\r\n  };\r\n\r\n  //EDIT AND DELETE LOGIC\r\n  handleInlineButtonClick = (data: ElementObjectType) => {\r\n    if (\r\n      isAssetObject(data) ||\r\n      isModelObject(data) ||\r\n      isDatacenterObject(data) ||\r\n      isChangePlanObject(data) ||\r\n      isUserObject(data)\r\n    ) {\r\n      this.setState({\r\n        editFormValues: data,\r\n      });\r\n    }\r\n  };\r\n  //EDIT LOGIC\r\n  handleEditFormClose = () => this.setState({ isEditFormOpen: false });\r\n  getEditForm = () => {\r\n    return (\r\n      <FormPopup\r\n        {...this.props}\r\n        isOpen={this.state.isEditFormOpen}\r\n        initialValues={this.state.editFormValues}\r\n        type={FormTypes.MODIFY}\r\n        elementName={this.props.type}\r\n        handleClose={this.handleEditFormClose}\r\n        submitForm={this.getSubmitFormFunction(FormTypes.MODIFY)}\r\n      />\r\n    );\r\n  };\r\n\r\n  getUserEditForm = () => {\r\n    return (\r\n      <FormPopup\r\n        {...this.props}\r\n        isOpen={this.state.editUserFormOpen}\r\n        userId={this.state.selected_userid}\r\n        initialValues={this.state.editFormValues}\r\n        type={FormTypes.MODIFY}\r\n        elementName={this.props.type}\r\n        handleClose={() => {\r\n          this.setState({ editUserFormOpen: false });\r\n        }}\r\n        submitForm={() => {\r\n          this.setState({ editUserFormOpen: false });\r\n          this.successfulModification(\"User permissions successfully updated\");\r\n        }}\r\n        // submitForm={this.getSubmitFormFunction(FormTypes.MODIFY)}\r\n      />\r\n    );\r\n  };\r\n\r\n  // POWER LOGIC\r\n  getPowerOptions = () => {\r\n    return (\r\n      <Dialog\r\n        className={Classes.DARK + \" power-dialog\"}\r\n        {...this.props}\r\n        isOpen={this.state.isPowerOptionsOpen}\r\n        onClose={() => {\r\n          this.setState({ isPowerOptionsOpen: false });\r\n        }}\r\n      >\r\n        <PowerView\r\n          {...this.props}\r\n          callback={() => {\r\n            this.setState({ isPowerOptionsOpen: false });\r\n          }}\r\n          asset={this.state.assetPower}\r\n          shouldUpdate={false}\r\n          updated={() => {}}\r\n          assetIsDecommissioned={this.props.isDecommissioned}\r\n        />\r\n      </Dialog>\r\n    );\r\n  };\r\n\r\n  successfulModification(message: string) {\r\n    this.updateTableData();\r\n    this.handleEditFormClose();\r\n    this.addSuccessToast(message);\r\n  }\r\n  successfulModifcationWithWarning = (warning: string) => {\r\n    this.updateTableData();\r\n    this.handleEditFormClose();\r\n    this.addWarnToast(warning);\r\n  };\r\n  handleEditFormSubmit = (values: ElementObjectType, headers: any) => {\r\n    if (isModelObject(values)) {\r\n      return modifyModel(values, headers).then((res) => {\r\n        this.successfulModification(res.data.success_message);\r\n      });\r\n    } else if (isAssetObject(values)) {\r\n      return modifyAsset(values, headers, this.props.changePlan).then((res) => {\r\n        if (res.data.warning_message) {\r\n          this.successfulModifcationWithWarning(res.data.warning_message);\r\n        } else {\r\n          this.successfulModification(res.data.success_message);\r\n        }\r\n      });\r\n    } else if (isChangePlanObject(values)) {\r\n      return modifyChangePlan(values, headers).then((res) => {\r\n        this.props.updateChangePlans(true);\r\n        this.successfulModification(res.data.success_message);\r\n      });\r\n    } else if (isDatacenterObject(values)) {\r\n      return modifyDatacenter(values, headers).then((res) => {\r\n        this.successfulModification(res.data.success_message);\r\n        if (this.props.updateDatacenters) {\r\n          this.props.updateDatacenters();\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  handleEditFormOpen = () => {\r\n    this.setState({\r\n      isEditFormOpen: true,\r\n    });\r\n  };\r\n\r\n  getSubmitFormFunction = (type: FormTypes) => {\r\n    let submitForm;\r\n    submitForm = this.handleEditFormSubmit;\r\n    return submitForm;\r\n  };\r\n  handleEditButtonClick = (data: ElementObjectType) => {\r\n    this.handleInlineButtonClick(data);\r\n    this.handleEditFormOpen();\r\n  };\r\n\r\n  //DELETE LOGIC\r\n  private shouldShowColumn = (item: any, col: string) => {\r\n    if (isAssetObject(item)) {\r\n      return AssetFieldsTable[col] && col !== \"comment\";\r\n    }\r\n    return (\r\n      col !== \"id\" &&\r\n      col !== \"network_ports\" &&\r\n      col !== \"comment\" &&\r\n      col !== \"is_admin\" &&\r\n      col !== \"decommissioned_id\" &&\r\n      !isObject(item[col])\r\n    );\r\n  };\r\n  private handleDeleteOpen = () =>\r\n    this.setState({ openAlert: ElementTableOpenAlert.DELETE });\r\n  private handleDeleteCancel = () =>\r\n    this.setState({ openAlert: ElementTableOpenAlert.NONE });\r\n\r\n  private handleDecommissionOpen = () =>\r\n    this.setState({ openAlert: ElementTableOpenAlert.DECOMMISSION });\r\n  private handleDecommissionCancel = () =>\r\n    this.setState({ openAlert: ElementTableOpenAlert.NONE });\r\n\r\n  private handleDelete = () => {\r\n    let resp;\r\n    if (isModelObject(this.state.editFormValues)) {\r\n      resp = deleteModel(\r\n        this.state.editFormValues,\r\n        getHeaders(this.props.token)\r\n      );\r\n    } else if (isAssetObject(this.state.editFormValues)) {\r\n      resp = deleteAsset(\r\n        this.state.editFormValues,\r\n        getHeaders(this.props.token)\r\n      );\r\n    } else if (isDatacenterObject(this.state.editFormValues)) {\r\n      resp = deleteDatacenter(\r\n        this.state.editFormValues,\r\n        getHeaders(this.props.token)\r\n      );\r\n    } else if (isUserObject(this.state.editFormValues)) {\r\n      resp = deleteUser(\r\n        this.state.editFormValues,\r\n        getHeaders(this.props.token)\r\n      );\r\n    } else if (isChangePlanObject(this.state.editFormValues)) {\r\n      resp = deleteChangePlan(\r\n        this.state.editFormValues,\r\n        getHeaders(this.props.token)\r\n      );\r\n    }\r\n    if (resp) {\r\n      resp\r\n        .then((res) => {\r\n          this.addSuccessToast(res.data.success_message);\r\n          this.updateTableData();\r\n          this.handleDeleteCancel();\r\n          if (this.props.updateDatacenters) {\r\n            this.props.updateDatacenters();\r\n          }\r\n          if (this.props.type === ElementType.CHANGEPLANS) {\r\n            this.props.updateChangePlans(true);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          this.addErrorToast(err.response.data.failure_message);\r\n          this.handleDeleteCancel();\r\n        });\r\n    }\r\n  };\r\n\r\n  private handleDecommission = () => {\r\n    let resp;\r\n    if (isAssetObject(this.state.editFormValues)) {\r\n      resp = decommissionAsset(\r\n        this.state.editFormValues,\r\n        getHeaders(this.props.token),\r\n        this.props.changePlan\r\n      );\r\n    }\r\n    if (resp) {\r\n      resp\r\n        .then((res) => {\r\n          this.addSuccessToast(res.data.success_message);\r\n          this.updateTableData();\r\n          this.handleDecommissionCancel();\r\n          if (this.props.updateDatacenters) {\r\n            this.props.updateDatacenters();\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          this.addErrorToast(err.response.data.failure_message);\r\n          this.handleDecommissionCancel();\r\n        });\r\n    }\r\n  };\r\n\r\n  handleDeleteButtonClick = (data: ElementObjectType) => {\r\n    this.handleInlineButtonClick(data);\r\n    this.handleDeleteOpen();\r\n  };\r\n\r\n  handleDecommissionButtonClick = (data: ElementObjectType) => {\r\n    this.handleInlineButtonClick(data);\r\n    this.handleDecommissionOpen();\r\n  };\r\n\r\n  handlePowerButtonClick = (data: AssetObject) => {\r\n    this.setState({\r\n      isPowerOptionsOpen: true,\r\n      assetPower: data,\r\n    });\r\n  };\r\n\r\n  renderPermissionsButton = (item: UserInfoObject) => {\r\n    return (\r\n      <AnchorButton\r\n        className=\"button-table permissions-button\"\r\n        intent=\"primary\"\r\n        icon=\"edit\"\r\n        minimal\r\n        text=\"Edit Permissions\"\r\n        onClick={() => {\r\n          this.setState({\r\n            editUserFormOpen: true,\r\n            selected_userid: item.id,\r\n            isEditFormOpen: false,\r\n          });\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  routeToDetailView(item: ElementObjectType) {\r\n    if (isAssetCPObject(item) && item.related_asset) {\r\n      this.props.history.push(\r\n        ROUTES.DASHBOARD + \"/\" + this.props.type + \"/\" + item.related_asset.id\r\n      );\r\n    } else {\r\n      this.props.history.push(\r\n        ROUTES.DASHBOARD + \"/\" + this.props.type + \"/\" + item.id\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (\r\n      this.props.data &&\r\n      this.props.data.length !== 0 &&\r\n      this.state.items.length === 0\r\n    ) {\r\n      this.setState({\r\n        items: this.props.data,\r\n      });\r\n\r\n      this.setFieldNamesFromData(this.props.data);\r\n    }\r\n\r\n    return (\r\n      <div className=\"tab-panel\">\r\n        {this.getEditForm()}\r\n        {this.getUserEditForm()}\r\n        {this.getPowerOptions()}\r\n        <Alert\r\n          cancelButtonText=\"Cancel\"\r\n          confirmButtonText=\"Delete\"\r\n          intent=\"danger\"\r\n          isOpen={this.state.openAlert === ElementTableOpenAlert.DELETE}\r\n          onCancel={this.handleDeleteCancel}\r\n          onConfirm={this.handleDelete}\r\n        >\r\n          <p>Are you sure you want to delete?</p>\r\n        </Alert>\r\n        <Alert\r\n          cancelButtonText=\"Cancel\"\r\n          confirmButtonText=\"Decommission\"\r\n          intent=\"danger\"\r\n          isOpen={this.state.openAlert === ElementTableOpenAlert.DECOMMISSION}\r\n          onCancel={this.handleDecommissionCancel}\r\n          onConfirm={this.handleDecommission}\r\n        >\r\n          <p>Are you sure you want to decommission?</p>\r\n        </Alert>\r\n        <Toaster\r\n          autoFocus={false}\r\n          canEscapeKeyClear={true}\r\n          position={Position.TOP}\r\n          ref={this.refHandlers.toaster}\r\n        />\r\n\r\n        <div className=\"filter-sort-panel\">\r\n          {this.props.disableFiltering\r\n            ? null\r\n            : [\r\n                <div className=\"filter-select\">\r\n                  <FilterSelect\r\n                    handleAddFilter={this.addFilter}\r\n                    fields={this.state.fields}\r\n                  />\r\n                </div>,\r\n                <div className=\"table-options\">\r\n                  <DragDropList\r\n                    type={DragDropListTypes.FILTER}\r\n                    items={this.state.filters}\r\n                    renderItem={this.renderFilterItem}\r\n                  />\r\n                </div>,\r\n              ]}\r\n          {this.props.disableSorting ? null : (\r\n            <div className=\"table-options\">\r\n              <DragDropList\r\n                type={DragDropListTypes.SORT}\r\n                items={this.state.sort_by}\r\n                renderItem={this.renderSortItem}\r\n                onChange={this.updateSortOrder}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          {this.props.getPages ? (\r\n            <div className=\"table-control\">\r\n              <HTMLSelect\r\n                onChange={(e: any) => this.handlePagingChange(e.target.value)}\r\n              >\r\n                {\" \"}\r\n                <option> {PagingTypes.TEN}</option>\r\n                <option>{PagingTypes.FIFTY}</option>\r\n                <option>{PagingTypes.ALL}</option>\r\n              </HTMLSelect>\r\n              {this.state.page_type !== PagingTypes.ALL\r\n                ? [\r\n                    <span>\r\n                      <Icon\r\n                        className=\"icon\"\r\n                        icon={IconNames.CARET_LEFT}\r\n                        iconSize={Icon.SIZE_LARGE}\r\n                        onClick={() => this.previousPage()}\r\n                      />\r\n                    </span>,\r\n                    <span>\r\n                      page {this.state.curr_page} of {this.state.total_pages}\r\n                    </span>,\r\n                    <span>\r\n                      <Icon\r\n                        className=\"icon\"\r\n                        icon={IconNames.CARET_RIGHT}\r\n                        iconSize={Icon.SIZE_LARGE}\r\n                        onClick={() => this.nextPage()}\r\n                      />\r\n                    </span>,\r\n                  ]\r\n                : null}\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        <div className=\"table-wrapper\">\r\n          <table\r\n            className={\r\n              this.props.type !== ElementType.DATACENTER &&\r\n              this.props.type !== ElementType.USER\r\n                ? \"bp3-html-table bp3-interactive bp3-html-table-striped bp3-html-table-bordered element-table\"\r\n                : \"bp3-html-table bp3-html-table-striped bp3-html-table-bordered element-table\"\r\n            }\r\n          >\r\n            <thead>\r\n              <tr>\r\n                {this.props.type === ElementType.ASSET &&\r\n                this.state.fields &&\r\n                (isNullOrUndefined(this.props.data) ||\r\n                  this.props.data.length === 0) &&\r\n                this.state.fields.length > 0 ? (\r\n                  <th className=\"header-cell\">\r\n                    <div className=\"header-text\">\r\n                      {this.props.isDecommissioned ? null : (\r\n                        <Checkbox\r\n                          checked={this.state.selectedAll}\r\n                          onClick={(event: any) => {\r\n                            const selected = this.state.selected;\r\n                            const selectedAll = !this.state.selectedAll;\r\n                            this.state.items.forEach((item) => {\r\n                              if (isAssetObject(item)) {\r\n                                if (\r\n                                  selected.includes(item.asset_number) &&\r\n                                  !selectedAll\r\n                                ) {\r\n                                  selected.splice(\r\n                                    selected.indexOf(item.asset_number),\r\n                                    1\r\n                                  );\r\n                                } else if (\r\n                                  !selected.includes(item.asset_number) &&\r\n                                  selectedAll\r\n                                ) {\r\n                                  selected.push(item.asset_number);\r\n                                }\r\n                              }\r\n                            });\r\n\r\n                            this.setState({\r\n                              selectedAll,\r\n                              selected,\r\n                            });\r\n                            if (this.props.updateBarcodes) {\r\n                              this.props.updateBarcodes(this.state.selected);\r\n                            }\r\n                          }}\r\n                        />\r\n                      )}\r\n                    </div>\r\n                  </th>\r\n                ) : null}\r\n                {this.state.fields.map((col: string) => {\r\n                  if (col === \"model\") {\r\n                    return [\r\n                      <th className=\"header-cell\">\r\n                        <div className=\"header-text\">\r\n                          <span>model vendor</span>\r\n                          {this.getScrollIcon(\"model__vendor\")}\r\n                        </div>\r\n                      </th>,\r\n                      <th className=\"header-cell\">\r\n                        <div className=\"header-text\">\r\n                          <span>model number</span>\r\n                          {this.getScrollIcon(\"model__model_number\")}\r\n                        </div>\r\n                      </th>,\r\n                    ];\r\n                  } else if (this.props.type === ElementType.ASSET) {\r\n                    return (\r\n                      <th className=\"header-cell\">\r\n                        <div className=\"header-text\">\r\n                          <span>{AssetFieldsTable[col]}</span>\r\n                          {this.getScrollIcon(col)}\r\n                        </div>\r\n                      </th>\r\n                    );\r\n                  } else if (this.props.type === ElementType.MODEL) {\r\n                    return (\r\n                      <th className=\"header-cell\">\r\n                        <div className=\"header-text\">\r\n                          <span>{ModelFieldsTable[col]}</span>\r\n                          {this.getScrollIcon(col)}\r\n                        </div>\r\n                      </th>\r\n                    );\r\n                  } else {\r\n                    return (\r\n                      <th className=\"header-cell\">\r\n                        <div className=\"header-text\">\r\n                          <span>{col}</span>\r\n                          {this.getScrollIcon(col)}\r\n                        </div>\r\n                      </th>\r\n                    );\r\n                  }\r\n                })}\r\n                <th></th>\r\n              </tr>\r\n            </thead>\r\n\r\n            {\r\n              this.state.items && this.state.items.length > 0 ? (\r\n                !this.state.getDataInProgress ? (\r\n                  <tbody>\r\n                    {this.state.items.map((item: ElementObjectType) => {\r\n                      return (\r\n                        <tr\r\n                          key={item.id}\r\n                          onClick={\r\n                            this.props.type === ElementType.DATACENTER ||\r\n                            this.props.type === ElementType.USER\r\n                              ? () => {}\r\n                              : () => {\r\n                                  this.routeToDetailView(item);\r\n                                }\r\n                          }\r\n                          style={getChangePlanRowStyle(item)}\r\n                        >\r\n                          {this.props.type === ElementType.ASSET &&\r\n                          isAssetObject(item) &&\r\n                          (isNullOrUndefined(this.props.data) ||\r\n                            this.props.data.length === 0) ? (\r\n                            <th\r\n                              onClick={(event: any) => {\r\n                                event.stopPropagation();\r\n                              }}\r\n                            >\r\n                              {this.props.isDecommissioned ? null : (\r\n                                <Checkbox\r\n                                  checked={this.state.selected.includes(\r\n                                    item.asset_number\r\n                                  )}\r\n                                  onClick={(event: any) => {\r\n                                    const selected = this.state.selected;\r\n                                    if (selected.includes(item.asset_number)) {\r\n                                      if (this.state.selectedAll) {\r\n                                        this.setState({\r\n                                          selectedAll: false,\r\n                                        });\r\n                                      }\r\n                                      selected.splice(\r\n                                        selected.indexOf(item.asset_number),\r\n                                        1\r\n                                      );\r\n                                    } else {\r\n                                      selected.push(item.asset_number);\r\n                                    }\r\n                                    this.setState({\r\n                                      selected,\r\n                                    });\r\n                                    if (this.props.updateBarcodes) {\r\n                                      this.props.updateBarcodes(\r\n                                        this.state.selected\r\n                                      );\r\n                                    }\r\n\r\n                                    event.stopPropagation();\r\n                                  }}\r\n                                />\r\n                              )}\r\n                            </th>\r\n                          ) : null}\r\n                          {Object.entries(item).map(([col, value]) => {\r\n                            if (isModelObject(value)) {\r\n                              return [\r\n                                <td style={getChangePlanRowStyle(item)}>\r\n                                  {value.vendor}\r\n                                </td>,\r\n                                <td style={getChangePlanRowStyle(item)}>\r\n                                  {value.model_number}\r\n                                </td>,\r\n                              ];\r\n                            } else if (isRackObject(value)) {\r\n                              return [\r\n                                <td style={getChangePlanRowStyle(item)}>\r\n                                  {value.row_letter + value.rack_num}\r\n                                </td>,\r\n                                <td style={getChangePlanRowStyle(item)}>\r\n                                  {value.datacenter.name}\r\n                                </td>,\r\n                              ];\r\n                            } else if (col === \"display_color\") {\r\n                              return (\r\n                                <td\r\n                                  style={{\r\n                                    backgroundColor: value,\r\n                                  }}\r\n                                ></td>\r\n                              );\r\n                            } else if (this.shouldShowColumn(item, col)) {\r\n                              return (\r\n                                <td style={getChangePlanRowStyle(item)}>\r\n                                  {value}\r\n                                </td>\r\n                              );\r\n                            }\r\n\r\n                            return null;\r\n                          })}\r\n                          <td\r\n                            onClick={(event: any) => {\r\n                              event.stopPropagation();\r\n                            }}\r\n                          >\r\n                            {this.props.permissionState.admin &&\r\n                            isUserObject(item) ? (\r\n                              <div className=\"inline-buttons-user grant-admin-button permissions-button\">\r\n                                {\" \"}\r\n                                {/* TODO change grant-admin-button to change-permissions*/}\r\n                                {this.renderPermissionsButton(item)}\r\n                              </div>\r\n                            ) : null}\r\n                            <div className=\"inline-buttons\">\r\n                              {this.props.type !== ElementType.USER &&\r\n                              !this.props.data &&\r\n                              !this.props.isDecommissioned ? (\r\n                                <AnchorButton\r\n                                  className=\"button-table\"\r\n                                  intent=\"primary\"\r\n                                  minimal\r\n                                  icon=\"edit\"\r\n                                  disabled={\r\n                                    (this.props.changePlan &&\r\n                                      this.props.type !== ElementType.ASSET) ||\r\n                                    (this.props.type ===\r\n                                      ElementType.CHANGEPLANS &&\r\n                                      isChangePlanObject(item) &&\r\n                                      item.execution_time)\r\n                                      ? true\r\n                                      : !(\r\n                                          this.props.permissionState.admin ||\r\n                                          (this.props.type ===\r\n                                            ElementType.DATACENTER &&\r\n                                            this.props.permissionState\r\n                                              .asset_management) ||\r\n                                          (this.props.type ===\r\n                                            ElementType.MODEL &&\r\n                                            this.props.permissionState\r\n                                              .model_management) ||\r\n                                          (this.props.type ===\r\n                                            ElementType.ASSET &&\r\n                                            this.props.permissionState\r\n                                              .asset_management) ||\r\n                                          (this.props.type ===\r\n                                            ElementType.ASSET &&\r\n                                            isAssetObject(item) &&\r\n                                            this.props.permissionState.datacenter_permissions.includes(\r\n                                              +item.rack.datacenter.id\r\n                                            ))\r\n                                        )\r\n                                  }\r\n                                  onClick={(event: any) => {\r\n                                    this.handleEditButtonClick(item);\r\n                                    event.stopPropagation();\r\n                                  }}\r\n                                />\r\n                              ) : null}\r\n                              {!this.props.data &&\r\n                              !this.props.isDecommissioned ? (\r\n                                <AnchorButton\r\n                                  className=\"button-table\"\r\n                                  intent=\"danger\"\r\n                                  minimal\r\n                                  icon={\r\n                                    this.props.type === ElementType.ASSET\r\n                                      ? \"remove\"\r\n                                      : \"trash\"\r\n                                  }\r\n                                  disabled={\r\n                                    (this.props.changePlan &&\r\n                                      this.props.type !== ElementType.ASSET) ||\r\n                                    (this.props.type ===\r\n                                      ElementType.CHANGEPLANS &&\r\n                                      isChangePlanObject(item) &&\r\n                                      item.execution_time)\r\n                                      ? true\r\n                                      : !(\r\n                                          this.props.permissionState.admin ||\r\n                                          (this.props.type ===\r\n                                            ElementType.DATACENTER &&\r\n                                            this.props.permissionState\r\n                                              .asset_management) ||\r\n                                          (this.props.type ===\r\n                                            ElementType.MODEL &&\r\n                                            this.props.permissionState\r\n                                              .model_management) ||\r\n                                          (this.props.type ===\r\n                                            ElementType.ASSET &&\r\n                                            this.props.permissionState\r\n                                              .asset_management) ||\r\n                                          (this.props.type ===\r\n                                            ElementType.ASSET &&\r\n                                            isAssetObject(item) &&\r\n                                            this.props.permissionState.datacenter_permissions.includes(\r\n                                              +item.rack.datacenter.id\r\n                                            ))\r\n                                        )\r\n                                  }\r\n                                  onClick={\r\n                                    this.props.type === ElementType.ASSET\r\n                                      ? (event: any) => {\r\n                                          this.handleDecommissionButtonClick(\r\n                                            item\r\n                                          );\r\n                                          event.stopPropagation();\r\n                                        }\r\n                                      : (event: any) => {\r\n                                          this.handleDeleteButtonClick(item);\r\n                                          event.stopPropagation();\r\n                                        }\r\n                                  }\r\n                                />\r\n                              ) : null}\r\n                              {isAssetObject(item) &&\r\n                              item.rack.is_network_controlled &&\r\n                              !this.props.isDecommissioned ? (\r\n                                <AnchorButton\r\n                                  className=\"button-table\"\r\n                                  intent=\"warning\"\r\n                                  minimal\r\n                                  icon=\"offline\"\r\n                                  disabled={\r\n                                    this.props.changePlan ? true : false\r\n                                  }\r\n                                  onClick={(event: any) => {\r\n                                    this.handlePowerButtonClick(item);\r\n                                    event.stopPropagation();\r\n                                  }}\r\n                                />\r\n                              ) : null}\r\n                            </div>{\" \"}\r\n                            {/* TODO add logic for determining if isOwner for power button */}\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                ) : null\r\n              ) : null\r\n              // <Spinner\r\n              //   className=\"table-spinner\"\r\n              //   size={Spinner.SIZE_STANDARD}\r\n              // />\r\n              // <h4 className=\"no-data-text\">no {this.props.type} found </h4>\r\n            }\r\n          </table>\r\n\r\n          {this.state.getDataInProgress ? (\r\n            <Spinner className=\"table-spinner\" size={Spinner.SIZE_STANDARD} />\r\n          ) : null}\r\n          {(!this.state.items || this.state.items.length === 0) &&\r\n          !this.state.getDataInProgress ? (\r\n            <Callout\r\n              icon={IconNames.ERROR}\r\n              title={\"No \" + this.props.type}\r\n            ></Callout>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n    isAdmin: state.admin,\r\n    changePlan: state.changePlan,\r\n    permissionState: state.permissionState,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    updateChangePlans: (status: boolean) =>\r\n      dispatch(actions.updateChangePlans(status)),\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(ElementTable));\r\n","import { ElementType } from \"./utils\";\r\n\r\nexport interface PermissionState {\r\n  model_management: boolean;\r\n  asset_management: boolean;\r\n  power_control: boolean;\r\n  audit_read: boolean;\r\n  admin: boolean;\r\n  datacenter_permissions: Array<number>;\r\n}\r\n\r\nexport function hasAddElementPermission(\r\n  elementType: ElementType,\r\n  permissions: PermissionState\r\n) {\r\n  return (\r\n    permissions.admin ||\r\n    (elementType === ElementType.DATACENTER && permissions.asset_management) ||\r\n    (elementType === ElementType.MODEL && permissions.model_management) ||\r\n    (elementType === ElementType.ASSET &&\r\n      (permissions.asset_management ||\r\n        permissions.datacenter_permissions.length > 0)) ||\r\n    elementType === ElementType.CHANGEPLANS\r\n  );\r\n}\r\n","import {\r\n  Alert,\r\n  AnchorButton,\r\n  Button,\r\n  Callout,\r\n  Classes,\r\n  FormGroup,\r\n  InputGroup,\r\n  Intent,\r\n  IToastProps,\r\n  MenuItem,\r\n  Position,\r\n  Toaster,\r\n} from \"@blueprintjs/core\";\r\nimport * as actions from \"../../store/actions/state\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport axios from \"axios\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport FormPopup from \"../../forms/formPopup\";\r\nimport {\r\n  DatacenterSelect,\r\n  filterDatacenter,\r\n  FormTypes,\r\n  renderDatacenterItem,\r\n} from \"../../forms/formUtils\";\r\nimport { updateObject } from \"../../store/utility\";\r\nimport { API_ROOT } from \"../../utils/api-config\";\r\nimport {\r\n  CreateUserObject,\r\n  DatacenterObject,\r\n  ElementObjectType,\r\n  ElementType,\r\n  ModelObject,\r\n  ShallowAssetObject,\r\n  SortFilterBody,\r\n  ChangePlan,\r\n  ROUTES,\r\n} from \"../../utils/utils\";\r\nimport { ALL_DATACENTERS } from \"./elementTabContainer\";\r\nimport ElementTable from \"./elementTable\";\r\nimport {\r\n  FilterTypes,\r\n  IFilter,\r\n  PagingTypes,\r\n  TextFilterTypes,\r\n} from \"./elementUtils\";\r\nimport \"./elementView.scss\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  hasAddElementPermission,\r\n  PermissionState,\r\n} from \"../../utils/permissionUtils\";\r\n\r\n// var console: any = {};\r\n// console.log = function() {};\r\nconst fs = require(\"js-file-download\");\r\n\r\ninterface ElementViewState {\r\n  isOpen: boolean;\r\n  filters: Array<any>;\r\n  fileNameIsOpen: boolean;\r\n  fileName: string;\r\n  networkFileName: string;\r\n  updateTable: boolean;\r\n  barcodes: Array<String>;\r\n  isDecommissioned: boolean;\r\n}\r\ninterface ElementViewProps {\r\n  element: ElementType;\r\n  isAdmin: boolean;\r\n  token: string;\r\n  datacenters?: Array<DatacenterObject>;\r\n  currDatacenter?: DatacenterObject;\r\n  onDatacenterSelect?(datacenter: DatacenterObject): void;\r\n  updateDatacenters?(): void;\r\n  updateChangePlans(status: boolean): void;\r\n  isActive?: boolean;\r\n  changePlan: ChangePlan;\r\n  permissionState: PermissionState;\r\n}\r\n\r\ntype ElementTabProps = ElementViewProps & RouteComponentProps;\r\nclass ElementTab extends React.Component<ElementTabProps, ElementViewState> {\r\n  public state: ElementViewState = {\r\n    isOpen: false,\r\n    filters: [],\r\n    fileNameIsOpen: false,\r\n    fileName: \"\",\r\n    networkFileName: \"\",\r\n    updateTable: false,\r\n    barcodes: [],\r\n    isDecommissioned: false,\r\n  };\r\n\r\n  getExportData = (\r\n    path: string,\r\n    filters: Array<any>,\r\n    token: string,\r\n    file: string,\r\n    networkFile: string\r\n  ) => {\r\n    const config = {\r\n      headers: {\r\n        Authorization: \"Token \" + token,\r\n      },\r\n    };\r\n    let filtersCopy = filters.slice();\r\n    if (path === \"assets\") {\r\n      let datacenterName;\r\n      if (this.props.currDatacenter) {\r\n        if (this.props.currDatacenter.name !== ALL_DATACENTERS.name) {\r\n          datacenterName = this.props.currDatacenter.name;\r\n          filtersCopy.push({\r\n            id: \"\",\r\n            field: \"rack__datacenter__name\",\r\n            filter_type: FilterTypes.TEXT,\r\n            filter: {\r\n              value: datacenterName,\r\n              match_type: TextFilterTypes.EXACT,\r\n            },\r\n          });\r\n        }\r\n      }\r\n    }\r\n    const body = {\r\n      sort_by: [],\r\n      filters: filtersCopy,\r\n    };\r\n\r\n    axios\r\n      .post(API_ROOT + \"api/\" + path + \"/bulk-export\", body, config)\r\n      .then((res) => {\r\n        fs(res.data.export_csv, file);\r\n        return 0;\r\n      })\r\n      .catch((err) => this.addErrorToast(\"Failed to export data to \" + file));\r\n\r\n    if (path === \"assets\") {\r\n      axios\r\n        .post(API_ROOT + \"api/\" + path + \"/network-bulk-export\", body, config)\r\n        .then((res) => {\r\n          fs(res.data.export_csv, networkFile);\r\n          return 0;\r\n        })\r\n        .catch((err) => this.addErrorToast(\"Failed to export data to \" + file));\r\n    }\r\n  };\r\n  getPages = (\r\n    path: string,\r\n    page_size: number,\r\n    filters: Array<IFilter>,\r\n    token: string\r\n  ) => {\r\n    const params: any = { page_size };\r\n    if (this.props.changePlan) {\r\n      params[\"change_plan\"] = this.props.changePlan.id;\r\n    }\r\n    const config = {\r\n      headers: {\r\n        Authorization: \"Token \" + token,\r\n      },\r\n\r\n      params: params,\r\n    };\r\n    const filtersCopy = filters.slice();\r\n    let datacenterName;\r\n    if (this.props.currDatacenter) {\r\n      if (this.props.currDatacenter.name !== ALL_DATACENTERS.name) {\r\n        datacenterName = this.props.currDatacenter.name;\r\n        filtersCopy.push({\r\n          id: \"\",\r\n          field: \"rack__datacenter__name\",\r\n          filter_type: FilterTypes.TEXT,\r\n          filter: { value: datacenterName, match_type: TextFilterTypes.EXACT },\r\n        });\r\n      }\r\n    }\r\n    let url = this.state.isDecommissioned\r\n      ? \"api/assets/pages-decommissioned\"\r\n      : \"api/\" + path + \"/pages\";\r\n    return axios\r\n      .post(API_ROOT + url, { filters: filtersCopy }, config)\r\n      .then((res) => {\r\n        return res.data.page_count;\r\n      });\r\n  };\r\n  getElementData = (\r\n    path: string,\r\n    page: number,\r\n    page_type: PagingTypes,\r\n    body: SortFilterBody,\r\n    token: string\r\n  ): Promise<Array<ElementObjectType>> => {\r\n    this.handleDataUpdate(false);\r\n\r\n    const params: any =\r\n      page_type === PagingTypes.ALL\r\n        ? {}\r\n        : {\r\n            page_size: page_type,\r\n            page,\r\n          };\r\n    if (this.props.changePlan) {\r\n      params[\"change_plan\"] = this.props.changePlan.id;\r\n    }\r\n    const config = {\r\n      headers: {\r\n        Authorization: \"Token \" + token,\r\n      },\r\n\r\n      params: params,\r\n    };\r\n    let bodyCopy = JSON.parse(JSON.stringify(body));\r\n    const { filters } = bodyCopy;\r\n    let datacenterName;\r\n    if (this.props.currDatacenter) {\r\n      if (this.props.currDatacenter.name !== ALL_DATACENTERS.name) {\r\n        datacenterName = this.props.currDatacenter.name;\r\n        filters.push({\r\n          id: \"\",\r\n          field: \"rack__datacenter__name\",\r\n          filter_type: FilterTypes.TEXT,\r\n          filter: { value: datacenterName, match_type: TextFilterTypes.EXACT },\r\n        });\r\n        bodyCopy = updateObject(bodyCopy, { filters });\r\n      }\r\n    }\r\n    let url = this.state.isDecommissioned\r\n      ? API_ROOT + \"api/assets/get-many-decommissioned\"\r\n      : API_ROOT + \"api/\" + path + \"/get-many\";\r\n\r\n    return axios.post(url, bodyCopy, config).then((res) => {\r\n      const items = res.data[path];\r\n\r\n      return items;\r\n    });\r\n  };\r\n\r\n  public handleDataUpdate = (status: boolean) => {\r\n    this.setState({\r\n      updateTable: status,\r\n    });\r\n  };\r\n  private handleOpen = () => {\r\n    this.setState({\r\n      isOpen: true,\r\n    });\r\n  };\r\n  private handleClose = () => this.setState({ isOpen: false });\r\n\r\n  private createModel = (model: ModelObject, headers: any): Promise<any> => {\r\n    return axios\r\n      .post(API_ROOT + \"api/models/add\", model, headers)\r\n      .then((res) => {\r\n        this.handleDataUpdate(true);\r\n        this.handleClose();\r\n        this.addSuccessToast(res.data.success_message);\r\n      });\r\n  };\r\n\r\n  private createAsset = (\r\n    asset: ShallowAssetObject,\r\n    headers: any\r\n  ): Promise<any> => {\r\n    let config;\r\n    if (!this.props.changePlan) {\r\n      config = headers;\r\n    } else {\r\n      config = {\r\n        headers: headers[\"headers\"],\r\n        params: {\r\n          change_plan: this.props.changePlan.id,\r\n        },\r\n      };\r\n    }\r\n\r\n    return axios\r\n      .post(API_ROOT + \"api/assets/add\", asset, config)\r\n      .then((res) => {\r\n        this.handleDataUpdate(true);\r\n        this.handleClose();\r\n        if (res.data.warning_message) {\r\n          this.addWarnToast(\"Created asset. \" + res.data.warning_message);\r\n        } else {\r\n          this.addSuccessToast(res.data.success_message);\r\n        }\r\n      });\r\n  };\r\n  private addWarnToast = (message: string) => {\r\n    this.addToast({\r\n      message: message,\r\n      intent: Intent.WARNING,\r\n    });\r\n  };\r\n  componentWillReceiveProps(nextProps: ElementTabProps & RouteComponentProps) {\r\n    if (nextProps.changePlan !== this.props.changePlan) {\r\n      this.handleDataUpdate(true);\r\n    }\r\n  }\r\n\r\n  private createDatacenter = (\r\n    dc: DatacenterObject,\r\n    headers: any\r\n  ): Promise<any> => {\r\n    return axios\r\n      .post(API_ROOT + \"api/datacenters/add\", dc, headers)\r\n      .then((res) => {\r\n        this.handleDataUpdate(true);\r\n        this.handleClose();\r\n        this.addSuccessToast(res.data.success_message);\r\n        if (this.props.updateDatacenters) {\r\n          this.props.updateDatacenters();\r\n        }\r\n      });\r\n  };\r\n\r\n  private createUser = (user: CreateUserObject, headers: any): Promise<any> => {\r\n    return axios.post(API_ROOT + \"api/users/add\", user, headers).then((res) => {\r\n      this.handleDataUpdate(true);\r\n      this.handleClose();\r\n      this.addSuccessToast(res.data.success_message);\r\n    });\r\n  };\r\n\r\n  private createChangePlan = (\r\n    changePlan: ChangePlan,\r\n    headers: any\r\n  ): Promise<any> => {\r\n    return axios\r\n      .post(API_ROOT + \"api/change-plans/add\", changePlan, headers)\r\n      .then((res) => {\r\n        this.props.updateChangePlans(true);\r\n\r\n        this.handleDataUpdate(true);\r\n        this.handleClose();\r\n\r\n        this.addSuccessToast(res.data.success_message);\r\n      });\r\n  };\r\n  private toaster: Toaster = {} as Toaster;\r\n  private addSuccessToast(message: string) {\r\n    this.addToast({ message: message, intent: Intent.PRIMARY });\r\n  }\r\n  private addErrorToast(message: string) {\r\n    this.addToast({ message: message, intent: Intent.DANGER });\r\n  }\r\n  private addToast(toast: IToastProps) {\r\n    toast.timeout = 5000;\r\n    this.toaster.show(toast);\r\n  }\r\n\r\n  private refHandlers = {\r\n    toaster: (ref: Toaster) => (this.toaster = ref),\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"element-tab\">\r\n        <Toaster\r\n          autoFocus={false}\r\n          canEscapeKeyClear={true}\r\n          position={Position.TOP}\r\n          ref={this.refHandlers.toaster}\r\n        />\r\n        <div>\r\n          {this.props.datacenters && this.props.onDatacenterSelect ? (\r\n            <Callout>\r\n              <FormGroup label=\"Datacenter\" inline={true}>\r\n                <DatacenterSelect\r\n                  popoverProps={{\r\n                    minimal: true,\r\n                    popoverClassName: \"dropdown\",\r\n                    usePortal: true,\r\n                  }}\r\n                  items={this.props.datacenters!}\r\n                  onItemSelect={(datacenter: DatacenterObject) => {\r\n                    this.props.onDatacenterSelect!(datacenter);\r\n                  }}\r\n                  itemRenderer={renderDatacenterItem}\r\n                  itemPredicate={filterDatacenter}\r\n                  noResults={<MenuItem disabled={true} text=\"No results.\" />}\r\n                >\r\n                  <Button\r\n                    rightIcon=\"caret-down\"\r\n                    text={\r\n                      this.props.currDatacenter &&\r\n                      this.props.currDatacenter.name\r\n                        ? this.props.currDatacenter.name\r\n                        : \"All datacenters\"\r\n                    }\r\n                  />\r\n                </DatacenterSelect>\r\n              </FormGroup>\r\n            </Callout>\r\n          ) : null}\r\n        </div>\r\n        {this.state.isDecommissioned ? (\r\n          <Callout icon=\"warning-sign\">\r\n            <FormGroup label=\"Showing decommissioned assets\" inline={true}>\r\n              <Button\r\n                onClick={() => {\r\n                  /* handle data based on state */\r\n                  this.setState({ isDecommissioned: false });\r\n                  this.handleDataUpdate(true);\r\n                }}\r\n              >\r\n                View Live Assets\r\n              </Button>\r\n            </FormGroup>\r\n          </Callout>\r\n        ) : (\r\n          <div className=\"element-tab-buttons\">\r\n            {this.props.element !== ElementType.USER &&\r\n            this.props.element !== ElementType.DATACENTER &&\r\n            this.props.element !== ElementType.CHANGEPLANS ? (\r\n              <AnchorButton\r\n                className=\"add\"\r\n                text=\"Export Table Data\"\r\n                disabled={this.props.changePlan ? true : false}\r\n                icon=\"import\"\r\n                minimal\r\n                onClick={() => {\r\n                  /* handle data based on state */\r\n                  this.setState({ fileNameIsOpen: true });\r\n                }}\r\n              />\r\n            ) : (\r\n              <p></p>\r\n            )}\r\n            {this.props.element === ElementType.ASSET ||\r\n            this.props.element === ElementType.MODEL ? (\r\n              <AnchorButton\r\n                disabled={\r\n                  this.props.changePlan\r\n                    ? true\r\n                    : !hasAddElementPermission(\r\n                        this.props.element,\r\n                        this.props.permissionState\r\n                      )\r\n                }\r\n                onClick={() => {\r\n                  this.props.history.push(\r\n                    \"/dashboard/bulk-upload/\" +\r\n                      (this.props.element === ElementType.MODEL\r\n                        ? \"models\"\r\n                        : \"assets\")\r\n                  );\r\n                }}\r\n                className=\"add\"\r\n                icon=\"export\"\r\n                text=\"Add from CSV file\"\r\n                minimal\r\n              />\r\n            ) : null}\r\n            <Alert\r\n              cancelButtonText=\"Cancel\"\r\n              className={Classes.DARK}\r\n              intent={Intent.PRIMARY}\r\n              confirmButtonText=\"Confirm Export\"\r\n              isOpen={this.state.fileNameIsOpen}\r\n              onCancel={() => {\r\n                this.setState({ fileNameIsOpen: false });\r\n              }}\r\n              onConfirm={() => {\r\n                if (\r\n                  this.state.fileName === \"\" ||\r\n                  (this.state.networkFileName === \"\" &&\r\n                    this.props.element === ElementType.ASSET) ||\r\n                  (this.state.fileName === \"\" &&\r\n                    this.props.element === ElementType.MODEL)\r\n                ) {\r\n                  this.addErrorToast(\"Please provide filenames for both files\");\r\n                } else {\r\n                  let fileRegEx = /.*\\.(\\w+)/;\r\n                  let extension = this.state.fileName.match(fileRegEx);\r\n                  let ext = extension ? extension[extension.length - 1] : null;\r\n                  let networkExtension = this.state.networkFileName.match(\r\n                    fileRegEx\r\n                  );\r\n                  let networkExt = networkExtension\r\n                    ? networkExtension[networkExtension.length - 1]\r\n                    : null;\r\n                  if (\r\n                    (networkExt && (ext !== \"csv\" || networkExt !== \"csv\")) ||\r\n                    (!networkExt && ext !== \"csv\")\r\n                  ) {\r\n                    this.addErrorToast(\"Filenames must end in .csv\");\r\n                  } else if (\r\n                    (networkExt &&\r\n                      (this.state.fileName.split(\".\")[0].length === 0 ||\r\n                        this.state.networkFileName.split(\".\")[0].length ===\r\n                          0)) ||\r\n                    (!networkExt &&\r\n                      this.state.fileName.split(\".\")[0].length === 0)\r\n                  ) {\r\n                    this.addErrorToast(\".csv file must have non-empty name\");\r\n                  } else {\r\n                    this.getExportData(\r\n                      this.props.element.slice(0, -1) + \"s\",\r\n                      this.state.filters,\r\n                      this.props.token,\r\n                      this.state.fileName,\r\n                      this.state.networkFileName\r\n                    );\r\n\r\n                    this.setState({\r\n                      fileNameIsOpen: false,\r\n                      fileName: \"\",\r\n                      networkFileName: \"\",\r\n                    });\r\n                  }\r\n                }\r\n              }}\r\n            >\r\n              <p>\r\n                Please enter a filename ending in \".csv\" for the following data:\r\n              </p>\r\n              <FormGroup label={this.props.element + \":\"}>\r\n                <InputGroup\r\n                  onChange={(event: any) => {\r\n                    this.setState({ fileName: event.currentTarget.value });\r\n                  }}\r\n                  fill={true}\r\n                  type=\"text\"\r\n                />\r\n              </FormGroup>\r\n              {this.props.element === ElementType.ASSET ? (\r\n                <div>\r\n                  <FormGroup label=\"network connections:\">\r\n                    <InputGroup\r\n                      onChange={(event: any) => {\r\n                        this.setState({\r\n                          networkFileName: event.currentTarget.value,\r\n                        });\r\n                      }}\r\n                      fill={true}\r\n                      type=\"text\"\r\n                    />\r\n                  </FormGroup>\r\n                </div>\r\n              ) : null}\r\n            </Alert>\r\n            <AnchorButton\r\n              className=\"add\"\r\n              text={\"Add \" + this.props.element.slice(0, -1)}\r\n              icon=\"add\"\r\n              minimal\r\n              intent={Intent.PRIMARY}\r\n              onClick={this.handleOpen}\r\n              disabled={\r\n                this.props.element !== ElementType.ASSET &&\r\n                this.props.changePlan\r\n                  ? true\r\n                  : !hasAddElementPermission(\r\n                      this.props.element,\r\n                      this.props.permissionState\r\n                    )\r\n              }\r\n            />\r\n            {this.props.element === ElementType.ASSET\r\n              ? this.renderBarcodeButton()\r\n              : null}\r\n            {this.props.element === ElementType.ASSET ? (\r\n              <Button\r\n                onClick={() => {\r\n                  this.setState({ isDecommissioned: true });\r\n                  this.handleDataUpdate(true);\r\n                }}\r\n                text=\"View Decommissioned\"\r\n                minimal\r\n                icon=\"archive\"\r\n              ></Button>\r\n            ) : null}\r\n            <FormPopup\r\n              {...this.props}\r\n              type={FormTypes.CREATE}\r\n              elementName={this.props.element}\r\n              submitForm={\r\n                this.props.element === ElementType.MODEL\r\n                  ? this.createModel\r\n                  : this.props.element === ElementType.ASSET\r\n                  ? this.createAsset\r\n                  : this.props.element === ElementType.DATACENTER\r\n                  ? this.createDatacenter\r\n                  : this.props.element === ElementType.CHANGEPLANS\r\n                  ? this.createChangePlan\r\n                  : this.createUser\r\n              }\r\n              isOpen={this.state.isOpen}\r\n              handleClose={this.handleClose}\r\n            />\r\n          </div>\r\n        )}\r\n        <div>\r\n          <ElementTable\r\n            datacenters={this.props.datacenters}\r\n            updateDatacenters={this.props.updateDatacenters}\r\n            type={this.props.element}\r\n            getData={this.getElementData}\r\n            getPages={this.getPages}\r\n            updateBarcodes={(data: Array<string>) => {\r\n              this.setState({\r\n                barcodes: data,\r\n              });\r\n            }}\r\n            callback={(data: Array<any>) => {\r\n              this.setState({ filters: data });\r\n            }}\r\n            shouldUpdateData={this.state.updateTable}\r\n            disableSorting={this.props.element === ElementType.DATACENTER}\r\n            disableFiltering={this.props.element === ElementType.DATACENTER}\r\n            currDatacenter={this.props.currDatacenter}\r\n            isDecommissioned={this.state.isDecommissioned}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  private renderBarcodeButton() {\r\n    return this.state.barcodes.length === 0 ? (\r\n      <AnchorButton\r\n        className=\"add\"\r\n        text=\"Print Barcodes for Selected Assets\"\r\n        icon=\"barcode\"\r\n        minimal\r\n        disabled={true}\r\n        onClick={() => {}}\r\n      />\r\n    ) : (\r\n      <Link\r\n        target=\"_blank\"\r\n        to={{ pathname: ROUTES.BARCODE_PRINT, state: null }}\r\n      >\r\n        <AnchorButton\r\n          className=\"add\"\r\n          text=\"Print Barcodes for Selected Assets\"\r\n          icon=\"barcode\"\r\n          style={{ color: \"white\" }}\r\n          minimal\r\n          disabled={this.state.barcodes.length === 0}\r\n          onClick={(e: any) => {\r\n            let barcodes: string;\r\n            barcodes = \"\";\r\n            for (var i = 0; i < this.state.barcodes.length - 1; i++) {\r\n              barcodes = barcodes + this.state.barcodes[i] + \",\";\r\n            }\r\n            barcodes =\r\n              barcodes + this.state.barcodes[this.state.barcodes.length - 1];\r\n            localStorage.setItem(\"barcodes\", barcodes);\r\n          }}\r\n        />\r\n      </Link>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n    isAdmin: state.admin,\r\n    permissionState: state.permissionState,\r\n    changePlan: state.changePlan,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    updateChangePlans: (status: boolean) =>\r\n      dispatch(actions.updateChangePlans(status)),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ElementTab);\r\n","import {\r\n  Alert,\r\n  Classes,\r\n  Intent,\r\n  IToastProps,\r\n  Position,\r\n  Toaster,\r\n  Spinner,\r\n} from \"@blueprintjs/core\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport axios from \"axios\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport { API_ROOT } from \"../../../../utils/api-config\";\r\nimport {\r\n  getHeaders,\r\n  AssetObject,\r\n  RackResponseObject,\r\n  ROUTES,\r\n} from \"../../../../utils/utils\";\r\nimport \"./rackView.scss\";\r\n//export interface ElementViewProps {}\r\n\r\nexport interface RackViewProps {\r\n  token: string;\r\n  isAdmin: string;\r\n  racks: Array<RackResponseObject>;\r\n  loading: boolean;\r\n}\r\nexport interface RouteParams {\r\n  rid: string;\r\n}\r\nvar console: any = {};\r\nconsole.log = function () {};\r\nconsole.warn = function () {};\r\n\r\nexport interface RackViewState {\r\n  isDeleteOpen: boolean;\r\n}\r\nclass RackView extends React.PureComponent<\r\n  RouteComponentProps & RackViewProps,\r\n  RackViewState\r\n> {\r\n  state = { isDeleteOpen: false };\r\n  private getRows(rackResp: RackResponseObject) {\r\n    let rows = [];\r\n\r\n    let unit = 1;\r\n    let currHeight = 0;\r\n    const { height } = rackResp.rack;\r\n    let assets: Array<AssetObject> = Object.assign([], rackResp.assets);\r\n    // console.log(row_letter, rack_num, height);\r\n    // console.log(\"rackResp\", rackResp);\r\n    // console.log(\"initial\", assets, rackResp.assets);\r\n\r\n    let maxHeight: number = +height;\r\n\r\n    while (currHeight < maxHeight) {\r\n      //temporary fix to ignore the second conflicting asset\r\n      if (assets.length > 0 && currHeight > +assets[0].rack_position) {\r\n        const inst = assets.shift();\r\n        console.warn(\"CONFLICTING ASSETS \", inst);\r\n      }\r\n      if (\r\n        assets.length > 0 &&\r\n        assets[0] &&\r\n        currHeight === +assets[0].rack_position - 1\r\n      ) {\r\n        const width = +assets[0].model.height;\r\n        const id: number = +assets[0].id;\r\n\r\n        if (width + currHeight > maxHeight) {\r\n          console.warn(\"ASSET OUT OF RANGE \", assets[0]);\r\n\r\n          currHeight++;\r\n\r\n          rows.unshift(\r\n            <tr className=\"rack-row\">\r\n              <td className=\"cell empty\"></td>\r\n            </tr>\r\n          );\r\n        } else {\r\n          currHeight = width + currHeight;\r\n          const hostname = assets[0].hostname ? assets[0].hostname : \" \";\r\n          rows.unshift(\r\n            <tr\r\n              className=\"rack-row\"\r\n              style={{\r\n                lineHeight: unit * width,\r\n                backgroundColor: assets[0].model.display_color,\r\n              }}\r\n            >\r\n              <td\r\n                className=\"cell\"\r\n                onClick={() =>\r\n                  this.props.history.push(ROUTES.ASSETS + \"/\" + id)\r\n                }\r\n              >\r\n                {assets[0].model.vendor +\r\n                  \" \" +\r\n                  assets[0].model.model_number +\r\n                  \" | \" +\r\n                  hostname}\r\n              </td>\r\n            </tr>\r\n          );\r\n\r\n          assets.shift();\r\n        }\r\n      } else {\r\n        currHeight++;\r\n\r\n        rows.unshift(\r\n          <tr className=\"rack-row\">\r\n            <td className=\"cell empty\"></td>\r\n          </tr>\r\n        );\r\n      }\r\n    }\r\n\r\n    return rows;\r\n  }\r\n  getUnitRows(rackResp: RackResponseObject) {\r\n    const { height } = rackResp.rack;\r\n\r\n    let maxHeight: number = +height;\r\n    let unitBarRows = [];\r\n    for (let i = 1; i <= maxHeight; i++) {\r\n      unitBarRows.unshift(\r\n        <tr className=\"rack-row\" style={{ lineHeight: 1 }}>\r\n          <td className=\"cell unit\"> {i}U </td>\r\n        </tr>\r\n      );\r\n    }\r\n    return unitBarRows;\r\n  }\r\n  private toaster: Toaster = {} as Toaster;\r\n  private addToast(toast: IToastProps) {\r\n    toast.timeout = 5000;\r\n    this.toaster.show(toast);\r\n  }\r\n\r\n  private refHandlers = {\r\n    toaster: (ref: Toaster) => (this.toaster = ref),\r\n  };\r\n  private handleDeleteCancel = () => this.setState({ isDeleteOpen: false });\r\n  private handleDeleteOpen = () => this.setState({ isDeleteOpen: true });\r\n  private handleDelete = (letter: string, num: string) => {\r\n    const body = {\r\n      letter_start: letter,\r\n\r\n      num_start: num,\r\n    };\r\n\r\n    axios\r\n      .post(API_ROOT + \"api/racks/delete\", body, getHeaders(this.props.token))\r\n      .then((res) => {\r\n        this.setState({ isDeleteOpen: false });\r\n      })\r\n      .catch((err) => {\r\n        this.handleDeleteCancel();\r\n        this.addToast({\r\n          message: err.response.data.failure_message,\r\n          intent: Intent.DANGER,\r\n        });\r\n      });\r\n  };\r\n  componentDidMount = () => {\r\n    if (this.props.location.pathname === ROUTES.RACK_PRINT) {\r\n      console.log(this.props.location);\r\n      window.print();\r\n    }\r\n  };\r\n\r\n  public render() {\r\n    const racks =\r\n      this.props.location.pathname === ROUTES.RACK_PRINT\r\n        ? JSON.parse(localStorage.getItem(\"racks\")!)\r\n        : this.props.racks;\r\n    if (this.props.location && this.props.location.state) {\r\n      console.log(this.props.location);\r\n    }\r\n\r\n    return (\r\n      <div className={Classes.DARK}>\r\n        <Toaster\r\n          autoFocus={false}\r\n          canEscapeKeyClear={true}\r\n          position={Position.TOP}\r\n          ref={this.refHandlers.toaster}\r\n        />\r\n        {this.props.loading ? (\r\n          <Spinner\r\n            className=\"center\"\r\n            intent=\"primary\"\r\n            size={Spinner.SIZE_STANDARD}\r\n          />\r\n        ) : (\r\n          <div className=\"rack-container\">\r\n            {racks.map((rackResp: RackResponseObject) => {\r\n              return (\r\n                <span>\r\n                  <div className=\"rack-parent\">\r\n                    {/* <div className=\"delete-rack\">\r\n                    <AnchorButton\r\n                      minimal\r\n                      intent=\"danger\"\r\n                      icon=\"trash\"\r\n                      text=\"Delete\"\r\n                      onClick={this.handleDeleteOpen}\r\n                    />\r\n                  </div> */}\r\n                    <Alert\r\n                      className={Classes.DARK}\r\n                      cancelButtonText=\"Cancel\"\r\n                      confirmButtonText=\"Delete\"\r\n                      intent=\"danger\"\r\n                      isOpen={this.state.isDeleteOpen}\r\n                      onCancel={this.handleDeleteCancel}\r\n                      onConfirm={() =>\r\n                        this.handleDelete(\r\n                          rackResp.rack.row_letter,\r\n                          rackResp.rack.rack_num\r\n                        )\r\n                      }\r\n                    >\r\n                      {\" \"}\r\n                      <p>Are you sure you want to delete?</p>\r\n                    </Alert>\r\n                    <div className={Classes.DARK + \" rack\"}>\r\n                      <table className=\" bp3-html-table bp3-interactive rack-table\">\r\n                        <thead>\r\n                          <tr>\r\n                            <th className=\" cell header\">\r\n                              Rack {rackResp.rack.row_letter}\r\n                              {rackResp.rack.rack_num}\r\n                            </th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>{this.getRows(rackResp)}</tbody>\r\n                      </table>\r\n                      <table className=\"bp3-html-table loc-table\">\r\n                        <thead>\r\n                          <tr>\r\n                            <th className=\" cell header\"> (U)</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>{this.getUnitRows(rackResp)}</tbody>\r\n                      </table>\r\n                    </div>\r\n                  </div>\r\n                </span>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStatetoProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n    isAdmin: state.admin,\r\n  };\r\n};\r\n\r\nexport default connect(mapStatetoProps)(withRouter(RackView));\r\n","import { Button, Callout, Intent, Spinner } from \"@blueprintjs/core\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport { handleBooleanChange } from \"@blueprintjs/docs-theme\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport \"../../forms/forms.scss\";\r\nimport RackRangeForm from \"../../forms/rackRangeForm\";\r\nimport { updateObject } from \"../../store/utility\";\r\nimport {\r\n  DatacenterObject,\r\n  getHeaders,\r\n  RackRangeFields,\r\n} from \"../../utils/utils\";\r\nimport \"./elementView.scss\";\r\ninterface RackSelectViewState {\r\n  viewRange: boolean;\r\n  values: RackRangeFields;\r\n\r\n  errors: Array<string>;\r\n}\r\nvar console: any = {};\r\nconsole.log = function () {};\r\n\r\ninterface RackSelectViewProps {\r\n  token: string;\r\n  currDatacenter?: DatacenterObject;\r\n  loading?: boolean;\r\n\r\n  submitForm(\r\n    model: RackRangeFields,\r\n    headers: any,\r\n    showError: boolean\r\n  ): Promise<any> | void;\r\n}\r\nclass RackSelectView extends React.Component<\r\n  RackSelectViewProps & RouteComponentProps,\r\n  RackSelectViewState\r\n> {\r\n  public state = {\r\n    viewRange: false,\r\n    values: {} as RackRangeFields,\r\n\r\n    errors: [],\r\n  };\r\n  componentWillReceiveProps(nextProps: RackSelectViewProps) {\r\n    console.log(nextProps.currDatacenter, this.props.currDatacenter);\r\n    if (nextProps.currDatacenter !== this.props.currDatacenter) {\r\n      console.log(\"NEW DATACENTER\", nextProps);\r\n      this.setState({\r\n        values: {\r\n          letter_start: \"\",\r\n          letter_end: \"\",\r\n          num_start: \"\",\r\n          num_end: \"\",\r\n          datacenter: \"\",\r\n        } as RackRangeFields,\r\n      });\r\n    }\r\n  }\r\n  private handleSwitchChange = handleBooleanChange((viewRange) => {\r\n    this.setState({ viewRange: viewRange });\r\n    if (!viewRange) {\r\n      this.setState({\r\n        values: updateObject(this.state.values, {\r\n          letter_end: undefined,\r\n          num_end: undefined,\r\n        }),\r\n      });\r\n    }\r\n  });\r\n\r\n  handleChange = (field: { [key: string]: any }) => {\r\n    this.setState({\r\n      values: updateObject(this.state.values, {\r\n        ...field,\r\n      }),\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e: any) => {\r\n    this.setState({\r\n      errors: [],\r\n    });\r\n\r\n    e.preventDefault();\r\n    const values: any = this.state.values;\r\n    Object.entries(values).forEach(([field, value]) => {\r\n      if (value === \"\") {\r\n        values[field] = undefined;\r\n      }\r\n    });\r\n\r\n    const headers = getHeaders(this.props.token);\r\n    const resp = this.props.submitForm(values, headers, true);\r\n    if (resp) {\r\n      resp.catch((err) => {\r\n        console.log(err.response.data.failure_message);\r\n        let errors: Array<string> = this.state.errors;\r\n        errors.push(err.response.data.failure_message as string);\r\n        this.setState({\r\n          errors: errors,\r\n        });\r\n      });\r\n    }\r\n  };\r\n  renderRackOptions(range: boolean) {}\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    console.log(this.state.values);\r\n    return (\r\n      <div>\r\n        {this.state.errors.map((err: string) => {\r\n          return <Callout intent={Intent.DANGER}>{err}</Callout>;\r\n        })}\r\n        <form onSubmit={this.handleSubmit} className=\"rack-form bp3-form-group\">\r\n          <div className=\"rack-select\">\r\n            <RackRangeForm\r\n              className=\"rack-field\"\r\n              handleChange={this.handleChange}\r\n              values={this.state.values}\r\n            />\r\n\r\n            <div className=\"rack-field \">\r\n              <Button className=\"button\" type=\"submit\">\r\n                Submit\r\n              </Button>\r\n              {this.props.loading ? (\r\n                <div>\r\n                  <p>processing request... </p>\r\n                  <Spinner size={Spinner.SIZE_SMALL} />\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n    isAdmin: state.admin,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(withRouter(RackSelectView));\r\n","import {\r\n  Alert,\r\n  AnchorButton,\r\n  Button,\r\n  Callout,\r\n  FormGroup,\r\n  Intent,\r\n  IToastProps,\r\n  MenuItem,\r\n  Position,\r\n  Toaster,\r\n  Card,\r\n  Classes,\r\n} from \"@blueprintjs/core\";\r\nimport axios from \"axios\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport FormPopup from \"../../forms/formPopup\";\r\nimport {\r\n  DatacenterSelect,\r\n  filterDatacenter,\r\n  FormTypes,\r\n  renderDatacenterItem,\r\n} from \"../../forms/formUtils\";\r\nimport { updateObject } from \"../../store/utility\";\r\nimport { API_ROOT } from \"../../utils/api-config\";\r\nimport {\r\n  DatacenterObject,\r\n  ElementType,\r\n  RackRangeFields,\r\n  RackResponseObject,\r\n  getHeaders,\r\n  ROUTES,\r\n  ChangePlan,\r\n} from \"../../utils/utils\";\r\nimport RackView from \"./detailedView/rackView/rackView\";\r\nimport { ALL_DATACENTERS } from \"./elementTabContainer\";\r\nimport RackSelectView from \"./rackSelectView\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { PermissionState } from \"../../utils/permissionUtils\";\r\n\r\ninterface RackTabState {\r\n  isOpen: boolean;\r\n  isDeleteOpen: boolean;\r\n  deleteRackInfo: RackRangeFields;\r\n  headers: any;\r\n  isConfirmationOpen: boolean;\r\n  racks: Array<RackResponseObject>;\r\n  loading: boolean;\r\n  selectedRackRange: RackRangeFields;\r\n  viewAll: boolean;\r\n  submitInProgress: boolean;\r\n}\r\ninterface RackTabProps {\r\n  token: string;\r\n  isAdmin: boolean;\r\n  datacenters: Array<DatacenterObject>;\r\n  currDatacenter: DatacenterObject;\r\n  onDatacenterSelect(datacenter: DatacenterObject): void;\r\n  changePlan: ChangePlan;\r\n  permissionState: PermissionState;\r\n}\r\nvar console: any = {};\r\nconsole.log = function () {};\r\nclass RackTab extends React.Component<\r\n  RackTabProps & RouteComponentProps,\r\n  RackTabState\r\n> {\r\n  state = {\r\n    isOpen: false,\r\n    isDeleteOpen: false,\r\n    selectedRackRange: {} as RackRangeFields,\r\n    deleteRackInfo: {} as RackRangeFields,\r\n    headers: {},\r\n    isConfirmationOpen: false,\r\n    racks: [],\r\n    loading: false,\r\n    viewAll: false,\r\n    submitInProgress: false,\r\n  };\r\n  private toaster: Toaster = {} as Toaster;\r\n  private addToast(toast: IToastProps) {\r\n    toast.timeout = 5000;\r\n    this.toaster.show(toast);\r\n  }\r\n\r\n  private refHandlers = {\r\n    toaster: (ref: Toaster) => (this.toaster = ref),\r\n  };\r\n\r\n  private handleDeleteCancel = () => this.setState({ isDeleteOpen: false });\r\n  private handleDeleteOpen = () => this.setState({ isDeleteOpen: true });\r\n  private handleClose = () => this.setState({ isOpen: false });\r\n\r\n  private handleConfirmationCancel = () =>\r\n    this.setState({ isConfirmationOpen: false });\r\n  private handleConfirmationOpen = () =>\r\n    this.setState({ isConfirmationOpen: true });\r\n  viewRackForm = (rack: RackRangeFields, headers: any, showError: boolean) => {\r\n    this.setState({\r\n      loading: true,\r\n      selectedRackRange: rack,\r\n    });\r\n    let rack_datacenter = updateObject(rack, {\r\n      datacenter: this.props.currDatacenter.id,\r\n    });\r\n\r\n    return axios\r\n      .post(API_ROOT + \"api/racks/get\", rack_datacenter, headers)\r\n      .then((res) => {\r\n        this.setState({\r\n          racks: res.data.racks,\r\n          loading: false,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        this.setState({\r\n          loading: false,\r\n          racks: [],\r\n        });\r\n        if (showError) {\r\n          this.addToast({\r\n            message: err.response.data.failure_message,\r\n            intent: Intent.DANGER,\r\n          });\r\n        }\r\n      });\r\n  };\r\n  private handleOpen = () => {\r\n    this.setState({\r\n      isOpen: true,\r\n    });\r\n    console.log(this.state);\r\n  };\r\n\r\n  deleteRack = (rack: RackRangeFields, headers: any) => {\r\n    const rack_new = updateObject(rack, {\r\n      datacenter: this.props.currDatacenter.id,\r\n    });\r\n    this.setState({\r\n      deleteRackInfo: rack_new,\r\n      headers,\r\n    });\r\n    this.handleConfirmationOpen();\r\n  };\r\n  actuallyDelete = () => {\r\n    this.setState({\r\n      submitInProgress: true,\r\n    });\r\n    return axios\r\n      .post(\r\n        API_ROOT + \"api/racks/delete\",\r\n        this.state.deleteRackInfo,\r\n        this.state.headers\r\n      )\r\n      .then((res) => {\r\n        this.addToast({\r\n          message: res.data.success_message,\r\n          intent: Intent.PRIMARY,\r\n        });\r\n        this.updateRackData(false);\r\n        this.setState({\r\n          isDeleteOpen: false,\r\n          isConfirmationOpen: false,\r\n          submitInProgress: false,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        this.addToast({\r\n          message: err.response.data.failure_message,\r\n          intent: Intent.DANGER,\r\n        });\r\n        this.setState({\r\n          isDeleteOpen: true,\r\n          isConfirmationOpen: false,\r\n          submitInProgress: false,\r\n        });\r\n      });\r\n  };\r\n\r\n  updateRackData = (showError: boolean) => {\r\n    if (this.state.selectedRackRange.num_start) {\r\n      this.viewRackForm(\r\n        this.state.selectedRackRange,\r\n        getHeaders(this.props.token),\r\n        showError\r\n      );\r\n    } else if (this.state.viewAll) {\r\n      this.getAllRacks(this.props.currDatacenter);\r\n    }\r\n  };\r\n  componentWillReceiveProps(nextProps: RackTabProps) {\r\n    if (nextProps.currDatacenter !== this.props.currDatacenter) {\r\n      this.setState({\r\n        racks: [],\r\n        selectedRackRange: {} as RackRangeFields,\r\n      });\r\n    }\r\n  }\r\n  createRack = (rack: RackRangeFields, headers: any) => {\r\n    this.setState({\r\n      submitInProgress: true,\r\n    });\r\n    const rack_new = updateObject(rack, {\r\n      datacenter: this.props.currDatacenter.id,\r\n    });\r\n    return axios\r\n      .post(API_ROOT + \"api/racks/create\", rack_new, headers)\r\n      .then((res) => {\r\n        this.setState({ isOpen: false, submitInProgress: false });\r\n        this.updateRackData(true);\r\n        this.addToast({\r\n          message: res.data.success_message,\r\n          intent: Intent.PRIMARY,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        this.setState({\r\n          submitInProgress: false,\r\n        });\r\n\r\n        this.addErrorToast(err.data.failure_message);\r\n      });\r\n  };\r\n  private addErrorToast = (message: string) => {\r\n    this.addToast({ message: message, intent: Intent.DANGER });\r\n  };\r\n\r\n  getAllRacks = (datacenter: DatacenterObject) => {\r\n    console.log(this.props);\r\n    this.setState({\r\n      loading: true,\r\n      viewAll: true,\r\n    });\r\n    const config = {\r\n      headers: {\r\n        Authorization: \"Token \" + this.props.token,\r\n      },\r\n      params: {\r\n        datacenter: datacenter.id,\r\n      },\r\n    };\r\n    axios\r\n      .get(API_ROOT + \"api/racks/get-all\", config)\r\n      .then((res) => {\r\n        console.log(\"GOT RACKS\", res.data, this.state.racks);\r\n        this.setState({\r\n          racks: res.data.racks,\r\n          loading: false,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"failed to get racks\");\r\n        this.setState({\r\n          loading: false,\r\n          racks: [],\r\n        });\r\n\r\n        this.addToast({\r\n          message: err.response.data.failure_message,\r\n          intent: Intent.DANGER,\r\n        });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"rack-tab\">\r\n        <Toaster\r\n          autoFocus={false}\r\n          canEscapeKeyClear={true}\r\n          position={Position.TOP}\r\n          ref={this.refHandlers.toaster}\r\n        />\r\n        <div>\r\n          <Callout>\r\n            <FormGroup label=\"Datacenter\" inline={true}>\r\n              <DatacenterSelect\r\n                popoverProps={{\r\n                  minimal: true,\r\n                  popoverClassName: \"dropdown\",\r\n                  usePortal: true,\r\n                }}\r\n                items={this.props.datacenters!}\r\n                onItemSelect={(datacenter: DatacenterObject) => {\r\n                  this.props.onDatacenterSelect!(datacenter);\r\n                }}\r\n                itemRenderer={renderDatacenterItem}\r\n                itemPredicate={filterDatacenter}\r\n                noResults={<MenuItem disabled={true} text=\"No results.\" />}\r\n              >\r\n                <Button\r\n                  rightIcon=\"caret-down\"\r\n                  text={\r\n                    this.props.currDatacenter && this.props.currDatacenter.name\r\n                      ? this.props.currDatacenter.name\r\n                      : \"All datacenters\"\r\n                  }\r\n                />\r\n              </DatacenterSelect>\r\n            </FormGroup>\r\n          </Callout>\r\n        </div>\r\n\r\n        <FormPopup\r\n          {...this.props}\r\n          loading={this.state.submitInProgress}\r\n          type={FormTypes.CREATE}\r\n          elementName={ElementType.RACK}\r\n          submitForm={this.createRack}\r\n          isOpen={this.state.isOpen}\r\n          handleClose={this.handleClose}\r\n        />\r\n        <FormPopup\r\n          {...this.props}\r\n          loading={this.state.submitInProgress}\r\n          type={FormTypes.DELETE}\r\n          elementName={ElementType.RACK}\r\n          submitForm={this.deleteRack}\r\n          isOpen={this.state.isDeleteOpen}\r\n          handleClose={this.handleDeleteCancel}\r\n        />\r\n        <Alert\r\n          className={Classes.DARK}\r\n          cancelButtonText=\"Cancel\"\r\n          confirmButtonText=\"Delete\"\r\n          intent=\"danger\"\r\n          isOpen={this.state.isConfirmationOpen}\r\n          onCancel={this.handleConfirmationCancel}\r\n          onConfirm={this.actuallyDelete}\r\n        >\r\n          <p>Are you sure you want to delete?</p>\r\n        </Alert>\r\n        {this.props.currDatacenter &&\r\n        this.props.currDatacenter.name !== ALL_DATACENTERS.name ? (\r\n          <div className=\"rack-tab-panel\">\r\n            {this.props.changePlan ? (\r\n              <Callout\r\n                intent={Intent.WARNING}\r\n                title=\"Rack Management on a change plan\"\r\n              >\r\n                <em>All changes made to racks will be live in the database </em>\r\n              </Callout>\r\n            ) : null}\r\n            <div className=\" element-tab-buttons\">\r\n              <AnchorButton\r\n                className=\"add\"\r\n                text={\"Add Rack(s)\"}\r\n                icon=\"add\"\r\n                minimal\r\n                intent={Intent.PRIMARY}\r\n                onClick={this.handleOpen}\r\n                disabled={\r\n                  !(\r\n                    this.props.permissionState.admin ||\r\n                    this.props.permissionState.asset_management ||\r\n                    this.props.permissionState.datacenter_permissions.includes(\r\n                      +this.props.currDatacenter.id\r\n                    )\r\n                  )\r\n                }\r\n              />\r\n              <AnchorButton\r\n                className=\"add \"\r\n                text={\"Delete Rack(s)\"}\r\n                icon=\"trash\"\r\n                minimal\r\n                intent={Intent.DANGER}\r\n                onClick={this.handleDeleteOpen}\r\n                disabled={\r\n                  !(\r\n                    this.props.permissionState.admin ||\r\n                    this.props.permissionState.asset_management ||\r\n                    this.props.permissionState.datacenter_permissions.includes(\r\n                      +this.props.currDatacenter.id\r\n                    )\r\n                  )\r\n                }\r\n              />\r\n            </div>\r\n\r\n            <Card>\r\n              <div className=\"rack-view-options\">\r\n                <Button\r\n                  className=\"all-racks\"\r\n                  text=\"View All Racks\"\r\n                  onClick={(e: any) =>\r\n                    this.getAllRacks(this.props.currDatacenter)\r\n                  }\r\n                />\r\n                <p className=\"or\">or </p>\r\n                <RackSelectView\r\n                  currDatacenter={this.props.currDatacenter}\r\n                  submitForm={this.viewRackForm}\r\n                />\r\n              </div>\r\n            </Card>\r\n          </div>\r\n        ) : (\r\n          <Callout title=\"No Datacenter Selected\">\r\n            <em>Please select a datacenter to view rack information</em>\r\n          </Callout>\r\n        )}\r\n\r\n        {this.state.racks.length !== 0 ? (\r\n          <Link\r\n            target=\"_blank\"\r\n            to={{ pathname: ROUTES.RACK_PRINT, state: this.state.racks }}\r\n          >\r\n            <Button\r\n              className=\"print-racks\"\r\n              icon=\"print\"\r\n              text=\"Print Racks Page\"\r\n              onClick={(e: any) => {\r\n                console.log(\"storing racks\");\r\n                localStorage.setItem(\"racks\", JSON.stringify(this.state.racks));\r\n              }}\r\n            />\r\n          </Link>\r\n        ) : null}\r\n\r\n        <div id=\"rack-view-print\">\r\n          <RackView racks={this.state.racks} loading={this.state.loading} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStatetoProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n    isAdmin: state.admin,\r\n    changePlan: state.changePlan,\r\n    permissionState: state.permissionState,\r\n  };\r\n};\r\nexport default connect(mapStatetoProps)(withRouter(RackTab));\r\n","import \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport * as React from \"react\";\r\nimport { Tabs, Tab, Classes } from \"@blueprintjs/core\";\r\nimport ElementTab from \"./elementTab\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport \"./elementView.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { ElementType, DatacenterObject, getHeaders } from \"../../utils/utils\";\r\nimport RackTab from \"./rackTab\";\r\nimport { API_ROOT } from \"../../utils/api-config\";\r\nimport axios from \"axios\";\r\nimport { PermissionState } from \"../../utils/permissionUtils\";\r\n\r\ninterface ElementTabContainerProps {\r\n  isAdmin: boolean;\r\n  permissionState: PermissionState;\r\n  token: string;\r\n}\r\ninterface ElementTabContainerState {\r\n  datacenters: Array<DatacenterObject>;\r\n  currDatacenter: DatacenterObject;\r\n}\r\nexport const ALL_DATACENTERS: DatacenterObject = {\r\n  id: \"\",\r\n  name: \"All datacenters\",\r\n  abbreviation: \"ALL\",\r\n};\r\n// var console: any = {};\r\n// console.log = function() {};\r\n\r\nclass ElementTabContainer extends React.Component<\r\n  ElementTabContainerProps & RouteComponentProps,\r\n  ElementTabContainerState\r\n> {\r\n  state = {\r\n    datacenters: [],\r\n    currDatacenter: ALL_DATACENTERS,\r\n  };\r\n\r\n  onDatacenterSelect = (datacenter: DatacenterObject) => {\r\n    this.setState({\r\n      currDatacenter: datacenter,\r\n    });\r\n  };\r\n  getDatacenters = () => {\r\n    const headers = getHeaders(this.props.token);\r\n    axios\r\n      .post(API_ROOT + \"api/datacenters/get-many\", {}, headers)\r\n      .then((res) => {\r\n        const datacenters = res.data.datacenters as Array<DatacenterObject>;\r\n        datacenters.push(ALL_DATACENTERS);\r\n        this.setState({\r\n          datacenters,\r\n        });\r\n      })\r\n      .catch((err) => {});\r\n  };\r\n  componentDidMount = () => {\r\n    this.getDatacenters();\r\n  };\r\n\r\n  getTabName = (pathname: string) => {\r\n    if (pathname === \"/dashboard\") {\r\n      return \"racks\";\r\n    }\r\n    const regex = new RegExp(\"dashboard/(.*$)\");\r\n    const match = regex.exec(pathname);\r\n    if (match) {\r\n      return match[1];\r\n    }\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <Tabs\r\n        className={Classes.DARK + \" element-view \"}\r\n        animate={true}\r\n        id=\"ElementViewer\"\r\n        key={\"vertical\"}\r\n        selectedTabId={this.getTabName(this.props.location.pathname)}\r\n        renderActiveTabPanelOnly={false}\r\n        vertical={true}\r\n        large\r\n        onChange={(tab: any) => this.props.history.push(\"/dashboard/\" + tab)}\r\n      >\r\n        <Tab\r\n          className=\"tab\"\r\n          id=\"racks\"\r\n          title=\"Racks\"\r\n          panel={\r\n            <RackTab\r\n              datacenters={this.state.datacenters}\r\n              currDatacenter={this.state.currDatacenter}\r\n              onDatacenterSelect={this.onDatacenterSelect}\r\n            />\r\n          }\r\n        />\r\n        <Tab\r\n          className=\"tab do-not-print\"\r\n          id=\"assets\"\r\n          title=\"Assets\"\r\n          panel={\r\n            <ElementTab\r\n              datacenters={this.state.datacenters}\r\n              currDatacenter={this.state.currDatacenter}\r\n              onDatacenterSelect={this.onDatacenterSelect}\r\n              {...this.props}\r\n              element={ElementType.ASSET}\r\n              isActive={false}\r\n            />\r\n          }\r\n        />\r\n\r\n        <Tab\r\n          className=\"tab do-not-print\"\r\n          id=\"models\"\r\n          title=\"Models\"\r\n          panel={<ElementTab {...this.props} element={ElementType.MODEL} />}\r\n        />\r\n\r\n        <Tab\r\n          className=\"tab do-not-print\"\r\n          id=\"datacenters\"\r\n          title=\"Datacenters\"\r\n          disabled={\r\n            !(\r\n              this.props.permissionState.admin ||\r\n              this.props.permissionState.asset_management\r\n            )\r\n          }\r\n          panel={\r\n            <ElementTab\r\n              {...this.props}\r\n              updateDatacenters={this.getDatacenters}\r\n              element={ElementType.DATACENTER}\r\n            />\r\n          }\r\n        />\r\n\r\n        <Tabs.Expander />\r\n      </Tabs>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    isAdmin: state.admin,\r\n    permissionState: state.permissionState,\r\n    token: state.token,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ElementTabContainer);\r\n","import {\r\n  Alert,\r\n  Button,\r\n  ButtonGroup,\r\n  Callout,\r\n  Checkbox,\r\n  Classes,\r\n  Collapse,\r\n  FormGroup,\r\n  Icon,\r\n  InputGroup,\r\n  Intent,\r\n  MenuItem,\r\n  Spinner,\r\n  Tooltip,\r\n  Card,\r\n} from \"@blueprintjs/core\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport { IconNames } from \"@blueprintjs/icons\";\r\nimport axios from \"axios\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { isNullOrUndefined } from \"util\";\r\nimport { ALL_DATACENTERS } from \"../components/elementView/elementTabContainer\";\r\nimport {\r\n  FilterTypes,\r\n  IFilter,\r\n  PagingTypes,\r\n  TextFilterTypes,\r\n} from \"../components/elementView/elementUtils\";\r\nimport { updateObject } from \"../store/utility\";\r\nimport { API_ROOT } from \"../utils/api-config\";\r\nimport {\r\n  AssetFormLabels,\r\n  AssetObject,\r\n  DatacenterObject,\r\n  ElementObjectType,\r\n  ElementType,\r\n  getHeaders,\r\n  isAssetObject,\r\n  isDatacenterObject,\r\n  isRackObject,\r\n  ModelObject,\r\n  NetworkConnection,\r\n  PowerConnection,\r\n  PowerPortAvailability,\r\n  PowerSide,\r\n  RackObject,\r\n  ShallowAssetObject,\r\n  ChangePlan,\r\n} from \"../utils/utils\";\r\nimport Field from \"./field\";\r\nimport \"./forms.scss\";\r\nimport {\r\n  AssetSelect,\r\n  DatacenterSelect,\r\n  filterAsset,\r\n  filterDatacenter,\r\n  filterModel,\r\n  filterRack,\r\n  filterString,\r\n  FormTypes,\r\n  isMacAddressValid,\r\n  macAddressInfo,\r\n  ModelSelect,\r\n  RackSelect,\r\n  renderAssetItem,\r\n  renderDatacenterItem,\r\n  renderModelItem,\r\n  renderRackItem,\r\n  renderStringItem,\r\n  StringSelect,\r\n} from \"./formUtils\";\r\nimport $ from \"jquery\";\r\n\r\nexport interface AssetFormProps {\r\n  token: string;\r\n  type: FormTypes;\r\n  initialValues?: AssetObject;\r\n  isOpen: boolean;\r\n  submitForm(Asset: ShallowAssetObject, headers: any): Promise<any> | void;\r\n  pageScroll?(): void;\r\n  datacenters: Array<DatacenterObject>;\r\n  currDatacenter: DatacenterObject;\r\n  changePlan: ChangePlan;\r\n}\r\ninterface AssetFormState {\r\n  values: AssetObject;\r\n  currDatacenter?: DatacenterObject;\r\n  racks: Array<RackObject>;\r\n  models: Array<ModelObject>;\r\n  errors: Array<string>;\r\n  users: Array<string>;\r\n  power_ports: PowerPortAvailability;\r\n  power_ports_default: { [port: string]: boolean };\r\n  assets: Array<AssetObject>;\r\n  left_ports: Array<string>;\r\n  right_ports: Array<string>;\r\n  isAlertOpen: boolean;\r\n  warningMessage: string;\r\n  selectedValue: any;\r\n  loading: boolean;\r\n}\r\n// var console: any = {};\r\n// console.log = function() {};\r\n\r\nclass AssetForm extends React.Component<AssetFormProps, AssetFormState> {\r\n  initialState: AssetObject = this.props.initialValues\r\n    ? JSON.parse(JSON.stringify(this.props.initialValues))\r\n    : ({} as AssetObject);\r\n  private setPowerPortInputState = () => {\r\n    const power_ports_default: { [port: string]: boolean } = {};\r\n    if (this.state.values && this.state.values.power_connections) {\r\n      Object.keys(this.state.values.power_connections).forEach((port) => {\r\n        power_ports_default[port] = true;\r\n      });\r\n    }\r\n    return power_ports_default;\r\n  };\r\n  initialGetRacks = false;\r\n  gettingAssetsInProgress = false;\r\n  gettingRacksInProgress = false;\r\n  gettingPowerPortsInProgress = false;\r\n\r\n  public state = {\r\n    values: this.initialState,\r\n    currDatacenter: this.initialState.rack\r\n      ? this.initialState.rack.datacenter\r\n      : this.props.currDatacenter === ALL_DATACENTERS\r\n      ? undefined\r\n      : this.props.currDatacenter,\r\n    racks: [],\r\n    models: [],\r\n    errors: [],\r\n    users: [],\r\n    assets: [],\r\n    left_ports: [],\r\n    right_ports: [],\r\n    //TODO, call endpoint, don't hard code\r\n    power_ports: {} as PowerPortAvailability,\r\n    // power_ports: {\r\n    //   left_suggest: \"12\",\r\n    //   left_available: [\"1\", \"2\", \"12\"],\r\n    //   right_suggest: \"12\",\r\n    //   right_available: [\"1\", \"2\", \"12\", \"13\"]\r\n    // },\r\n    power_ports_default: {} as { [port: string]: boolean },\r\n    isAlertOpen: false,\r\n    warningMessage: \"\",\r\n    selectedValue: undefined,\r\n    loading: false,\r\n  };\r\n\r\n  getPowerPortAvailability(rack: RackObject) {\r\n    this.gettingPowerPortsInProgress = true;\r\n    const params: any = { id: rack.id };\r\n    if (this.props.changePlan) {\r\n      params[\"change_plan\"] = this.props.changePlan.id;\r\n    }\r\n    const config = {\r\n      headers: {\r\n        Authorization: \"Token \" + this.props.token,\r\n      },\r\n\r\n      params: params,\r\n    };\r\n    axios.get(API_ROOT + \"api/power/availability\", config).then((res) => {\r\n      this.gettingPowerPortsInProgress = false;\r\n      this.setState({ power_ports: res.data });\r\n    });\r\n  }\r\n\r\n  private getElementData(\r\n    path: string,\r\n    page: number,\r\n    page_type: PagingTypes,\r\n    body: any,\r\n    token: string\r\n  ): Promise<Array<ElementObjectType>> {\r\n    const params: any =\r\n      page_type === PagingTypes.ALL\r\n        ? {}\r\n        : {\r\n            page_size: page_type,\r\n            page,\r\n          };\r\n\r\n    if (this.props.changePlan) {\r\n      params[\"change_plan\"] = this.props.changePlan.id;\r\n    }\r\n    const config = {\r\n      headers: {\r\n        Authorization: \"Token \" + token,\r\n      },\r\n\r\n      params: params,\r\n    };\r\n\r\n    return axios\r\n      .post(API_ROOT + \"api/\" + path + \"/get-many\", body, config)\r\n      .then((res) => {\r\n        const items = res.data[path];\r\n\r\n        return items;\r\n      });\r\n  }\r\n  getAssetNumber() {\r\n    axios\r\n      .get(API_ROOT + \"api/assets/asset-number\", getHeaders(this.props.token))\r\n      .then((res: any) => {\r\n        this.setState({\r\n          values: updateObject(this.state.values, {\r\n            asset_number: res.data.asset_number,\r\n          }),\r\n        });\r\n      });\r\n  }\r\n  componentDidMount() {\r\n    this.setPowerPortInputState();\r\n    if (!this.state.values.asset_number && !this.props.initialValues) {\r\n      this.getAssetNumber();\r\n    }\r\n    if (this.state.values.rack) {\r\n      this.getPowerPortAvailability(this.state.values.rack);\r\n    }\r\n\r\n    let values = this.state.values;\r\n    if (!this.props.initialValues) {\r\n      values = updateObject(values, {\r\n        power_connections: {},\r\n        mac_addresses: {},\r\n      });\r\n    }\r\n    this.setState({\r\n      values,\r\n    });\r\n    this.getValidAssets(this.state.currDatacenter!);\r\n    this.getRacks(this.state.currDatacenter!);\r\n  }\r\n  private mapAssetObject = (asset: AssetObject): ShallowAssetObject => {\r\n    const {\r\n      asset_number,\r\n      hostname,\r\n      id,\r\n      rack_position,\r\n      owner,\r\n      mac_addresses,\r\n      network_connections,\r\n      power_connections,\r\n      comment,\r\n    } = asset;\r\n    const model = asset.model ? asset.model.id : null;\r\n    const rack = asset.rack ? asset.rack.id : null;\r\n    let valuesToSend: ShallowAssetObject = {\r\n      asset_number,\r\n      model,\r\n      rack,\r\n      hostname,\r\n      id,\r\n      rack_position,\r\n      owner,\r\n      comment,\r\n      mac_addresses,\r\n      network_connections,\r\n      power_connections,\r\n    };\r\n\r\n    return valuesToSend;\r\n  };\r\n\r\n  private handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    if (this.state.values) {\r\n      this.setState({\r\n        errors: [],\r\n        loading: true,\r\n      });\r\n\r\n      if (!this.validateMacAddresses()) {\r\n        $(\".bp3-overlay-scroll-container\").scrollTop(0);\r\n        return;\r\n      }\r\n      let newValues = this.state.values;\r\n\r\n      if (this.state.values.hostname === \"\") {\r\n        delete newValues.hostname;\r\n      }\r\n      if (this.state.values.asset_number === \"\") {\r\n        delete newValues.asset_number;\r\n      }\r\n      if (this.props.initialValues) {\r\n        newValues.id = this.props.initialValues.id;\r\n      }\r\n      this.setState({\r\n        values: newValues,\r\n      });\r\n\r\n      const resp = this.props.submitForm(\r\n        this.mapAssetObject(newValues),\r\n        getHeaders(this.props.token)\r\n      );\r\n      if (resp) {\r\n        resp.then((res) =>\r\n          this.setState({\r\n            loading: false,\r\n          })\r\n        );\r\n        resp.catch((err) => {\r\n          $(\".bp3-overlay-scroll-container\").scrollTop(0);\r\n          let errors: Array<string> = this.state.errors;\r\n          errors.push(err.response.data.failure_message as string);\r\n          this.setState({\r\n            errors: errors,\r\n            loading: false,\r\n          });\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  validateMacAddresses = () => {\r\n    let valid = true;\r\n    Object.entries(this.state.values.mac_addresses).forEach(\r\n      ([port, mac_address]) => {\r\n        if (mac_address === \"\") {\r\n          delete this.state.values.mac_addresses[port];\r\n        } else if (!isMacAddressValid(mac_address)) {\r\n          const errors: Array<string> = [];\r\n          valid = false;\r\n          errors.push(\r\n            \"Mac Address \" +\r\n              '\"' +\r\n              mac_address +\r\n              '\"' +\r\n              \" for \" +\r\n              '\"' +\r\n              port +\r\n              '\"' +\r\n              \" is invalid.\"\r\n          );\r\n          this.setState({\r\n            errors,\r\n            loading: false,\r\n          });\r\n        }\r\n      }\r\n    );\r\n    return valid;\r\n  };\r\n  handleChange = (field: { [key: string]: any }) => {\r\n    this.setState({\r\n      values: updateObject(this.state.values, {\r\n        ...field,\r\n      }),\r\n    });\r\n  };\r\n  getUsers = () => {\r\n    const headers = getHeaders(this.props.token);\r\n    axios\r\n      .get(API_ROOT + \"api/usernames\", headers)\r\n      .then((res) => {\r\n        this.setState({\r\n          users: res.data.usernames,\r\n        });\r\n      })\r\n      .catch((err) => {});\r\n  };\r\n  getRacks = (datacenter: DatacenterObject) => {\r\n    if (datacenter) {\r\n      this.gettingRacksInProgress = true;\r\n      const config = {\r\n        headers: {\r\n          Authorization: \"Token \" + this.props.token,\r\n        },\r\n        params: {\r\n          datacenter: datacenter ? datacenter.id : undefined,\r\n        },\r\n      };\r\n\r\n      axios\r\n        .get(API_ROOT + \"api/racks/summary\", config)\r\n        .then((res) => {\r\n          this.initialGetRacks = true;\r\n          this.gettingRacksInProgress = false;\r\n          this.setState({\r\n            racks: res.data.racks as Array<RackObject>,\r\n          });\r\n        })\r\n        .catch((err) => {});\r\n    }\r\n  };\r\n  getModels = () => {\r\n    this.getElementData(\r\n      ElementType.MODEL,\r\n      1,\r\n      PagingTypes.ALL,\r\n      {},\r\n      this.props.token\r\n    ).then((res) => {\r\n      this.setState({\r\n        models: res as Array<ModelObject>,\r\n      });\r\n    });\r\n  };\r\n  getValidAssets = (currDatacenter: DatacenterObject) => {\r\n    this.gettingAssetsInProgress = true;\r\n\r\n    let body = {};\r\n    const filters: Array<IFilter> = [];\r\n    let datacenterName;\r\n    if (currDatacenter) {\r\n      if (currDatacenter.name !== ALL_DATACENTERS.name) {\r\n        datacenterName = currDatacenter.name;\r\n        filters.push({\r\n          id: \"\",\r\n          field: \"rack__datacenter__name\",\r\n          filter_type: FilterTypes.TEXT,\r\n          filter: { value: datacenterName, match_type: TextFilterTypes.EXACT },\r\n        });\r\n        body = updateObject(body, { filters });\r\n      }\r\n    }\r\n\r\n    this.getElementData(\r\n      ElementType.ASSET,\r\n      1,\r\n      PagingTypes.ALL,\r\n      body,\r\n      this.props.token\r\n    ).then((res) => {\r\n      let assetsWithHostname: Array<AssetObject> = res as Array<AssetObject>;\r\n      assetsWithHostname = assetsWithHostname.filter((asset) => {\r\n        if (\r\n          asset.hostname === \"\" ||\r\n          asset.hostname === this.state.values.hostname\r\n        ) {\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n\r\n      this.setState({\r\n        assets: assetsWithHostname as Array<AssetObject>,\r\n      });\r\n      this.gettingAssetsInProgress = false;\r\n    });\r\n  };\r\n  getPowerButtonStatus = (side: PowerSide, port: number) => {\r\n    if (\r\n      this.state.values.power_connections &&\r\n      this.state.values.power_connections[port]\r\n    ) {\r\n      const portString = (port as unknown) as string;\r\n      return (\r\n        side === this.state.values.power_connections[portString].left_right\r\n      );\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  shouldDisablePowerPort = (port: number) => {\r\n    if (!this.state.values.rack) {\r\n      return true;\r\n    }\r\n    return !(\r\n      this.state.values.power_connections &&\r\n      this.state.values.power_connections[port]\r\n    );\r\n  };\r\n  getPortsForSide = (port: number) => {\r\n    let side;\r\n    // console.log(this.state.values.power_connections, this.state.power_ports);\r\n    if (\r\n      this.state.values.power_connections &&\r\n      this.state.values.power_connections[port] &&\r\n      Object.keys(this.state.power_ports).length > 0\r\n    ) {\r\n      const portString = (port as unknown) as string;\r\n      side = this.state.values.power_connections[portString].left_right;\r\n\r\n      if (side === PowerSide.LEFT) {\r\n        return this.state.power_ports.left_available.map(String);\r\n      } else {\r\n        return this.state.power_ports.right_available.map(String);\r\n      }\r\n    }\r\n    return [];\r\n  };\r\n  setDefaultPortValues = (port: number, status: boolean) => {\r\n    const power_connections = this.state.values.power_connections;\r\n    if (status) {\r\n      if (port === 1) {\r\n        power_connections[port] = updateObject(power_connections, {\r\n          left_right: PowerSide.LEFT,\r\n          port_number: this.state.power_ports.left_suggest,\r\n        });\r\n        this.setState({\r\n          values: updateObject(this.state.values, {\r\n            power_connections,\r\n          }),\r\n        });\r\n      } else if (port === 2) {\r\n        power_connections[port] = updateObject(power_connections, {\r\n          left_right: PowerSide.RIGHT,\r\n          port_number: this.state.power_ports.right_suggest,\r\n        });\r\n        this.setState({\r\n          values: updateObject(this.state.values, {\r\n            power_connections,\r\n          }),\r\n        });\r\n      }\r\n    } else {\r\n      power_connections[port] = updateObject(power_connections, {\r\n        left_right: undefined,\r\n        port_number: undefined,\r\n      });\r\n      this.setState({\r\n        values: updateObject(this.state.values, {\r\n          power_connections,\r\n        }),\r\n      });\r\n    }\r\n  };\r\n\r\n  changeCheckBoxState = (port: number, state: boolean) => {\r\n    const power_ports_default = {\r\n      ...this.state.power_ports_default,\r\n    };\r\n\r\n    power_ports_default[port] = state;\r\n    this.setState({\r\n      power_ports_default: power_ports_default,\r\n    });\r\n  };\r\n  getClearedPowerSelections() {\r\n    if (\r\n      this.state.values.model &&\r\n      this.state.values.model.num_power_ports &&\r\n      parseInt(this.state.values.model.num_power_ports, 10) > 0 &&\r\n      this.state.values.power_connections\r\n    ) {\r\n      const num_power_ports = parseInt(\r\n        this.state.values.model.num_power_ports,\r\n        10\r\n      );\r\n      const power_connections = this.state.values.power_connections;\r\n      for (let i = 1; i <= num_power_ports; i++) {\r\n        power_connections[i] = {} as PowerConnection;\r\n      }\r\n      return power_connections;\r\n    }\r\n    return {};\r\n  }\r\n\r\n  clearPowerSelection = (port: number) => {\r\n    const power_connections = this.state.values.power_connections;\r\n    if (power_connections && power_connections[port]) {\r\n      this.changeCheckBoxState(port, false);\r\n\r\n      power_connections[port] = {} as PowerConnection;\r\n\r\n      this.setState({\r\n        values: updateObject(this.state.values, {\r\n          power_connections,\r\n        }),\r\n      });\r\n    }\r\n  };\r\n  getPowerPortFields = () => {\r\n    if (\r\n      this.state.values.model &&\r\n      this.state.values.model.num_power_ports &&\r\n      parseInt(this.state.values.model.num_power_ports, 10) > 0\r\n    ) {\r\n      const num_power_ports = parseInt(\r\n        this.state.values.model.num_power_ports,\r\n        10\r\n      );\r\n      const port_fields = [];\r\n      for (let i = 1; i <= num_power_ports; i++) {\r\n        port_fields.push(\r\n          <div className=\"power-form-container\">\r\n            <div>\r\n              <i className=\"section-title\">Power Port: {i}</i>\r\n\r\n              {i === 1 || i === 2 ? (\r\n                <div>\r\n                  <Checkbox\r\n                    className=\"checkbox\"\r\n                    disabled={isNullOrUndefined(this.state.values.rack)}\r\n                    checked={this.state.power_ports_default[i]}\r\n                    label=\"Use Suggested Values \"\r\n                    onChange={(event: any) => {\r\n                      this.setDefaultPortValues(\r\n                        i,\r\n                        !this.state.power_ports_default[i]\r\n                      );\r\n                      this.changeCheckBoxState(\r\n                        i,\r\n                        !this.state.power_ports_default[i]\r\n                      );\r\n                    }}\r\n                  />\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n\r\n            <div>\r\n              <ButtonGroup\r\n                className=\"power-form-element\"\r\n                fill={false}\r\n                style={{ marginTop: 5 }}\r\n              >\r\n                <Button\r\n                  active={this.getPowerButtonStatus(PowerSide.LEFT, i)}\r\n                  text=\"Left\"\r\n                  disabled={isNullOrUndefined(this.state.values.rack)}\r\n                  onClick={(e: any) => {\r\n                    const power_connections = this.state.values\r\n                      .power_connections;\r\n                    if (power_connections) {\r\n                      power_connections[i] = updateObject(\r\n                        power_connections[i],\r\n                        {\r\n                          left_right: PowerSide.LEFT,\r\n                          port_number: null,\r\n                        }\r\n                      );\r\n                      this.changeCheckBoxState(i, false);\r\n                      this.setState({\r\n                        values: updateObject(this.state.values, {\r\n                          power_connections,\r\n                        }),\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n\r\n                <Button\r\n                  active={this.getPowerButtonStatus(PowerSide.RIGHT, i)}\r\n                  text=\"Right\"\r\n                  disabled={isNullOrUndefined(this.state.values.rack)}\r\n                  onClick={(e: any) => {\r\n                    const power_connections = this.state.values\r\n                      .power_connections;\r\n                    power_connections[i] = updateObject(power_connections[i], {\r\n                      left_right: PowerSide.RIGHT,\r\n                      port_number: null,\r\n                    });\r\n                    this.changeCheckBoxState(i, false);\r\n                    this.setState({\r\n                      values: updateObject(this.state.values, {\r\n                        power_connections,\r\n                      }),\r\n                    });\r\n                  }}\r\n                />\r\n\r\n                <StringSelect\r\n                  className=\"power-form-element\"\r\n                  popoverProps={{\r\n                    minimal: true,\r\n                    popoverClassName: \"dropdown\",\r\n                    usePortal: true,\r\n                  }}\r\n                  disabled={this.shouldDisablePowerPort(i)}\r\n                  items={this.getPortsForSide(i)}\r\n                  onItemSelect={(port: string) => {\r\n                    this.changeCheckBoxState(i, false);\r\n                    const power_connections = this.state.values\r\n                      .power_connections;\r\n                    power_connections[i] = updateObject(power_connections[i], {\r\n                      port_number: port,\r\n                    });\r\n                    this.setState({\r\n                      values: updateObject(this.state.values, {\r\n                        power_connections,\r\n                      }),\r\n                    });\r\n                  }}\r\n                  itemRenderer={renderStringItem}\r\n                  itemPredicate={filterString}\r\n                  noResults={<MenuItem disabled={true} text=\"No results.\" />}\r\n                >\r\n                  <Button\r\n                    disabled={this.shouldDisablePowerPort(i)}\r\n                    rightIcon=\"caret-down\"\r\n                    text={\r\n                      this.state.values.power_connections &&\r\n                      this.state.values.power_connections[i] &&\r\n                      this.state.values.power_connections[i].port_number\r\n                        ? this.state.values.power_connections[i].port_number\r\n                        : \"PDU Port\"\r\n                    }\r\n                  />\r\n                </StringSelect>\r\n                <Button\r\n                  icon={IconNames.DELETE}\r\n                  minimal\r\n                  onClick={() => {\r\n                    this.clearPowerSelection(i);\r\n                  }}\r\n                />\r\n              </ButtonGroup>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n      return port_fields;\r\n    }\r\n  };\r\n\r\n  getValidDatacenters() {\r\n    return this.props.datacenters.filter(\r\n      (datacenter) => datacenter !== ALL_DATACENTERS\r\n    );\r\n  }\r\n\r\n  handleDatacenterSelect(datacenter: DatacenterObject) {\r\n    const clearedNetworkConnections = this.getClearedNetworkConnections();\r\n    const clearedPowerConnections = this.getClearedPowerSelections();\r\n    const newValues = updateObject(this.state.values, {\r\n      rack: undefined,\r\n      power_connections: clearedPowerConnections,\r\n      network_connections: clearedNetworkConnections,\r\n    });\r\n\r\n    this.setState({\r\n      currDatacenter: datacenter,\r\n      values: newValues,\r\n    });\r\n\r\n    this.getValidAssets(datacenter);\r\n    this.getRacks(datacenter);\r\n  }\r\n\r\n  handleRackSelect(rack: RackObject) {\r\n    const clearedPowerConnections = this.getClearedPowerSelections();\r\n    this.setState({\r\n      values: updateObject(this.state.values, {\r\n        rack: rack,\r\n        power_connections: clearedPowerConnections,\r\n      }),\r\n    });\r\n\r\n    this.getPowerPortAvailability(rack);\r\n  }\r\n  handleNetworkConnectionAssetSelection(\r\n    source_port: string,\r\n    destination_hostname: string | undefined\r\n  ) {\r\n    const newNetworkConnection: NetworkConnection = {\r\n      source_port,\r\n      destination_hostname,\r\n      destination_port: null,\r\n    };\r\n    let modification = false;\r\n    let networkConnections: Array<NetworkConnection> = [];\r\n    if (this.state.values.network_connections) {\r\n      networkConnections = this.state.values.network_connections.slice();\r\n\r\n      networkConnections = networkConnections.map(\r\n        (connection: NetworkConnection) => {\r\n          if (connection.source_port === source_port) {\r\n            modification = true;\r\n            return updateObject(connection, {\r\n              destination_hostname: destination_hostname,\r\n              destination_port: null,\r\n            });\r\n          } else {\r\n            return connection;\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      networkConnections = [] as Array<NetworkConnection>;\r\n    }\r\n\r\n    if (!modification) {\r\n      //add a new network connection\r\n      networkConnections.push(newNetworkConnection);\r\n    }\r\n\r\n    this.setState({\r\n      values: updateObject(this.state.values, {\r\n        network_connections: networkConnections,\r\n      }),\r\n    });\r\n  }\r\n\r\n  getClearedNetworkConnections() {\r\n    if (this.state.values.network_connections) {\r\n      return this.state.values.network_connections.map(\r\n        (connection: NetworkConnection) => {\r\n          return updateObject(connection, {\r\n            destination_hostname: null,\r\n            destination_port: null,\r\n          });\r\n        }\r\n      );\r\n    }\r\n    return [];\r\n  }\r\n  clearNetworkConnectionSelection(source_port: string) {\r\n    let networkConnections: Array<NetworkConnection> = [];\r\n    if (this.state.values.network_connections) {\r\n      networkConnections = this.state.values.network_connections.slice();\r\n\r\n      networkConnections = networkConnections.map(\r\n        (connection: NetworkConnection) => {\r\n          if (connection.source_port === source_port) {\r\n            return updateObject(connection, {\r\n              destination_hostname: null,\r\n              destination_port: null,\r\n            });\r\n          } else {\r\n            return connection;\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      networkConnections = [] as Array<NetworkConnection>;\r\n    }\r\n\r\n    this.setState({\r\n      values: updateObject(this.state.values, {\r\n        network_connections: networkConnections,\r\n      }),\r\n    });\r\n  }\r\n  handleNetworkConnectionPortSelection(\r\n    source_port: string,\r\n    destination_port: string | undefined\r\n  ) {\r\n    let networkConnections: Array<NetworkConnection> = [];\r\n    if (this.state.values.network_connections) {\r\n      networkConnections = this.state.values.network_connections.slice();\r\n\r\n      networkConnections = networkConnections.map(\r\n        (connection: NetworkConnection) => {\r\n          if (connection.source_port === source_port) {\r\n            return updateObject(connection, { destination_port });\r\n          } else {\r\n            return connection;\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      networkConnections = [] as Array<NetworkConnection>;\r\n    }\r\n\r\n    this.setState({\r\n      values: updateObject(this.state.values, {\r\n        network_connections: networkConnections,\r\n      }),\r\n    });\r\n  }\r\n  getSelectedPort = (source_port: string) => {\r\n    if (this.state.values.network_connections) {\r\n      const connection = this.state.values.network_connections.find(\r\n        (connection: NetworkConnection) =>\r\n          connection.source_port === source_port\r\n      );\r\n      if (connection) {\r\n        return connection.destination_port;\r\n      }\r\n    }\r\n  };\r\n  getSelectedNetworkConnectionAsset(source_port: string) {\r\n    if (this.state.values.network_connections) {\r\n      const connection = this.state.values.network_connections.find(\r\n        (connection: NetworkConnection) =>\r\n          connection.source_port === source_port\r\n      );\r\n      if (connection) {\r\n        return connection.destination_hostname;\r\n      }\r\n    }\r\n  }\r\n\r\n  getAssetObjectFromHostname(hostname: string): AssetObject | void {\r\n    return this.state.assets.find(\r\n      (asset: AssetObject) => asset.hostname === hostname\r\n    );\r\n  }\r\n\r\n  getPortsFromHostname(hostname: string) {\r\n    const asset = this.getAssetObjectFromHostname(hostname);\r\n    if (isAssetObject(asset)) {\r\n      return asset.model.network_ports ? asset.model.network_ports : [];\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n  getChangeWarningAlert() {\r\n    return (\r\n      <Alert\r\n        className={Classes.DARK}\r\n        cancelButtonText=\"Cancel\"\r\n        confirmButtonText=\"Change\"\r\n        intent={Intent.WARNING}\r\n        icon={IconNames.WARNING_SIGN}\r\n        isOpen={this.state.isAlertOpen}\r\n        onCancel={this.handleChangeDecline}\r\n        onConfirm={this.handleChangeAccept}\r\n      >\r\n        <p>{this.state.warningMessage}</p>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  handleChangeDecline = () => {\r\n    this.setState({\r\n      isAlertOpen: false,\r\n    });\r\n  };\r\n\r\n  showChangeWarningAlert(warningMessage: string, selectedValue: any) {\r\n    this.setState({\r\n      warningMessage,\r\n      selectedValue,\r\n      isAlertOpen: true,\r\n    });\r\n  }\r\n\r\n  handleChangeAccept = () => {\r\n    if (\r\n      this.state.selectedValue &&\r\n      isDatacenterObject(this.state.selectedValue)\r\n    ) {\r\n      this.handleDatacenterSelect(this.state.selectedValue!);\r\n    }\r\n    if (this.state.selectedValue && isRackObject(this.state.selectedValue)) {\r\n      this.handleRackSelect(this.state.selectedValue!);\r\n    }\r\n    this.setState({\r\n      isAlertOpen: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.models.length === 0) {\r\n      this.getModels();\r\n    }\r\n    if (this.state.users.length === 0) {\r\n      this.getUsers();\r\n    }\r\n\r\n    if (\r\n      this.state.currDatacenter &&\r\n      this.state.currDatacenter !== ALL_DATACENTERS &&\r\n      !this.initialGetRacks\r\n    ) {\r\n      this.getRacks(this.state.currDatacenter);\r\n    }\r\n\r\n    const { values } = this.state;\r\n    return (\r\n      <div className={Classes.DARK + \" login-container\"}>\r\n        {this.getChangeWarningAlert()}\r\n        {this.state.errors.map((err: string) => {\r\n          return <Callout intent={Intent.DANGER}>{err}</Callout>;\r\n        })}\r\n        <form onSubmit={this.handleSubmit} className=\"create-form \">\r\n          <Card>\r\n            <FormGroup\r\n              label={\r\n                <div className=\"text-with-tooltip\">\r\n                  {\" \"}\r\n                  {AssetFormLabels.asset_number}{\" \"}\r\n                  <Tooltip\r\n                    className=\"tooltip-icon\"\r\n                    content={\r\n                      \"If no asset number provided, will be autogenerated on creation\"\r\n                    }\r\n                  >\r\n                    <Icon icon={IconNames.INFO_SIGN} />\r\n                  </Tooltip>{\" \"}\r\n                </div>\r\n              }\r\n              inline={false}\r\n            >\r\n              <Field\r\n                placeholder=\"asset_number\"\r\n                onChange={this.handleChange}\r\n                value={values.asset_number}\r\n                field=\"asset_number\"\r\n              />\r\n            </FormGroup>\r\n            <FormGroup label={AssetFormLabels.hostname} inline={false}>\r\n              <Field\r\n                placeholder=\"hostname\"\r\n                onChange={this.handleChange}\r\n                value={values.hostname}\r\n                field=\"hostname\"\r\n              />\r\n            </FormGroup>\r\n          </Card>\r\n          <Card>\r\n            <FormGroup label={AssetFormLabels.datacenter} inline={false}>\r\n              <DatacenterSelect\r\n                popoverProps={{\r\n                  minimal: true,\r\n                  popoverClassName: \"dropdown\",\r\n                  usePortal: true,\r\n                }}\r\n                items={this.getValidDatacenters()}\r\n                onItemSelect={(datacenter: DatacenterObject) => {\r\n                  this.state.currDatacenter\r\n                    ? this.showChangeWarningAlert(\r\n                        \"Are you sure you want to change datacenter? This will clear all datacenter related properties\",\r\n                        datacenter\r\n                      )\r\n                    : this.handleDatacenterSelect(datacenter);\r\n                }}\r\n                itemRenderer={renderDatacenterItem}\r\n                itemPredicate={filterDatacenter}\r\n                noResults={<MenuItem disabled={true} text=\"No results.\" />}\r\n              >\r\n                <Button\r\n                  rightIcon=\"caret-down\"\r\n                  text={\r\n                    this.state.currDatacenter && this.state.currDatacenter.name\r\n                      ? this.state.currDatacenter.name\r\n                      : \"Select a Datacenter\"\r\n                  }\r\n                />\r\n              </DatacenterSelect>\r\n            </FormGroup>\r\n          </Card>\r\n          <Collapse\r\n            isOpen={!isNullOrUndefined(this.state.currDatacenter)}\r\n            keepChildrenMounted={true}\r\n          >\r\n            <Card>\r\n              <FormGroup label={AssetFormLabels.rack} inline={false}>\r\n                <RackSelect\r\n                  popoverProps={{\r\n                    minimal: true,\r\n                    popoverClassName: \"dropdown\",\r\n                    usePortal: true,\r\n                  }}\r\n                  items={this.state.racks}\r\n                  onItemSelect={(rack: RackObject) => {\r\n                    this.state.values.rack\r\n                      ? this.showChangeWarningAlert(\r\n                          \"Are you sure you want to change rack? This will clear all rack related fields\",\r\n                          rack\r\n                        )\r\n                      : this.handleRackSelect(rack);\r\n                  }}\r\n                  itemRenderer={renderRackItem}\r\n                  itemPredicate={filterRack}\r\n                  noResults={\r\n                    this.gettingRacksInProgress ? (\r\n                      <div>\r\n                        <Spinner intent=\"primary\" size={Spinner.SIZE_SMALL} />\r\n                        <MenuItem disabled={true} text=\"Getting all racks\" />\r\n                      </div>\r\n                    ) : (\r\n                      <MenuItem disabled={true} text=\"No available racks\" />\r\n                    )\r\n                  }\r\n                >\r\n                  <Button\r\n                    rightIcon=\"caret-down\"\r\n                    text={\r\n                      this.state.values.rack\r\n                        ? this.state.values.rack.row_letter +\r\n                          +this.state.values.rack.rack_num\r\n                        : \"Select a rack\"\r\n                    }\r\n                  />\r\n                </RackSelect>\r\n              </FormGroup>\r\n              <FormGroup label={AssetFormLabels.rack_position} inline={false}>\r\n                <Field\r\n                  field=\"rack_position\"\r\n                  placeholder=\"rack_position\"\r\n                  value={values.rack_position}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </FormGroup>\r\n            </Card>\r\n            <Card>\r\n              <FormGroup label={AssetFormLabels.model} inline={false}>\r\n                <ModelSelect\r\n                  className=\"select\"\r\n                  popoverProps={{\r\n                    minimal: true,\r\n                    popoverClassName: \"dropdown\",\r\n                    usePortal: true,\r\n                  }}\r\n                  disabled={!isNullOrUndefined(this.initialState.model)}\r\n                  items={this.state.models}\r\n                  onItemSelect={(model: ModelObject) =>\r\n                    this.setState({\r\n                      values: updateObject(values, { model: model }),\r\n                    })\r\n                  }\r\n                  itemRenderer={renderModelItem}\r\n                  itemPredicate={filterModel}\r\n                  noResults={<MenuItem disabled={true} text=\"No results.\" />}\r\n                >\r\n                  <Button\r\n                    rightIcon=\"caret-down\"\r\n                    disabled={!isNullOrUndefined(this.initialState.model)}\r\n                    text={\r\n                      this.state.values.model\r\n                        ? this.state.values.model.vendor +\r\n                          \" \" +\r\n                          this.state.values.model.model_number\r\n                        : \"Select a model\"\r\n                    }\r\n                  />\r\n                </ModelSelect>\r\n              </FormGroup>\r\n            </Card>\r\n            <Collapse\r\n              isOpen={\r\n                values.model &&\r\n                values.model.network_ports &&\r\n                values.model.network_ports.length !== 0\r\n              }\r\n            >\r\n              {!(\r\n                values.model &&\r\n                values.model.network_ports &&\r\n                values.model.network_ports.length !== 0\r\n              ) ? null : (\r\n                <Card>\r\n                  <FormGroup\r\n                    label={AssetFormLabels.network_ports}\r\n                    inline={false}\r\n                  >\r\n                    {values.model.network_ports.map((port, index) => {\r\n                      return (\r\n                        <div className=\"power-form-container\">\r\n                          <i className=\"section-title\">\r\n                            {\"Network Port: \" + port}\r\n                          </i>\r\n                          <div>\r\n                            <div className=\"text-with-tooltip\">\r\n                              {\"Mac Address \"}\r\n                              <Tooltip\r\n                                className=\"tooltip-icon\"\r\n                                content={macAddressInfo}\r\n                              >\r\n                                <Icon icon={IconNames.INFO_SIGN} />\r\n                              </Tooltip>\r\n                            </div>\r\n                            <InputGroup\r\n                              value={values.mac_addresses[port]}\r\n                              type=\"string\"\r\n                              className=\"network-name\"\r\n                              onChange={(e: any) => {\r\n                                const mac_addresses = values.mac_addresses;\r\n                                mac_addresses[port] = e.currentTarget.value;\r\n\r\n                                this.setState({\r\n                                  values: updateObject(this.state.values, {\r\n                                    mac_addresses,\r\n                                  }),\r\n                                });\r\n                              }}\r\n                            />\r\n                          </div>\r\n                          <FormGroup\r\n                            label=\"Add Network Connection\"\r\n                            inline={false}\r\n                          >\r\n                            <AssetSelect\r\n                              className=\"select\"\r\n                              popoverProps={{\r\n                                minimal: true,\r\n                                popoverClassName: \"dropdown\",\r\n                                usePortal: true,\r\n                              }}\r\n                              items={this.state.assets}\r\n                              onItemSelect={(asset: AssetObject) => {\r\n                                this.handleNetworkConnectionAssetSelection(\r\n                                  port,\r\n                                  asset.hostname\r\n                                );\r\n                              }}\r\n                              itemRenderer={renderAssetItem}\r\n                              itemPredicate={filterAsset}\r\n                              noResults={\r\n                                this.gettingAssetsInProgress ? (\r\n                                  <div>\r\n                                    <Spinner\r\n                                      intent=\"primary\"\r\n                                      size={Spinner.SIZE_SMALL}\r\n                                    />\r\n                                    <MenuItem\r\n                                      disabled={true}\r\n                                      text=\"Getting all available assets\"\r\n                                    />\r\n                                  </div>\r\n                                ) : (\r\n                                  <MenuItem\r\n                                    disabled={true}\r\n                                    text=\"No available assets\"\r\n                                  />\r\n                                )\r\n                              }\r\n                            >\r\n                              <Button\r\n                                rightIcon=\"caret-down\"\r\n                                text={\r\n                                  this.getSelectedNetworkConnectionAsset(port)\r\n                                    ? this.getSelectedNetworkConnectionAsset(\r\n                                        port\r\n                                      )\r\n                                    : \"Select Asset\"\r\n                                }\r\n                              />\r\n                            </AssetSelect>\r\n\r\n                            <StringSelect\r\n                              popoverProps={{\r\n                                minimal: true,\r\n                                popoverClassName: \"dropdown\",\r\n                                usePortal: true,\r\n                              }}\r\n                              disabled={\r\n                                this.getSelectedNetworkConnectionAsset(port)\r\n                                  ? false\r\n                                  : true\r\n                              }\r\n                              items={\r\n                                this.getSelectedNetworkConnectionAsset(port)\r\n                                  ? this.getPortsFromHostname(\r\n                                      this.getSelectedNetworkConnectionAsset(\r\n                                        port\r\n                                      )!\r\n                                    )\r\n                                  : []\r\n                              }\r\n                              onItemSelect={(dest_port: string) => {\r\n                                this.handleNetworkConnectionPortSelection(\r\n                                  port,\r\n                                  dest_port\r\n                                );\r\n                              }}\r\n                              itemRenderer={renderStringItem}\r\n                              itemPredicate={filterString}\r\n                              noResults={\r\n                                this.gettingAssetsInProgress ? (\r\n                                  <div>\r\n                                    <Spinner\r\n                                      intent=\"primary\"\r\n                                      size={Spinner.SIZE_SMALL}\r\n                                    />\r\n                                    <MenuItem\r\n                                      disabled={true}\r\n                                      text=\"Getting available network ports\"\r\n                                    />\r\n                                  </div>\r\n                                ) : (\r\n                                  <MenuItem\r\n                                    disabled={true}\r\n                                    text=\"No available network ports\"\r\n                                  />\r\n                                )\r\n                              }\r\n                            >\r\n                              <Button\r\n                                disabled={\r\n                                  this.getSelectedNetworkConnectionAsset(port)\r\n                                    ? false\r\n                                    : true\r\n                                }\r\n                                rightIcon=\"caret-down\"\r\n                                text={\r\n                                  this.getSelectedPort(port)\r\n                                    ? this.getSelectedPort(port)\r\n                                    : \"Select Port\"\r\n                                }\r\n                              />\r\n                            </StringSelect>\r\n                            <Button\r\n                              icon={IconNames.DELETE}\r\n                              minimal\r\n                              onClick={() => {\r\n                                this.clearNetworkConnectionSelection(port);\r\n                              }}\r\n                            />\r\n                          </FormGroup>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </FormGroup>\r\n                </Card>\r\n              )}\r\n            </Collapse>\r\n\r\n            <Collapse\r\n              isOpen={\r\n                this.state.values.model &&\r\n                !isNullOrUndefined(this.state.values.model.num_power_ports)\r\n              }\r\n            >\r\n              {this.state.values.model &&\r\n              this.state.values.model.num_power_ports &&\r\n              parseInt(this.state.values.model.num_power_ports, 10) > 0 ? (\r\n                <Card>\r\n                  <FormGroup\r\n                    label={AssetFormLabels.power_connections}\r\n                    inline={false}\r\n                  >\r\n                    {this.getPowerPortFields()}\r\n                  </FormGroup>\r\n                </Card>\r\n              ) : null}\r\n            </Collapse>\r\n          </Collapse>\r\n\r\n          <Card>\r\n            <FormGroup label={AssetFormLabels.owner} inline={false}>\r\n              <StringSelect\r\n                popoverProps={{\r\n                  minimal: true,\r\n                  popoverClassName: \"dropdown\",\r\n                  usePortal: true,\r\n                }}\r\n                items={this.state.users}\r\n                onItemSelect={(owner: string) =>\r\n                  this.setState({\r\n                    values: updateObject(values, { owner: owner }),\r\n                  })\r\n                }\r\n                itemRenderer={renderStringItem}\r\n                itemPredicate={filterString}\r\n                noResults={<MenuItem disabled={true} text=\"No results.\" />}\r\n              >\r\n                <Button\r\n                  rightIcon=\"caret-down\"\r\n                  text={\r\n                    this.state.values.owner\r\n                      ? this.state.values.owner\r\n                      : \"Select an owner\"\r\n                  }\r\n                />\r\n              </StringSelect>\r\n            </FormGroup>\r\n            <FormGroup label={AssetFormLabels.comment} inline={false}>\r\n              <textarea\r\n                className={Classes.INPUT}\r\n                placeholder=\"comment\"\r\n                value={values.comment}\r\n                onChange={(e: any) =>\r\n                  this.handleChange({ comment: e.currentTarget.value })\r\n                }\r\n              ></textarea>\r\n            </FormGroup>\r\n          </Card>\r\n          <Button className=\"login-button\" type=\"submit\">\r\n            {this.state.loading ? \"Submitting...\" : \"Submit\"}\r\n          </Button>\r\n          <div></div>\r\n          {this.state.loading ? (\r\n            <Spinner intent=\"primary\" size={Spinner.SIZE_SMALL} />\r\n          ) : null}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n    changePlan: state.changePlan,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(AssetForm);\r\n","import {\r\n  Button,\r\n  Callout,\r\n  Classes,\r\n  FormGroup,\r\n  Intent,\r\n  MenuItem,\r\n  InputGroup,\r\n  Spinner,\r\n} from \"@blueprintjs/core\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport axios from \"axios\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { API_ROOT } from \"../utils/api-config\";\r\nimport { ModelObject } from \"../utils/utils\";\r\nimport { updateObject } from \"../store/utility\";\r\nimport Field from \"./field\";\r\nimport \"./forms.scss\";\r\nimport $ from \"jquery\";\r\nimport {\r\n  filterString,\r\n  renderStringItem,\r\n  StringSuggest,\r\n  FormTypes,\r\n} from \"./formUtils\";\r\n\r\n//TO DO : add validation of types!!!\r\nvar console: any = {};\r\nconsole.log = function () {};\r\n\r\ninterface ModelFormProps {\r\n  token: string;\r\n  type: FormTypes;\r\n  initialValues?: ModelObject;\r\n  submitForm(model: ModelObject, headers: any): Promise<any> | void;\r\n}\r\ninterface ModelFormState {\r\n  values: ModelObject;\r\n  vendors: Array<string>;\r\n  errors: Array<string>;\r\n  networkPortsTemp: Array<string>;\r\n  loading: boolean;\r\n}\r\n\r\nexport const required = (\r\n  values: ModelObject,\r\n  fieldName: keyof ModelObject\r\n): string =>\r\n  values[fieldName] === undefined ||\r\n  values[fieldName] === null ||\r\n  values[fieldName] === \"\"\r\n    ? \"This must be populated\"\r\n    : \"\";\r\n\r\nclass ModelForm extends React.Component<ModelFormProps, ModelFormState> {\r\n  initialState: ModelObject = this.props.initialValues\r\n    ? JSON.parse(JSON.stringify(this.props.initialValues))\r\n    : ({} as ModelObject);\r\n\r\n  public state = {\r\n    values: this.initialState,\r\n    vendors: [],\r\n    loading: false,\r\n    errors: [],\r\n    networkPortsTemp: this.initialState.network_ports\r\n      ? this.initialState.network_ports\r\n      : [],\r\n  };\r\n  headers = {\r\n    headers: {\r\n      Authorization: \"Token \" + this.props.token,\r\n    },\r\n  };\r\n\r\n  private handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    if (this.state.values) {\r\n      this.setState({\r\n        errors: [],\r\n        loading: true,\r\n      });\r\n      if (this.props.initialValues) {\r\n        this.setState({\r\n          values: updateObject(this.state.values, {\r\n            id: this.props.initialValues.id,\r\n          }),\r\n        });\r\n      }\r\n\r\n      const resp = this.props.submitForm(this.state.values, this.headers);\r\n      if (resp) {\r\n        resp.then((res) =>\r\n          this.setState({\r\n            loading: false,\r\n          })\r\n        );\r\n        resp.catch((err) => {\r\n          $(\".bp3-overlay-scroll-container\").scrollTop(0);\r\n          let errors: Array<string> = this.state.errors;\r\n          errors.push(err.response.data.failure_message as string);\r\n          this.setState({\r\n            errors: errors,\r\n            loading: false,\r\n          });\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  private getVendors() {\r\n    axios\r\n      //.get(\"https://rack-city-dev.herokuapp.com/api/\" + path)\r\n      .get(API_ROOT + \"api/models/vendors\", this.headers)\r\n      .then((res) => {\r\n        const vendors: Array<string> = res.data.vendors;\r\n        this.setState({\r\n          vendors: vendors,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  handleChange = (field: { [key: string]: any }) => {\r\n    let network_ports: Array<string> = this.state.values.network_ports\r\n      ? this.state.values.network_ports\r\n      : [];\r\n    console.log(\"new change\", field);\r\n    if (field[\"num_network_ports\"]) {\r\n      let num_network_ports = field[\"num_network_ports\"];\r\n      console.log(num_network_ports, network_ports);\r\n      let index = network_ports.length;\r\n      if (!isNaN(num_network_ports) && num_network_ports < 0) {\r\n        num_network_ports = 0;\r\n      }\r\n\r\n      while (network_ports.length < num_network_ports) {\r\n        console.log(index, this.state.networkPortsTemp.length);\r\n        if (index < this.state.networkPortsTemp.length) {\r\n          network_ports.push(this.state.networkPortsTemp[index]);\r\n        } else {\r\n          network_ports.push(((index + 1) as unknown) as string);\r\n        }\r\n        index++;\r\n      }\r\n      while (network_ports.length > num_network_ports) {\r\n        network_ports.pop();\r\n      }\r\n    } else if (field[\"num_network_ports\"] === \"\") {\r\n      console.log(network_ports);\r\n      this.setState({\r\n        networkPortsTemp: network_ports,\r\n      });\r\n      network_ports = [];\r\n    }\r\n\r\n    this.setState({\r\n      values: updateObject(this.state.values, {\r\n        ...field,\r\n        network_ports,\r\n      }),\r\n    });\r\n\r\n    console.log(this.props.initialValues);\r\n    console.log(this.state.values);\r\n  };\r\n\r\n  handleNetworkPortNameChange = (index: number, name: string) => {\r\n    const network_ports: Array<string> = this.state.values.network_ports\r\n      ? this.state.values.network_ports\r\n      : [];\r\n    network_ports[index] = name;\r\n    this.setState({\r\n      values: updateObject(this.state.values, {\r\n        ...network_ports,\r\n      }),\r\n    });\r\n  };\r\n  selectText = (event: any) => event.target.select();\r\n  componentDidMount = () => {\r\n    $(\".suggest\").keydown(function (event) {\r\n      if (event.keyCode === 13) {\r\n        event.preventDefault();\r\n        return false;\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.vendors.length === 0) {\r\n      this.getVendors();\r\n    }\r\n    const { values } = this.state;\r\n    console.log(\"vendor\", this.state.values.vendor);\r\n    return (\r\n      <div className={Classes.DARK + \" login-container\"}>\r\n        {this.state.errors.map((err: string) => {\r\n          return <Callout intent={Intent.DANGER}>{err}</Callout>;\r\n        })}\r\n        <form\r\n          onSubmit={this.handleSubmit}\r\n          className=\"create-model-form bp3-form-group\"\r\n        >\r\n          <FormGroup className=\"suggest\" label=\"Vendor (required)\">\r\n            <StringSuggest\r\n              inputProps={{\r\n                placeholder: \"vendor\",\r\n              }}\r\n              popoverProps={{\r\n                minimal: true,\r\n                popoverClassName: \"dropdown\",\r\n                usePortal: true,\r\n              }}\r\n              defaultSelectedItem={this.state.values.vendor}\r\n              inputValueRenderer={(vendor: string) => this.state.values.vendor}\r\n              items={this.state.vendors}\r\n              onItemSelect={(vendor: string) => {\r\n                console.log(\"item selected \");\r\n                this.setState({\r\n                  values: updateObject(values, { vendor: vendor }),\r\n                });\r\n              }}\r\n              onQueryChange={(vendor: string) => {\r\n                console.log(\"CHANGE\", vendor);\r\n                this.setState({\r\n                  values: updateObject(values, { vendor: vendor }),\r\n                });\r\n              }}\r\n              itemRenderer={renderStringItem}\r\n              itemPredicate={filterString}\r\n              noResults={<MenuItem disabled={true} text=\"No results.\" />}\r\n            />\r\n          </FormGroup>\r\n\r\n          <FormGroup label=\"Model Number (required)\" inline={false}>\r\n            <Field\r\n              placeholder=\"model_number\"\r\n              onChange={this.handleChange}\r\n              value={values.model_number}\r\n              field=\"model_number\"\r\n            />\r\n          </FormGroup>\r\n          <FormGroup label=\"Height (required)\" inline={false}>\r\n            <Field\r\n              field=\"height\"\r\n              placeholder=\"height\"\r\n              value={values.height}\r\n              onChange={this.handleChange}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup label=\"Display Color\">\r\n            <Field\r\n              field=\"display_color\"\r\n              type=\"color\"\r\n              value={values.display_color ? values.display_color : \"#394B59\"}\r\n              onChange={this.handleChange}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup label=\"Number of Network Ports \" inline={false}>\r\n            <Field\r\n              field=\"num_network_ports\"\r\n              value={values.num_network_ports}\r\n              onChange={this.handleChange}\r\n            />\r\n\r\n            {!(\r\n              values.network_ports && values.network_ports.length !== 0\r\n            ) ? null : (\r\n              <table className=\"port-table\">\r\n                <thead>\r\n                  <th>Port Name(s) </th>\r\n                </thead>\r\n                <tbody>\r\n                  {values.network_ports.map((port, index) => {\r\n                    return (\r\n                      <tr>\r\n                        <td>\r\n                          <InputGroup\r\n                            onClick={this.selectText}\r\n                            value={port}\r\n                            type=\"string\"\r\n                            className=\"network-name\"\r\n                            onChange={(e: any) =>\r\n                              this.handleNetworkPortNameChange(\r\n                                index,\r\n                                e.currentTarget.value\r\n                              )\r\n                            }\r\n                          />\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            )}\r\n\r\n            {/* <Field\r\n              field=\"num_ethernet_ports\"\r\n              placeholder=\"num_ethernet_ports\"\r\n              value={values.num_ethernet_ports}\r\n              onChange={this.handleChange}\r\n            /> */}\r\n          </FormGroup>\r\n          <FormGroup label=\"# Power Ports\" inline={false}>\r\n            <Field\r\n              field=\"num_power_ports\"\r\n              placeholder=\"num_power_ports\"\r\n              value={values.num_power_ports}\r\n              onChange={this.handleChange}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup label=\"CPU\" inline={false}>\r\n            <Field\r\n              field=\"cpu\"\r\n              placeholder=\"cpu\"\r\n              value={values.cpu}\r\n              onChange={this.handleChange}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup label=\"Memory(GB)\" inline={false}>\r\n            <Field\r\n              field=\"memory_gb\"\r\n              placeholder=\"memory_gb\"\r\n              value={values.memory_gb}\r\n              onChange={this.handleChange}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup label=\"Storage\" inline={false}>\r\n            <Field\r\n              field=\"storage\"\r\n              placeholder=\"storage\"\r\n              value={values.storage}\r\n              onChange={this.handleChange}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup label=\"Comment\" inline={false}>\r\n            <textarea\r\n              className={Classes.INPUT}\r\n              placeholder=\"comment\"\r\n              value={values.comment}\r\n              onChange={(e: any) =>\r\n                this.handleChange({ comment: e.currentTarget.value })\r\n              }\r\n            ></textarea>\r\n          </FormGroup>\r\n\r\n          <Button className=\"login-button\" type=\"submit\">\r\n            {this.state.loading ? \"Submitting...\" : \"Submit\"}\r\n          </Button>\r\n          <div></div>\r\n          {this.state.loading ? (\r\n            <Spinner intent=\"primary\" size={Spinner.SIZE_SMALL} />\r\n          ) : null}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(ModelForm);\r\n// const WrappedCreateModelForm = Form.create()(CreateModelForm);\r\n\r\n// export default connect(mapStateToProps)(WrappedCreateModelForm);\r\n","import { Button, Callout, Classes, FormGroup, Intent } from \"@blueprintjs/core\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { DatacenterObject } from \"../utils/utils\";\r\nimport { updateObject } from \"../store/utility\";\r\nimport Field from \"./field\";\r\nimport \"./forms.scss\";\r\nimport { FormTypes } from \"./formUtils\";\r\n\r\n//TO DO : add validation of types!!!\r\nvar console: any = {};\r\nconsole.log = function () {};\r\n\r\nexport interface DatacenterFormProps {\r\n  token: string;\r\n  type: FormTypes;\r\n  initialValues?: DatacenterObject;\r\n  submitForm(model: DatacenterObject, headers: any): Promise<any> | void;\r\n}\r\ninterface DatacenterFormState {\r\n  values: DatacenterObject;\r\n  errors: Array<string>;\r\n}\r\n\r\nexport const required = (\r\n  values: DatacenterObject,\r\n  fieldName: keyof DatacenterObject\r\n): string =>\r\n  values[fieldName] === undefined ||\r\n  values[fieldName] === null ||\r\n  values[fieldName] === \"\"\r\n    ? \"This must be populated\"\r\n    : \"\";\r\n\r\nclass DatacenterForm extends React.Component<\r\n  DatacenterFormProps,\r\n  DatacenterFormState\r\n> {\r\n  initialState: DatacenterObject = this.props.initialValues\r\n    ? this.props.initialValues\r\n    : ({} as DatacenterObject);\r\n  public state = {\r\n    values: this.initialState,\r\n    errors: [],\r\n  };\r\n  headers = {\r\n    headers: {\r\n      Authorization: \"Token \" + this.props.token,\r\n    },\r\n  };\r\n\r\n  private handleSubmit = (e: any) => {\r\n    this.setState({\r\n      errors: [],\r\n    });\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n    if (this.state.values) {\r\n      if (this.props.initialValues) {\r\n        console.log(this.props.initialValues);\r\n        this.setState({\r\n          values: updateObject(this.state.values, {\r\n            id: this.props.initialValues.id,\r\n          }),\r\n        });\r\n      }\r\n\r\n      const resp = this.props.submitForm(this.state.values, this.headers);\r\n      if (resp) {\r\n        resp.catch((err) => {\r\n          console.log(err.response.data.failure_message);\r\n          let errors: Array<string> = this.state.errors;\r\n          errors.push(err.response.data.failure_message as string);\r\n          this.setState({\r\n            errors: errors,\r\n          });\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleChange = (field: { [key: string]: any }) => {\r\n    this.setState({\r\n      values: updateObject(this.state.values, {\r\n        ...field,\r\n      }),\r\n    });\r\n  };\r\n  selectText = (event: any) => event.target.select();\r\n\r\n  render() {\r\n    const { values } = this.state;\r\n    return (\r\n      <div className={Classes.DARK + \" login-container\"}>\r\n        {this.state.errors.map((err: string) => {\r\n          return <Callout intent={Intent.DANGER}>{err}</Callout>;\r\n        })}\r\n        <form\r\n          onSubmit={this.handleSubmit}\r\n          className=\"create-form bp3-form-group\"\r\n        >\r\n          <FormGroup label=\"Name*\" inline={false}>\r\n            <Field\r\n              field=\"name\"\r\n              placeholder=\"name\"\r\n              value={values.name}\r\n              onChange={this.handleChange}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup label=\"Abbreviation* (up to 6 characters)\" inline={false}>\r\n            <Field\r\n              placeholder=\"abbreviation\"\r\n              onChange={this.handleChange}\r\n              value={values.abbreviation}\r\n              field=\"abbreviation\"\r\n            />\r\n          </FormGroup>\r\n\r\n          <Button className=\"login-button\" type=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(DatacenterForm);\r\n// const WrappedCreateModelForm = Form.create()(CreateModelForm);\r\n\r\n// export default connect(mapStateToProps)(WrappedCreateModelForm);\r\n","import {\r\n  Button,\r\n  Callout,\r\n  Classes,\r\n  InputGroup,\r\n  Intent,\r\n} from \"@blueprintjs/core\";\r\nimport { Form } from \"antd\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { CreateUserObject, getHeaders } from \"../../utils/utils\";\r\nimport \"./login.scss\";\r\n\r\nconst FormItem = Form.Item;\r\ninterface RegistrationFormProps {\r\n  loading: boolean;\r\n  error: string;\r\n  token: string;\r\n}\r\n\r\ninterface RegistrationFormSubmitProps {\r\n  authSignup(user: CreateUserObject, headers: any): Promise<any> | void;\r\n}\r\nvar console: any = {};\r\nconsole.log = function () {};\r\n\r\ninterface RegistrationFormState {\r\n  errors: Array<string>;\r\n  confirmDirty: boolean;\r\n}\r\n\r\nclass RegistrationForm extends React.Component<\r\n  RegistrationFormProps &\r\n    FormComponentProps &\r\n    RegistrationFormSubmitProps &\r\n    RouteComponentProps,\r\n  RegistrationFormState\r\n> {\r\n  public state = {\r\n    confirmDirty: false,\r\n    errors: [],\r\n  };\r\n\r\n  handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    this.props.form.validateFieldsAndScroll((err, values) => {\r\n      console.log(\"calling authSignup\");\r\n      const user: CreateUserObject = {\r\n        username: values.userName,\r\n        email: values.email,\r\n        first_name: values.firstName,\r\n        last_name: values.lastName,\r\n        password1: values.password,\r\n        password2: values.confirm,\r\n      };\r\n      if (!err) {\r\n        const resp = this.props.authSignup(user, getHeaders(this.props.token));\r\n        if (resp) {\r\n          resp.catch((err) => {\r\n            console.log(err);\r\n            let errors: Array<string> = [];\r\n\r\n            Object.entries(err.response.data).forEach(([field, error]) => {\r\n              errors.push(field + \": \" + error);\r\n            });\r\n\r\n            this.setState({\r\n              errors: errors,\r\n            });\r\n            console.log(errors);\r\n            // dispatch(authFail(err));\r\n          });\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  handleConfirmBlur = (e: { target: { value: any } }) => {\r\n    const value = e.target.value;\r\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n  };\r\n\r\n  compareToFirstPassword = (\r\n    rule: any,\r\n    value: any,\r\n    callback: { (arg0: string): void; (): void }\r\n  ) => {\r\n    const form = this.props.form;\r\n    if (value && value !== form.getFieldValue(\"password\")) {\r\n      callback(\"Two passwords that you enter is inconsistent!\");\r\n    } else {\r\n      callback();\r\n    }\r\n  };\r\n\r\n  validateToNextPassword = (rule: any, value: any, callback: () => void) => {\r\n    const form = this.props.form;\r\n    if (value && this.state.confirmDirty) {\r\n      form.validateFields([\"confirm\"], { force: true });\r\n    }\r\n    callback();\r\n  };\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n\r\n    return (\r\n      <div className={Classes.DARK + \" login-container\"}>\r\n        {this.state.errors.map((err: string) => {\r\n          return <Callout intent={Intent.DANGER}>{err}</Callout>;\r\n        })}\r\n        <Form\r\n          onSubmit={this.handleSubmit}\r\n          className=\"login-form .bp3-form-group\"\r\n        >\r\n          <h2>Add a new user</h2>\r\n          <FormItem label=\"Username*\">\r\n            {getFieldDecorator(\"userName\", {\r\n              rules: [\r\n                { required: true, message: \"Please input your username!\" },\r\n              ],\r\n            })(<InputGroup placeholder=\"Username\" />)}\r\n          </FormItem>\r\n          <FormItem label=\"First Name*\">\r\n            {getFieldDecorator(\"firstName\", {\r\n              rules: [\r\n                { required: true, message: \"Please input your first name!\" },\r\n              ],\r\n            })(<InputGroup placeholder=\"first name\" />)}\r\n          </FormItem>\r\n          <FormItem label=\"Last Name*\">\r\n            {getFieldDecorator(\"lastName\", {\r\n              rules: [\r\n                { required: true, message: \"Please input your last name!\" },\r\n              ],\r\n            })(<InputGroup placeholder=\"last name\" />)}\r\n          </FormItem>\r\n\r\n          <FormItem label=\"Email*\">\r\n            {getFieldDecorator(\"email\", {\r\n              rules: [\r\n                {\r\n                  type: \"email\",\r\n                  message: \"The input is not valid E-mail!\",\r\n                },\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your E-mail!\",\r\n                },\r\n              ],\r\n            })(<InputGroup placeholder=\"email\" />)}\r\n          </FormItem>\r\n\r\n          <FormItem label=\"Password*\">\r\n            {getFieldDecorator(\"password\", {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your password!\",\r\n                },\r\n                {\r\n                  validator: this.validateToNextPassword,\r\n                },\r\n              ],\r\n            })(<InputGroup type=\"password\" placeholder=\"Password\" />)}\r\n          </FormItem>\r\n\r\n          <FormItem label=\"Password Confirmation*\">\r\n            {getFieldDecorator(\"confirm\", {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"Please confirm your password!\",\r\n                },\r\n                {\r\n                  validator: this.compareToFirstPassword,\r\n                },\r\n              ],\r\n            })(\r\n              <InputGroup\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                onBlur={this.handleConfirmBlur}\r\n              />\r\n            )}\r\n          </FormItem>\r\n\r\n          <FormItem>\r\n            <Button className=\"login-button\" type=\"submit\">\r\n              Add\r\n            </Button>\r\n          </FormItem>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst WrappedRegistrationForm = Form.create()(withRouter(RegistrationForm));\r\n\r\nfunction addProps(RegForm: any) {\r\n  return class extends React.Component<RegistrationFormSubmitProps> {\r\n    render() {\r\n      return <RegForm {...this.props} />;\r\n    }\r\n  };\r\n}\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    loading: state.loading,\r\n    error: state.error,\r\n    token: state.token,\r\n  };\r\n};\r\n\r\nexport default addProps(connect(mapStateToProps)(WrappedRegistrationForm));\r\n","import * as React from \"react\";\r\n\r\nimport { ChangePlan, getHeaders } from \"../utils/utils\";\r\nimport { updateObject } from \"../store/utility\";\r\nimport { Classes, Intent, Callout, FormGroup, Button } from \"@blueprintjs/core\";\r\nimport Field from \"./field\";\r\nimport { connect } from \"react-redux\";\r\n\r\ninterface ChangePlanFormProps {\r\n  token: string;\r\n  initialValues?: ChangePlan;\r\n  submitForm(changePlan: ChangePlan, headers: any): Promise<any> | void;\r\n}\r\ninterface ChangePlanFormState {\r\n  values: ChangePlan;\r\n  errors: Array<string>;\r\n}\r\n\r\nclass ChangePlanForm extends React.Component<\r\n  ChangePlanFormProps,\r\n  ChangePlanFormState\r\n> {\r\n  initialState: ChangePlan = this.props.initialValues\r\n    ? JSON.parse(JSON.stringify(this.props.initialValues))\r\n    : ({} as ChangePlan);\r\n\r\n  public state = {\r\n    values: this.initialState,\r\n    errors: [],\r\n  };\r\n  handleChange = (field: { [key: string]: any }) => {\r\n    this.setState({\r\n      values: updateObject(this.state.values, {\r\n        ...field,\r\n      }),\r\n    });\r\n  };\r\n  private handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    if (this.state.values) {\r\n      this.setState({\r\n        errors: [],\r\n      });\r\n      if (this.props.initialValues) {\r\n        this.setState({\r\n          values: updateObject(this.state.values, {\r\n            id: this.props.initialValues.id,\r\n          }),\r\n        });\r\n      }\r\n\r\n      const resp = this.props.submitForm(\r\n        this.state.values,\r\n        getHeaders(this.props.token)\r\n      );\r\n      if (resp) {\r\n        resp.catch((err) => {\r\n          let errors: Array<string> = this.state.errors;\r\n          errors.push(err.response.data.failure_message as string);\r\n          this.setState({\r\n            errors: errors,\r\n          });\r\n        });\r\n      }\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className={Classes.DARK + \" login-container\"}>\r\n        {this.state.errors.map((err: string) => {\r\n          return <Callout intent={Intent.DANGER}>{err}</Callout>;\r\n        })}\r\n        <form\r\n          onSubmit={this.handleSubmit}\r\n          className=\"create-form bp3-form-group\"\r\n        >\r\n          <FormGroup label=\"Change Plan Name\">\r\n            <Field\r\n              field=\"name\"\r\n              value={this.state.values.name}\r\n              onChange={this.handleChange}\r\n            />\r\n          </FormGroup>\r\n          <Button className=\"login-button\" type=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(ChangePlanForm);\r\n","import {\r\n  Button,\r\n  Callout,\r\n  Classes,\r\n  FormGroup,\r\n  Intent,\r\n  Toaster,\r\n  IToastProps,\r\n  Checkbox,\r\n  Radio,\r\n  RadioGroup,\r\n  Alignment,\r\n  Spinner,\r\n  Position,\r\n} from \"@blueprintjs/core\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport {\r\n  getHeaders,\r\n  UserPermissionsObject,\r\n  DatacenterObject,\r\n} from \"../utils/utils\";\r\nimport \"./forms.scss\";\r\nimport { FormTypes } from \"./formUtils\";\r\nimport { API_ROOT } from \"../utils/api-config\";\r\nimport { modifyUser } from \"../components/elementView/elementUtils\";\r\n\r\nvar console: any = {};\r\nconsole.log = function () {};\r\n\r\nexport interface UserFormProps {\r\n  userId: string;\r\n  token: string;\r\n  type?: FormTypes;\r\n  submitForm: Function;\r\n}\r\ninterface UserFormState {\r\n  initialValues: UserPermissionsObject;\r\n  errors: Array<string>;\r\n  permissions: UserPermissionsObject;\r\n  datacenters: Array<DatacenterObject>;\r\n  datacenter_selection: string;\r\n  show_asset_options: boolean;\r\n  loading: boolean;\r\n}\r\n\r\nclass UserForm extends React.Component<UserFormProps, UserFormState> {\r\n  private toaster: Toaster = {} as Toaster;\r\n  private addToast(toast: IToastProps) {\r\n    toast.timeout = 5000;\r\n    this.toaster.show(toast);\r\n  }\r\n\r\n  private refHandlers = {\r\n    toaster: (ref: Toaster) => (this.toaster = ref),\r\n  };\r\n\r\n  public state = {\r\n    initialValues: {\r\n      model_management: false,\r\n      asset_management: false,\r\n      power_control: false,\r\n      audit_read: false,\r\n      admin: false,\r\n      datacenter_permissions: [] as Array<string>,\r\n    },\r\n    errors: [] as Array<string>,\r\n    permissions: {\r\n      model_management: false,\r\n      asset_management: false,\r\n      power_control: false,\r\n      audit_read: false,\r\n      admin: false,\r\n      datacenter_permissions: [\"\"] as Array<string>,\r\n    },\r\n    datacenters: [] as Array<DatacenterObject>,\r\n    datacenter_selection: \"Global\",\r\n    loading: true,\r\n    show_asset_options: false,\r\n  };\r\n\r\n  private handleSubmit = (e: any) => {\r\n    if (!this.state.show_asset_options) {\r\n      var updatedPermissions = this.state.permissions;\r\n      updatedPermissions.asset_management = false;\r\n      updatedPermissions.datacenter_permissions = [] as Array<string>;\r\n      this.setState({\r\n        permissions: updatedPermissions,\r\n      });\r\n    }\r\n    this.setState({\r\n      errors: [],\r\n    });\r\n    e.preventDefault();\r\n    console.log(\"submitting\");\r\n    console.log(this.state);\r\n    const body = {\r\n      id: this.props.userId,\r\n      model_management: this.state.permissions.model_management,\r\n      asset_management: this.state.permissions.asset_management,\r\n      power_control: this.state.permissions.power_control,\r\n      audit_read: this.state.permissions.audit_read,\r\n      admin: this.state.permissions.admin,\r\n      datacenter_permissions: this.state.permissions.datacenter_permissions,\r\n    };\r\n    modifyUser(body, getHeaders(this.props.token))\r\n      .then(this.props.submitForm())\r\n      .catch((err) => {\r\n        console.log(err.response.data.failure_message);\r\n        let errors: Array<string> = this.state.errors;\r\n        errors.push(err.response.data.failure_message as string);\r\n        this.setState({\r\n          errors: errors,\r\n        });\r\n      });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getDatacenters()\r\n      .then((res) => {\r\n        var data = res.datacenters as Array<DatacenterObject>;\r\n        data.sort(this.compare);\r\n        this.setState({\r\n          datacenters: data,\r\n        });\r\n        this.getUserPermissions(this.props.userId);\r\n      })\r\n      .catch((err) => {\r\n        this.addToast({\r\n          message: err.response.data.failure_message,\r\n          intent: Intent.DANGER,\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state);\r\n    return (\r\n      <div>\r\n        <Toaster\r\n          autoFocus={false}\r\n          canEscapeKeyClear={true}\r\n          position={Position.TOP}\r\n          ref={this.refHandlers.toaster}\r\n        />\r\n        {this.state.loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <div className={Classes.DARK + \" login-container\"}>\r\n            {this.state.errors.map((err: string) => {\r\n              return <Callout intent={Intent.DANGER}>{err}</Callout>;\r\n            })}\r\n            <h2>Select permissions to grant this user</h2>\r\n            <form\r\n              onSubmit={this.handleSubmit}\r\n              className=\"create-form bp3-form-group\"\r\n            >\r\n              <FormGroup inline={true}>\r\n                <Checkbox\r\n                  label=\"Administrator\"\r\n                  alignIndicator={Alignment.LEFT}\r\n                  checked={this.state.permissions.admin}\r\n                  onChange={() => {\r\n                    let updatedPermissions: UserPermissionsObject;\r\n                    updatedPermissions = {\r\n                      model_management: this.state.permissions.model_management,\r\n                      asset_management: this.state.permissions.asset_management,\r\n                      power_control: this.state.permissions.power_control,\r\n                      audit_read: this.state.permissions.audit_read,\r\n                      admin: !this.state.permissions.admin,\r\n                      datacenter_permissions: this.state.permissions\r\n                        .datacenter_permissions,\r\n                    };\r\n                    this.setState({\r\n                      permissions: updatedPermissions,\r\n                      show_asset_options: false,\r\n                    });\r\n                  }}\r\n                ></Checkbox>\r\n              </FormGroup>\r\n              <FormGroup inline={true}>\r\n                <Checkbox\r\n                  label=\"Model Management\"\r\n                  alignIndicator={Alignment.LEFT}\r\n                  checked={\r\n                    this.state.permissions.admin\r\n                      ? true\r\n                      : this.state.permissions.model_management\r\n                  }\r\n                  disabled={this.state.permissions.admin}\r\n                  onChange={() => {\r\n                    this.setState({\r\n                      permissions: this.updateBooleanPermissions(\r\n                        \"model_management\"\r\n                      ),\r\n                    });\r\n                  }}\r\n                ></Checkbox>\r\n              </FormGroup>\r\n              <FormGroup inline={true}>\r\n                <Checkbox\r\n                  label=\"Power Control\"\r\n                  alignIndicator={Alignment.LEFT}\r\n                  checked={\r\n                    this.state.permissions.admin\r\n                      ? true\r\n                      : this.state.permissions.power_control\r\n                  }\r\n                  disabled={this.state.permissions.admin}\r\n                  onChange={() => {\r\n                    this.setState({\r\n                      permissions: this.updateBooleanPermissions(\r\n                        \"power_control\"\r\n                      ),\r\n                    });\r\n                  }}\r\n                ></Checkbox>\r\n              </FormGroup>\r\n              <FormGroup inline={true}>\r\n                <Checkbox\r\n                  label=\"Audit Log\"\r\n                  checked={\r\n                    this.state.permissions.admin\r\n                      ? true\r\n                      : this.state.permissions.audit_read\r\n                  }\r\n                  alignIndicator={Alignment.LEFT}\r\n                  disabled={this.state.permissions.admin}\r\n                  onChange={() => {\r\n                    this.setState({\r\n                      permissions: this.updateBooleanPermissions(\"audit_read\"),\r\n                    });\r\n                  }}\r\n                ></Checkbox>\r\n              </FormGroup>\r\n              <FormGroup inline={true}>\r\n                <Checkbox\r\n                  label=\"Asset Management\"\r\n                  checked={\r\n                    this.state.permissions.admin\r\n                      ? true\r\n                      : this.state.show_asset_options\r\n                  }\r\n                  alignIndicator={Alignment.LEFT}\r\n                  disabled={this.state.permissions.admin}\r\n                  onChange={() => {\r\n                    this.setState({\r\n                      show_asset_options: !this.state.show_asset_options,\r\n                    });\r\n                  }}\r\n                ></Checkbox>\r\n              </FormGroup>\r\n              {this.state.show_asset_options ? (\r\n                <RadioGroup\r\n                  inline={true}\r\n                  label=\"Asset permissions\"\r\n                  onChange={() => {\r\n                    console.log(\"changing datacenter\");\r\n                    console.log(this.state);\r\n                    var updatedPermissions = this.state.permissions;\r\n                    if (this.state.datacenter_selection === \"Global\") {\r\n                      updatedPermissions.datacenter_permissions = this.state.initialValues.datacenter_permissions;\r\n                      updatedPermissions.asset_management = false;\r\n                      this.setState({\r\n                        datacenter_selection: \"Per Datacenter\",\r\n                        permissions: updatedPermissions,\r\n                      });\r\n                    } else {\r\n                      let permissions: Array<string>;\r\n                      permissions = [];\r\n                      for (var i = 0; i < this.state.datacenters.length; i++) {\r\n                        permissions.push(this.state.datacenters[i].id);\r\n                      }\r\n                      updatedPermissions.datacenter_permissions = permissions;\r\n                      updatedPermissions.asset_management = this.state.show_asset_options;\r\n                      this.setState({\r\n                        datacenter_selection: \"Global\",\r\n                        permissions: updatedPermissions,\r\n                      });\r\n                    }\r\n                  }}\r\n                  selectedValue={this.state.datacenter_selection}\r\n                >\r\n                  <Radio label=\"Global\" value=\"Global\" />\r\n                  <Radio label=\"Per Datacenter\" value=\"Per Datacenter\" />\r\n                </RadioGroup>\r\n              ) : null}\r\n              {this.state.show_asset_options &&\r\n              this.state.datacenter_selection === \"Per Datacenter\"\r\n                ? this.renderDatacenterChecks()\r\n                : null}\r\n              <Button className=\"login-button\" type=\"submit\">\r\n                Submit\r\n              </Button>\r\n            </form>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private compare(a: DatacenterObject, b: DatacenterObject) {\r\n    if (a.name < b.name) {\r\n      return -1;\r\n    }\r\n    if (a.name > b.name) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  private renderDatacenterChecks() {\r\n    var checks: Array<any>;\r\n    checks = [];\r\n    for (var i = 0; i < this.state.datacenters.length; i++) {\r\n      checks.push(this.renderDatacenter(this.state.datacenters[i]));\r\n    }\r\n    return checks;\r\n  }\r\n\r\n  private renderDatacenter(datacenter: DatacenterObject) {\r\n    console.log(\r\n      this.state.permissions.datacenter_permissions.includes(datacenter.id)\r\n    );\r\n    return (\r\n      <FormGroup key={datacenter.name} inline={true}>\r\n        <Checkbox\r\n          label={datacenter.name}\r\n          alignIndicator={Alignment.LEFT}\r\n          checked={this.state.permissions.datacenter_permissions.includes(\r\n            datacenter.id\r\n          )}\r\n          onChange={() => {\r\n            console.log(datacenter);\r\n            var updatedPermissions = this.state.permissions;\r\n            if (\r\n              this.state.permissions.datacenter_permissions.includes(\r\n                datacenter.id\r\n              )\r\n            ) {\r\n              const index = this.state.permissions.datacenter_permissions.indexOf(\r\n                datacenter.id\r\n              );\r\n              updatedPermissions.datacenter_permissions.splice(index, 1);\r\n            } else {\r\n              updatedPermissions.datacenter_permissions.push(datacenter.id);\r\n            }\r\n            this.setState({\r\n              permissions: updatedPermissions,\r\n            });\r\n          }}\r\n        ></Checkbox>\r\n      </FormGroup>\r\n    );\r\n  }\r\n\r\n  private getDatacenters() {\r\n    const body = {\r\n      sort_by: [],\r\n      filters: [],\r\n    };\r\n    return axios\r\n      .post(\r\n        API_ROOT + \"api/datacenters/get-many\",\r\n        body,\r\n        getHeaders(this.props.token)\r\n      )\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .catch((err) => {\r\n        this.addToast({\r\n          message: err.response.data.failure_message,\r\n          intent: Intent.DANGER,\r\n        });\r\n      });\r\n  }\r\n\r\n  private getUserPermissions(id: string) {\r\n    const body = {\r\n      id: id,\r\n    };\r\n    axios\r\n      .post(\r\n        API_ROOT + \"api/users/permissions/get\",\r\n        body,\r\n        getHeaders(this.props.token)\r\n      )\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        this.setState({\r\n          initialValues: res.data,\r\n          permissions: res.data,\r\n        });\r\n        if (res.data.asset_management) {\r\n          this.setState({\r\n            datacenter_selection: \"Global\",\r\n          });\r\n        } else {\r\n          this.setState({\r\n            datacenter_selection: \"Per Datacenter\",\r\n          });\r\n        }\r\n        this.setState({\r\n          loading: false,\r\n          show_asset_options:\r\n            this.state.permissions.asset_management ||\r\n            this.state.permissions.datacenter_permissions.length > 0,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        this.addToast({\r\n          message: err.response.data.failure_message,\r\n          intent: Intent.DANGER,\r\n        });\r\n      });\r\n  }\r\n\r\n  private updateBooleanPermissions(field: string) {\r\n    let permissions: UserPermissionsObject;\r\n    permissions = this.state.permissions;\r\n    permissions[field] = !permissions[field];\r\n    return permissions;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(UserForm);\r\n","import { Classes, Dialog } from \"@blueprintjs/core\";\r\nimport * as React from \"react\";\r\nimport {\r\n  ElementObjectType,\r\n  ElementType,\r\n  isAssetObject,\r\n  isModelObject,\r\n  FormObjectType,\r\n  isDatacenterObject,\r\n  DatacenterObject,\r\n  isChangePlanObject,\r\n} from \"../utils/utils\";\r\nimport { ALL_DATACENTERS } from \"../components/elementView/elementTabContainer\";\r\nimport RackSelectView from \"../components/elementView/rackSelectView\";\r\nimport AssetForm from \"./assetForm\";\r\nimport ModelForm from \"./modelForm\";\r\nimport DatacenterForm from \"./datacenterForm\";\r\nimport WrappedRegistrationForm from \"./auth/register\";\r\nimport { FormTypes } from \"./formUtils\";\r\nimport ChangePlanForm from \"./changePlanForm\";\r\nimport UserForm from \"./userForm\";\r\n\r\ninterface FormPopupState {}\r\ninterface FormPopupProps {\r\n  isOpen: boolean;\r\n  type: FormTypes;\r\n  loading?: boolean;\r\n  datacenters?: Array<DatacenterObject>;\r\n  currDatacenter?: DatacenterObject;\r\n  initialValues?: ElementObjectType;\r\n  userId?: string;\r\n  elementName: ElementType;\r\n  handleClose(): void;\r\n  submitForm(element: FormObjectType, headers: any): Promise<any> | void;\r\n}\r\n\r\nvar console: any = {};\r\nconsole.log = function () {};\r\nclass FormPopup extends React.Component<FormPopupProps, FormPopupState> {\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        className={Classes.DARK}\r\n        usePortal={true}\r\n        enforceFocus={true}\r\n        canEscapeKeyClose={true}\r\n        canOutsideClickClose={true}\r\n        isOpen={this.props.isOpen}\r\n        onClose={this.props.handleClose}\r\n        title={this.props.type + \" \" + this.props.elementName.slice(0, -1)}\r\n      >\r\n        {this.props.elementName === ElementType.MODEL ? (\r\n          <ModelForm\r\n            type={FormTypes.CREATE}\r\n            submitForm={this.props.submitForm}\r\n            initialValues={\r\n              isModelObject(this.props.initialValues)\r\n                ? this.props.initialValues\r\n                : undefined\r\n            }\r\n          />\r\n        ) : null}\r\n        {this.props.elementName === ElementType.ASSET ? (\r\n          <AssetForm\r\n            datacenters={this.props.datacenters ? this.props.datacenters : []}\r\n            currDatacenter={\r\n              this.props.currDatacenter\r\n                ? this.props.currDatacenter\r\n                : ALL_DATACENTERS\r\n            }\r\n            isOpen={this.props.isOpen}\r\n            type={FormTypes.CREATE}\r\n            submitForm={this.props.submitForm}\r\n            initialValues={\r\n              isAssetObject(this.props.initialValues)\r\n                ? this.props.initialValues\r\n                : undefined\r\n            }\r\n          />\r\n        ) : null}\r\n        {this.props.elementName === ElementType.RACK ? (\r\n          <RackSelectView\r\n            loading={this.props.loading}\r\n            submitForm={this.props.submitForm}\r\n          />\r\n        ) : null}\r\n        {this.props.elementName === ElementType.USER && !this.props.userId ? (\r\n          <WrappedRegistrationForm authSignup={this.props.submitForm} />\r\n        ) : null}\r\n        {this.props.elementName === ElementType.DATACENTER ? (\r\n          <DatacenterForm\r\n            type={FormTypes.CREATE}\r\n            submitForm={this.props.submitForm}\r\n            initialValues={\r\n              isDatacenterObject(this.props.initialValues)\r\n                ? this.props.initialValues\r\n                : undefined\r\n            }\r\n          />\r\n        ) : null}\r\n        {this.props.elementName === ElementType.CHANGEPLANS ? (\r\n          <ChangePlanForm\r\n            submitForm={this.props.submitForm}\r\n            initialValues={\r\n              isChangePlanObject(this.props.initialValues)\r\n                ? this.props.initialValues\r\n                : undefined\r\n            }\r\n          />\r\n        ) : null}\r\n        {this.props.elementName === ElementType.USER && this.props.userId ? (\r\n          <UserForm\r\n            userId={this.props.userId} // change to dynamic id\r\n            submitForm={() => {\r\n              this.props.submitForm({} as FormObjectType, {});\r\n            }}\r\n          />\r\n        ) : null}\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormPopup;\r\n","import { Classes } from \"@blueprintjs/core\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport * as React from \"react\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport {\r\n  AssetFieldsTable,\r\n  ElementObjectType,\r\n  getChangePlanRowStyle,\r\n  isAssetObject,\r\n  isModelObject,\r\n  isObject,\r\n  ModelFieldsTable,\r\n  ROUTES,\r\n  ChangePlan,\r\n} from \"../../../utils/utils\";\r\nimport \"./propertiesView.scss\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport interface AlertState {\r\n  isDeleteOpen: boolean;\r\n  fields: Array<string>;\r\n}\r\n// var console: any = {};\r\n// console.log = function() {};\r\n\r\ninterface PropertiesViewProps {\r\n  data: ElementObjectType;\r\n  changePlan: ChangePlan;\r\n}\r\n\r\nclass PropertiesView extends React.PureComponent<\r\n  RouteComponentProps & PropertiesViewProps,\r\n  AlertState\r\n> {\r\n  setFieldNamesFromData = () => {\r\n    let fields: Array<string> = [];\r\n    Object.keys(this.props.data).forEach((col: string) => {\r\n      if (\r\n        col !== \"id\" &&\r\n        col !== \"power_connections\" &&\r\n        col !== \"mac_addresses\" &&\r\n        col !== \"network_connections\" &&\r\n        col !== \"network_graph\" &&\r\n        col !== \"decommissioned_id\" &&\r\n        col !== \"decommissioning_user\" &&\r\n        col !== \"time_decommissioned\"\r\n      ) {\r\n        fields.push(col);\r\n      }\r\n    });\r\n    return fields;\r\n  };\r\n  public state: AlertState = {\r\n    isDeleteOpen: false,\r\n    fields: this.setFieldNamesFromData(),\r\n  };\r\n\r\n  renderData(fields: Array<any>, data: any) {\r\n    return fields.map((item: string) => {\r\n      if (item === \"display_color\") {\r\n        var dat;\r\n        dat = (\r\n          <p\r\n            className=\"color\"\r\n            style={{\r\n              backgroundColor: data[item],\r\n            }}\r\n          >\r\n            {data[item]}\r\n          </p>\r\n        );\r\n      } else if (item === \"network_ports\") {\r\n        if (data[item]) {\r\n          const network_ports: Array<string> = data[item];\r\n          dat = <p>{network_ports.toString()}</p>;\r\n        }\r\n      } else if (item === \"model\") {\r\n        const isDecommissioned = data[\"decommissioning_user\"];\r\n        dat = (\r\n          <p\r\n            className={isDecommissioned ? undefined : \"model-link\"}\r\n            onClick={\r\n              isDecommissioned\r\n                ? undefined\r\n                : () =>\r\n                    this.props.history.push(ROUTES.MODELS + \"/\" + data[item].id)\r\n            }\r\n          >\r\n            {data[item].vendor + \" \" + data[item].model_number}\r\n          </p>\r\n        );\r\n      } else if (item === \"rack\") {\r\n        return [\r\n          <tr>\r\n            <td key={item}>\r\n              <p className=\"label\">{AssetFieldsTable[item]}:</p>\r\n            </td>\r\n\r\n            <td style={getChangePlanRowStyle(data)}>\r\n              {\" \"}\r\n              <p>{data[item].row_letter + \"\" + data[item].rack_num}</p>\r\n            </td>\r\n          </tr>,\r\n          <tr>\r\n            <td key={\"datacenter\"}>\r\n              <p className=\"label\">\r\n                {AssetFieldsTable[\"rack__datacenter__name\"]}:\r\n              </p>\r\n            </td>\r\n\r\n            <td style={getChangePlanRowStyle(data)}>\r\n              {\" \"}\r\n              <p>{data[item].datacenter.name}</p>\r\n            </td>\r\n          </tr>,\r\n        ];\r\n      } else if (item === \"comment\") {\r\n        dat = <p className=\"comment\">{data[item]}</p>;\r\n      } else if (!isObject(data[item])) {\r\n        //TO DO: decide how to render dicts\r\n        dat = <p>{data[item]}</p>;\r\n      }\r\n\r\n      if (isAssetObject(this.props.data)) {\r\n        return AssetFieldsTable[item] ? (\r\n          <tr>\r\n            <td key={item}>\r\n              <p className=\"label\">{AssetFieldsTable[item]}:</p>\r\n            </td>\r\n\r\n            <td style={getChangePlanRowStyle(data)}>{dat}</td>\r\n          </tr>\r\n        ) : null;\r\n      }\r\n      if (isModelObject(this.props.data)) {\r\n        return (\r\n          <tr>\r\n            <td key={item}>\r\n              <p className=\"label\">{ModelFieldsTable[item]}:</p>\r\n            </td>\r\n\r\n            <td>{dat}</td>\r\n          </tr>\r\n        );\r\n      } else {\r\n        return (\r\n          <tr>\r\n            <td key={item}>\r\n              <p className=\"label\">{item}:</p>\r\n            </td>\r\n\r\n            <td>{dat}</td>\r\n          </tr>\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  public render() {\r\n    if (\r\n      this.state.fields.length === 0 &&\r\n      Object.keys(this.props.data).length !== 0\r\n    ) {\r\n      this.setState({\r\n        fields: this.setFieldNamesFromData(),\r\n      });\r\n    }\r\n    const length = Math.ceil(this.state.fields.length / 4);\r\n\r\n    return (\r\n      <div className={Classes.DARK + \" propsview\"}>\r\n        <h3>Properties</h3>\r\n        {Object.keys(this.props.data).length !== 0 ? (\r\n          <div className=\"propsdetail\">\r\n            <div className=\"props-column\">\r\n              <table className=\"bp3-html-table\">\r\n                {this.renderData(\r\n                  this.state.fields.slice(0, length),\r\n                  this.props.data\r\n                )}\r\n              </table>\r\n            </div>\r\n            <div className=\"props-column\">\r\n              <table className=\"bp3-html-table\">\r\n                {this.renderData(\r\n                  this.state.fields.slice(length, 2 * length),\r\n                  this.props.data\r\n                )}\r\n              </table>\r\n            </div>\r\n            <div className=\"props-column\">\r\n              <table className=\"bp3-html-table\">\r\n                {this.renderData(\r\n                  this.state.fields.slice(2 * length, 3 * length),\r\n                  this.props.data\r\n                )}\r\n              </table>\r\n            </div>\r\n            <div className=\"props-column\">\r\n              <table className=\"bp3-html-table\">\r\n                {this.renderData(\r\n                  this.state.fields.slice(3 * length),\r\n                  this.props.data\r\n                )}\r\n              </table>\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    changePlan: state.changePlan,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(withRouter(PropertiesView));\r\n","import { Classes } from \"@blueprintjs/core\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport * as React from \"react\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport { AssetObject, DecommissionedFieldsTable } from \"../../../utils/utils\";\r\n\r\ninterface DecommissionedPropertiesViewProps {\r\n  data: AssetObject;\r\n}\r\nexport interface AlertState {\r\n  isDeleteOpen: boolean;\r\n  fields: Array<string>;\r\n}\r\n\r\nclass DecommissionedPropertiesView extends React.PureComponent<\r\n  RouteComponentProps & DecommissionedPropertiesViewProps,\r\n  AlertState\r\n> {\r\n  setFieldNamesFromData = () => {\r\n    let fields: Array<string> = [];\r\n    Object.keys(this.props.data).forEach((col: string) => {\r\n      if (col === \"decommissioning_user\" || col === \"time_decommissioned\") {\r\n        fields.push(col);\r\n      }\r\n    });\r\n\r\n    return fields;\r\n  };\r\n  public state: AlertState = {\r\n    isDeleteOpen: false,\r\n    fields: this.setFieldNamesFromData(),\r\n  };\r\n  renderData(fields: Array<any>, data: any) {\r\n    return fields.map((item: string) => {\r\n      var dat;\r\n      dat = <p>{data[item]}</p>;\r\n      return (\r\n        <tr>\r\n          <td key={item}>\r\n            <p className=\"label\">{DecommissionedFieldsTable[item]}:</p>\r\n          </td>\r\n\r\n          <td>{dat}</td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className={Classes.DARK + \" propsview\"}>\r\n        <h3>Decommissioned</h3>\r\n        <div className=\"propsdetail\">\r\n          <div className=\"props-column\">\r\n            <table className=\"bp3-html-table\">\r\n              {this.renderData(this.state.fields, this.props.data)}\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(DecommissionedPropertiesView);\r\n","import React from \"react\";\r\nimport Graph from \"react-graph-vis\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport { NetworkGraphData } from \"../../../../utils/utils\";\r\n\r\ninterface NetworkGraphProps {\r\n  onClickNode(id: string): any;\r\n  networkGraph: NetworkGraphData;\r\n  isDecommissioned: boolean;\r\n}\r\n\r\nclass NetworkGraph extends React.Component<\r\n  NetworkGraphProps & RouteComponentProps\r\n> {\r\n  options = {\r\n    layout: {},\r\n    edges: {\r\n      color: \"#5C7080\",\r\n      arrows: {\r\n        to: false,\r\n        from: false,\r\n      },\r\n    },\r\n    nodes: {\r\n      color: {\r\n        background: \"#202B33\",\r\n        border: \"#202B33\",\r\n        highlight: {\r\n          background: \"#182026\",\r\n          border: \"#30404D\",\r\n        },\r\n      },\r\n      font: { color: \"white\" },\r\n      physics: false,\r\n    },\r\n    interaction: {\r\n      hover: !this.props.isDecommissioned,\r\n      zoomView: false,\r\n    },\r\n  };\r\n\r\n  onClickNode = (event: any) => {\r\n    var { nodes } = event;\r\n    if (nodes.length > 0 && !this.props.isDecommissioned) {\r\n      this.props.onClickNode(nodes[0]);\r\n    }\r\n  };\r\n  events = {\r\n    select: this.onClickNode,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"graph-container\">\r\n        {this.props.networkGraph ? (\r\n          <Graph\r\n            graph={this.props.networkGraph}\r\n            options={this.options}\r\n            events={this.events}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(NetworkGraph);\r\n","import {\r\n  Alert,\r\n  AnchorButton,\r\n  Callout,\r\n  Classes,\r\n  Intent,\r\n  IToastProps,\r\n  Position,\r\n  Toaster,\r\n} from \"@blueprintjs/core\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport axios from \"axios\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport FormPopup from \"../../../../forms/formPopup\";\r\nimport { FormTypes } from \"../../../../forms/formUtils\";\r\nimport { API_ROOT } from \"../../../../utils/api-config\";\r\nimport {\r\n  AssetObject,\r\n  ElementType,\r\n  getHeaders,\r\n  NetworkConnection,\r\n  Node,\r\n  DatacenterObject,\r\n  ROUTES,\r\n  ChangePlan,\r\n  AssetCPObject,\r\n  getChangePlanRowStyle,\r\n  isAssetCPObject,\r\n} from \"../../../../utils/utils\";\r\nimport {\r\n  deleteAsset,\r\n  decommissionAsset,\r\n  modifyAsset,\r\n} from \"../../elementUtils\";\r\nimport PropertiesView from \"../propertiesView\";\r\nimport DecommissionedPropertiesView from \"../decommissionedPropertiesView\";\r\nimport \"./assetView.scss\";\r\nimport NetworkGraph from \"./graph\";\r\nimport PowerView from \"../../powerView/powerView\";\r\nimport { ALL_DATACENTERS } from \"../../elementTabContainer\";\r\nimport { isNullOrUndefined } from \"util\";\r\nimport { PermissionState } from \"../../../../utils/permissionUtils\";\r\nexport interface AssetViewProps {\r\n  token: string;\r\n  isAdmin: boolean;\r\n  changePlan: ChangePlan;\r\n  permissionState: PermissionState;\r\n}\r\n// Given an rid, will perform a GET request of that rid and display info about that instnace\r\n\r\n// var console: any = {};\r\n// console.log = function() {};\r\n\r\ninterface AssetViewState {\r\n  asset: AssetObject | AssetCPObject;\r\n  isFormOpen: boolean;\r\n  isDeleteOpen: boolean;\r\n  isDecommissionOpen: boolean;\r\n  isAlertOpen: boolean;\r\n  datacenters: Array<DatacenterObject>;\r\n  powerShouldUpdate: boolean;\r\n}\r\n\r\nexport class AssetView extends React.PureComponent<\r\n  RouteComponentProps & AssetViewProps,\r\n  AssetViewState\r\n> {\r\n  public state: AssetViewState = {\r\n    asset: {} as AssetObject,\r\n    isFormOpen: false,\r\n    isDeleteOpen: false,\r\n    isDecommissionOpen: false,\r\n    isAlertOpen: false,\r\n    datacenters: [],\r\n    powerShouldUpdate: false,\r\n  };\r\n  successfullyLoadedData = false;\r\n  private updateAsset = (asset: AssetObject, headers: any): Promise<any> => {\r\n    let params: any;\r\n    params = this.props.match.params;\r\n    return modifyAsset(asset, headers, this.props.changePlan).then((res) => {\r\n      if (res.data.warning_message) {\r\n        this.addWarnToast(\"Modifed asset. \" + res.data.warning_message);\r\n      } else {\r\n        this.addSuccessToast(res.data.success_message);\r\n      }\r\n\r\n      this.getData(params.rid, this.props.changePlan);\r\n\r\n      this.handleFormClose();\r\n    });\r\n  };\r\n  private toaster: Toaster = {} as Toaster;\r\n  private addToast(toast: IToastProps) {\r\n    toast.timeout = 5000;\r\n    this.toaster.show(toast);\r\n  }\r\n\r\n  private refHandlers = {\r\n    toaster: (ref: Toaster) => (this.toaster = ref),\r\n  };\r\n\r\n  getData(assetKey: string, changePlan: ChangePlan) {\r\n    const params: any = {};\r\n    if (changePlan) {\r\n      params[\"change_plan\"] = changePlan.id;\r\n    }\r\n    const config = {\r\n      headers: {\r\n        Authorization: \"Token \" + this.props.token,\r\n      },\r\n\r\n      params: params,\r\n    };\r\n\r\n    axios\r\n      .get(API_ROOT + \"api/assets/\" + assetKey, config)\r\n      .then((res) => {\r\n        const data = res.data;\r\n        return data;\r\n      })\r\n      .then((result) => {\r\n        this.setState({\r\n          asset: result,\r\n          powerShouldUpdate: true,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        this.setState({\r\n          asset: {} as AssetObject,\r\n        });\r\n        this.addErrorToast(err.response.data.failure_message);\r\n      });\r\n  }\r\n  private addSuccessToast = (message: string) => {\r\n    this.addToast({ message: message, intent: Intent.PRIMARY });\r\n  };\r\n  private addWarnToast = (message: string) => {\r\n    this.addToast({\r\n      message: message,\r\n      intent: Intent.WARNING,\r\n      action: {\r\n        onClick: () => this.setState({ isFormOpen: true }),\r\n        text: \"Edit values\",\r\n      },\r\n    });\r\n  };\r\n  private addErrorToast = (message: string) => {\r\n    this.addToast({ message: message, intent: Intent.DANGER });\r\n  };\r\n  public updateAssetData = (rid: string) => {\r\n    this.getData(rid, this.props.changePlan);\r\n  };\r\n\r\n  public updateAssetDataCP = (rid: string, changePlan: ChangePlan) => {\r\n    this.getData(rid, changePlan);\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps: AssetViewProps & RouteComponentProps) {\r\n    if (nextProps.changePlan !== this.props.changePlan) {\r\n      let params: any;\r\n      params = this.props.match.params;\r\n      this.updateAssetDataCP(params.rid, nextProps.changePlan);\r\n    }\r\n  }\r\n\r\n  getNetworkConnectionForPort(port: string) {\r\n    return this.state.asset.network_connections.find(\r\n      (connection: NetworkConnection) => connection.source_port === port\r\n    );\r\n  }\r\n  detectConflict(assetcp: AssetCPObject) {\r\n    return (\r\n      assetcp.is_conflict ||\r\n      !isNullOrUndefined(assetcp.asset_conflict_location) ||\r\n      !isNullOrUndefined(assetcp.asset_conflict_asset_name) ||\r\n      !isNullOrUndefined(assetcp.asset_conflict_hostname)\r\n    );\r\n  }\r\n  getDatacenters = () => {\r\n    const headers = getHeaders(this.props.token);\r\n\r\n    axios\r\n      .post(API_ROOT + \"api/datacenters/get-many\", {}, headers)\r\n      .then((res) => {\r\n        const datacenters = res.data.datacenters as Array<DatacenterObject>;\r\n        datacenters.push(ALL_DATACENTERS);\r\n        this.setState({\r\n          datacenters,\r\n        });\r\n      })\r\n      .catch((err) => {});\r\n  };\r\n  public render() {\r\n    if (!this.successfullyLoadedData && this.props.token) {\r\n      let params: any;\r\n      params = this.props.match.params;\r\n      this.updateAssetData(params.rid);\r\n      this.successfullyLoadedData = true;\r\n    }\r\n    if (this.state.datacenters.length === 0) {\r\n      this.getDatacenters();\r\n    }\r\n\r\n    return (\r\n      <div className={Classes.DARK + \" asset-view\"}>\r\n        <Toaster\r\n          autoFocus={false}\r\n          canEscapeKeyClear={true}\r\n          position={Position.TOP}\r\n          ref={this.refHandlers.toaster}\r\n        />\r\n        {!this.state.asset.decommissioning_user ? (\r\n          <div className=\"detail-buttons-wrapper\">\r\n            <div className={\"detail-buttons\"}>\r\n              <AnchorButton\r\n                intent=\"primary\"\r\n                icon=\"edit\"\r\n                text=\"Edit\"\r\n                minimal\r\n                onClick={() => this.handleFormOpen()}\r\n                disabled={\r\n                  (isAssetCPObject(this.state.asset) &&\r\n                    this.state.asset.is_decommissioned) ||\r\n                  !(\r\n                    this.props.permissionState.admin ||\r\n                    this.props.permissionState.asset_management ||\r\n                    (this.state.asset &&\r\n                      this.state.asset.rack &&\r\n                      this.props.permissionState.datacenter_permissions.includes(\r\n                        +this.state.asset.rack.datacenter.id\r\n                      ))\r\n                  )\r\n                }\r\n              />\r\n              <FormPopup\r\n                datacenters={this.state.datacenters}\r\n                isOpen={this.state.isFormOpen}\r\n                initialValues={this.state.asset}\r\n                type={FormTypes.MODIFY}\r\n                elementName={ElementType.ASSET}\r\n                handleClose={this.handleFormClose}\r\n                submitForm={this.updateAsset}\r\n              />\r\n              <AnchorButton\r\n                minimal\r\n                intent=\"danger\"\r\n                icon=\"remove\"\r\n                text=\"Decommission\"\r\n                onClick={this.handleDecommissionOpen}\r\n                disabled={\r\n                  (isAssetCPObject(this.state.asset) &&\r\n                    this.state.asset.is_decommissioned) ||\r\n                  !(\r\n                    this.props.permissionState.admin ||\r\n                    this.props.permissionState.asset_management ||\r\n                    (this.state.asset &&\r\n                      this.state.asset.rack &&\r\n                      this.props.permissionState.datacenter_permissions.includes(\r\n                        +this.state.asset.rack.datacenter.id\r\n                      ))\r\n                  )\r\n                }\r\n              />\r\n              <Alert\r\n                cancelButtonText=\"Cancel\"\r\n                confirmButtonText=\"Decommission\"\r\n                intent=\"danger\"\r\n                isOpen={this.state.isDecommissionOpen}\r\n                onCancel={this.handleDecommissionCancel}\r\n                onConfirm={this.handleDecommission}\r\n              >\r\n                <p>\r\n                  Are you sure you want to decommission this asset? This action\r\n                  cannot be undone.\r\n                </p>\r\n              </Alert>\r\n              <AnchorButton\r\n                minimal\r\n                intent=\"danger\"\r\n                icon=\"trash\"\r\n                text=\"Delete\"\r\n                onClick={this.handleDeleteOpen}\r\n                disabled={\r\n                  !isNullOrUndefined(this.props.changePlan) ||\r\n                  !(\r\n                    this.props.permissionState.admin ||\r\n                    this.props.permissionState.asset_management ||\r\n                    (this.state.asset &&\r\n                      this.state.asset.rack &&\r\n                      this.props.permissionState.datacenter_permissions.includes(\r\n                        +this.state.asset.rack.datacenter.id\r\n                      ))\r\n                  )\r\n                }\r\n              />\r\n              <Alert\r\n                cancelButtonText=\"Cancel\"\r\n                confirmButtonText=\"Delete\"\r\n                intent=\"danger\"\r\n                icon=\"warning-sign\"\r\n                isOpen={this.state.isDeleteOpen}\r\n                onCancel={this.handleDeleteCancel}\r\n                onConfirm={this.handleDelete}\r\n              >\r\n                <p>\r\n                  Are you sure you want to <b>delete</b> this asset? Unless it\r\n                  was created in error, consider <b>decommissioning</b> instead.\r\n                </p>\r\n              </Alert>\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n        {this.state.asset.decommissioning_user ? (\r\n          <DecommissionedPropertiesView data={this.state.asset} />\r\n        ) : null}\r\n        {isAssetCPObject(this.state.asset) &&\r\n        this.state.asset.is_decommissioned ? (\r\n          <Callout\r\n            className=\"propsview\"\r\n            intent={Intent.WARNING}\r\n            title=\"This asset has been marked as decommissioned on this change plan. \"\r\n          >\r\n            This asset will actually become decommissioned at the time of change\r\n            plan execution, but no more modifications can be made to this asset.\r\n          </Callout>\r\n        ) : null}\r\n        {isAssetCPObject(this.state.asset) &&\r\n        this.detectConflict(this.state.asset) ? (\r\n          <Callout\r\n            className=\"propsview\"\r\n            intent={Intent.DANGER}\r\n            title=\"This asset has conflicts \"\r\n          >\r\n            Please go to change plan detail view for more details\r\n          </Callout>\r\n        ) : null}\r\n        <PropertiesView data={this.state.asset} />\r\n        <div className=\"propsview\">\r\n          <h3>Network Connections</h3>\r\n\r\n          {this.state.asset.model &&\r\n          this.state.asset.model.network_ports &&\r\n          this.state.asset.model.network_ports.length !== 0 ? (\r\n            <div className=\"network-connections\">\r\n              <table className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-striped\">\r\n                <tr>\r\n                  <th>Network Port</th>\r\n                  <th>Mac Address</th>\r\n                  <th>Destination Asset</th>\r\n                  <th>Destination Port</th>\r\n                </tr>\r\n                <tbody>\r\n                  {this.state.asset.model.network_ports.map((port: string) => {\r\n                    var connection = this.getNetworkConnectionForPort(port);\r\n                    return (\r\n                      <tr>\r\n                        {\" \"}\r\n                        <td style={getChangePlanRowStyle(this.state.asset)}>\r\n                          {port}\r\n                        </td>\r\n                        <td style={getChangePlanRowStyle(this.state.asset)}>\r\n                          {this.state.asset.mac_addresses\r\n                            ? this.state.asset.mac_addresses[port]\r\n                            : null}\r\n                        </td>{\" \"}\r\n                        {connection\r\n                          ? [\r\n                              <td\r\n                                style={getChangePlanRowStyle(this.state.asset)}\r\n                                className={\r\n                                  this.state.asset.decommissioning_user\r\n                                    ? undefined\r\n                                    : \"asset-link\"\r\n                                }\r\n                                onClick={\r\n                                  this.state.asset.decommissioning_user\r\n                                    ? undefined\r\n                                    : (e: any) => {\r\n                                        const id = this.getAssetIdFromHostname(\r\n                                          connection!.destination_hostname!\r\n                                        );\r\n                                        if (id) {\r\n                                          this.redirectToAsset(id);\r\n                                        }\r\n                                      }\r\n                                }\r\n                              >\r\n                                {connection.destination_hostname}\r\n                              </td>,\r\n                              <td\r\n                                style={getChangePlanRowStyle(this.state.asset)}\r\n                              >\r\n                                {connection.destination_port}\r\n                              </td>,\r\n                            ]\r\n                          : [<td></td>, <td></td>]}\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n\r\n              <NetworkGraph\r\n                networkGraph={this.state.asset.network_graph}\r\n                onClickNode={this.redirectToAsset}\r\n                isDecommissioned={\r\n                  this.state.asset.decommissioning_user !== undefined\r\n                }\r\n              />\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n\r\n        {Object.keys(this.state.asset).length !== 0 ? this.renderPower() : null}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private getAssetIdFromHostname = (hostname: string) => {\r\n    const node = this.state.asset.network_graph.nodes.find(\r\n      (node: Node) => node.label === hostname\r\n    );\r\n    if (node) {\r\n      return (node.id as unknown) as string;\r\n    }\r\n  };\r\n  private redirectToAsset = (id: string) => {\r\n    this.props.history.push(ROUTES.ASSETS + \"/\" + id);\r\n    this.updateAssetData(id);\r\n  };\r\n\r\n  private renderPower() {\r\n    return (\r\n      <PowerView\r\n        {...this.props}\r\n        asset={this.state.asset}\r\n        shouldUpdate={this.state.powerShouldUpdate}\r\n        updated={() => {\r\n          this.setState({ powerShouldUpdate: false });\r\n        }}\r\n        assetIsDecommissioned={\r\n          this.state.asset.decommissioning_user !== undefined\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  private handleFormOpen = () => {\r\n    this.setState({\r\n      isFormOpen: true,\r\n    });\r\n  };\r\n  handleFormSubmit = () => {\r\n    this.setState({\r\n      isFormOpen: false,\r\n    });\r\n  };\r\n\r\n  private handleFormClose = () => this.setState({ isFormOpen: false });\r\n  private handleDeleteCancel = () => this.setState({ isDeleteOpen: false });\r\n  private handleDeleteOpen = () => this.setState({ isDeleteOpen: true });\r\n  private handleDelete = () => {\r\n    deleteAsset(this.state.asset!, getHeaders(this.props.token))\r\n      .then((res) => {\r\n        this.setState({ isDeleteOpen: false });\r\n        this.addSuccessToast(res.data.success_message);\r\n        this.props.history.push(ROUTES.DASHBOARD);\r\n      })\r\n      .catch((err) => {\r\n        this.addToast({\r\n          message: err.response.data.failure_message,\r\n          intent: Intent.DANGER,\r\n        });\r\n      });\r\n  };\r\n  private handleDecommissionCancel = () =>\r\n    this.setState({ isDecommissionOpen: false });\r\n  private handleDecommissionOpen = () =>\r\n    this.setState({ isDecommissionOpen: true });\r\n  private handleDecommission = () => {\r\n    decommissionAsset(\r\n      this.state.asset!,\r\n      getHeaders(this.props.token),\r\n      this.props.changePlan\r\n    )\r\n      .then((res) => {\r\n        this.setState({ isDecommissionOpen: false });\r\n        this.addSuccessToast(\"Successfully Decommissioned Asset\");\r\n        let params: any;\r\n        params = this.props.match.params;\r\n        this.updateAssetData(params.rid);\r\n      })\r\n      .catch((err) => {\r\n        this.addToast({\r\n          message: err.response.data.failure_message,\r\n          intent: Intent.DANGER,\r\n        });\r\n      });\r\n  };\r\n}\r\n\r\nconst mapStatetoProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n    isAdmin: state.admin,\r\n    changePlan: state.changePlan,\r\n    permissionState: state.permissionState,\r\n  };\r\n};\r\n\r\nexport default withRouter(connect(mapStatetoProps)(AssetView));\r\n","import {\r\n  Alert,\r\n  AnchorButton,\r\n  Classes,\r\n  Intent,\r\n  IToastProps,\r\n  Position,\r\n  Toaster,\r\n} from \"@blueprintjs/core\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport axios from \"axios\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport FormPopup from \"../../../../forms/formPopup\";\r\nimport { FormTypes } from \"../../../../forms/formUtils\";\r\nimport { API_ROOT } from \"../../../../utils/api-config\";\r\nimport {\r\n  AssetObject,\r\n  ElementType,\r\n  getHeaders,\r\n  ModelObject,\r\n  ROUTES,\r\n  ChangePlan,\r\n} from \"../../../../utils/utils\";\r\nimport ElementTable from \"../../elementTable\";\r\nimport { deleteModel, modifyModel } from \"../../elementUtils\";\r\nimport PropertiesView from \"../propertiesView\";\r\nimport { PermissionState } from \"../../../../utils/permissionUtils\";\r\n\r\nexport interface ModelViewProps {\r\n  token: string;\r\n  rid: any;\r\n  isAdmin: boolean;\r\n  changePlan: ChangePlan;\r\n  permissionState: PermissionState;\r\n}\r\n\r\nvar console: any = {};\r\nconsole.log = function () {};\r\ninterface ModelViewState {\r\n  assets: Array<AssetObject>;\r\n  model: ModelObject;\r\n  isFormOpen: boolean;\r\n  isDeleteOpen: boolean;\r\n}\r\n\r\nasync function getData(\r\n  modelkey: string,\r\n  token: string,\r\n  changePlan: ChangePlan\r\n) {\r\n  const params: any = {};\r\n  if (changePlan) {\r\n    params[\"change_plan\"] = changePlan.id;\r\n  }\r\n  const config = {\r\n    headers: {\r\n      Authorization: \"Token \" + token,\r\n    },\r\n    params,\r\n  };\r\n\r\n  return await axios\r\n    .get(API_ROOT + \"api/models/\" + modelkey, config)\r\n    .then((res) => {\r\n      const data = res.data;\r\n      return data;\r\n    });\r\n}\r\n\r\nexport class ModelView extends React.PureComponent<\r\n  RouteComponentProps & ModelViewProps,\r\n  ModelViewState\r\n> {\r\n  public state: ModelViewState = {\r\n    assets: [],\r\n    model: {} as ModelObject,\r\n    isFormOpen: false,\r\n    isDeleteOpen: false,\r\n  };\r\n\r\n  private updateModel = (model: ModelObject, headers: any): Promise<any> => {\r\n    return modifyModel(model, headers).then((res) => {\r\n      let params: any;\r\n      params = this.props.match.params;\r\n      getData(params.rid, this.props.token, this.props.changePlan).then(\r\n        (result) => {\r\n          this.setState({\r\n            model: result.model,\r\n            assets: result.assets,\r\n          });\r\n        }\r\n      );\r\n      this.handleFormClose();\r\n    });\r\n  };\r\n  private handleDeleteOpen = () => this.setState({ isDeleteOpen: true });\r\n  private handleDeleteCancel = () => this.setState({ isDeleteOpen: false });\r\n  private handleFormOpen = () => {\r\n    this.setState({\r\n      isFormOpen: true,\r\n    });\r\n  };\r\n  handleFormSubmit = () => {\r\n    this.setState({\r\n      isFormOpen: false,\r\n    });\r\n  };\r\n  private toaster: Toaster = {} as Toaster;\r\n  private addToast(toast: IToastProps) {\r\n    toast.timeout = 5000;\r\n    this.toaster.show(toast);\r\n  }\r\n\r\n  private refHandlers = {\r\n    toaster: (ref: Toaster) => (this.toaster = ref),\r\n  };\r\n\r\n  private handleFormClose = () => this.setState({ isFormOpen: false });\r\n  private handleDelete = () => {\r\n    deleteModel(this.state.model!, getHeaders(this.props.token))\r\n      .then((res) => {\r\n        this.setState({ isDeleteOpen: false });\r\n        this.addToast({\r\n          message: \"Succesfully Deleted Model\",\r\n          intent: Intent.PRIMARY,\r\n        });\r\n        this.props.history.push(ROUTES.DASHBOARD);\r\n      })\r\n      .catch((err) => {\r\n        this.addToast({\r\n          message: err.response.data.failure_message,\r\n          intent: Intent.DANGER,\r\n        });\r\n        this.handleDeleteCancel();\r\n      });\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps: ModelViewProps & RouteComponentProps) {\r\n    if (nextProps.changePlan !== this.props.changePlan) {\r\n      let params: any;\r\n      params = this.props.match.params;\r\n\r\n      getData(params.rid, this.props.token, nextProps.changePlan).then(\r\n        (result) => {\r\n          this.setState({\r\n            model: result.model,\r\n            assets: result.assets,\r\n          });\r\n        }\r\n      );\r\n    }\r\n  }\r\n  public render() {\r\n    let params: any;\r\n    params = this.props.match.params;\r\n    if (Object.keys(this.state.model).length === 0) {\r\n      getData(params.rid, this.props.token, this.props.changePlan).then(\r\n        (result) => {\r\n          this.setState({\r\n            model: result.model,\r\n            assets: result.assets,\r\n          });\r\n        }\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className={Classes.DARK + \" model-view\"}>\r\n        <Toaster\r\n          autoFocus={false}\r\n          canEscapeKeyClear={true}\r\n          position={Position.TOP}\r\n          ref={this.refHandlers.toaster}\r\n        />\r\n        <div className=\"detail-buttons-wrapper\">\r\n          <div className={\"detail-buttons\"}>\r\n            <AnchorButton\r\n              className=\"button-add\"\r\n              intent=\"primary\"\r\n              icon=\"edit\"\r\n              text=\"Edit\"\r\n              minimal\r\n              onClick={() => this.handleFormOpen()}\r\n              disabled={\r\n                !(\r\n                  this.props.permissionState.admin ||\r\n                  this.props.permissionState.model_management\r\n                )\r\n              }\r\n            />\r\n            <FormPopup\r\n              isOpen={this.state.isFormOpen}\r\n              initialValues={this.state.model}\r\n              type={FormTypes.MODIFY}\r\n              elementName={ElementType.MODEL}\r\n              handleClose={this.handleFormClose}\r\n              submitForm={this.updateModel}\r\n            />\r\n            <AnchorButton\r\n              className=\"button-add\"\r\n              intent=\"danger\"\r\n              icon=\"trash\"\r\n              text=\"Delete\"\r\n              minimal\r\n              onClick={this.handleDeleteOpen}\r\n              disabled={\r\n                !(\r\n                  this.props.permissionState.admin ||\r\n                  this.props.permissionState.model_management\r\n                )\r\n              }\r\n            />\r\n            <Alert\r\n              className={Classes.DARK}\r\n              cancelButtonText=\"Cancel\"\r\n              confirmButtonText=\"Delete\"\r\n              intent=\"danger\"\r\n              isOpen={this.state.isDeleteOpen}\r\n              onCancel={this.handleDeleteCancel}\r\n              onConfirm={this.handleDelete}\r\n            >\r\n              <p>Are you sure you want to delete?</p>\r\n            </Alert>\r\n          </div>\r\n        </div>\r\n\r\n        <PropertiesView data={this.state.model} />\r\n        <div className=\"propsview\">\r\n          <h3>Assets</h3>\r\n          <ElementTable\r\n            type={ElementType.ASSET}\r\n            data={this.state.assets}\r\n            disableFiltering={true}\r\n            disableSorting={true}\r\n            isDecommissioned={false}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStatetoProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n    isAdmin: state.admin,\r\n    changePlan: state.changePlan,\r\n    permissionState: state.permissionState,\r\n  };\r\n};\r\n\r\nexport default withRouter(connect(mapStatetoProps)(ModelView));\r\n","import { Classes } from \"@blueprintjs/core\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport Barcode from \"react-barcode\";\r\nimport \"./barcodeView.scss\";\r\n\r\nexport interface BarcodeViewProps {\r\n  token: string;\r\n  isAdmin: string;\r\n  assets_numbers: Array<string>; // Asset numbers to generate barcodes from\r\n  loading: boolean;\r\n}\r\n\r\nexport interface BarcodeViewState {}\r\n\r\nclass BarcodeView extends React.PureComponent<\r\n  RouteComponentProps & BarcodeViewProps,\r\n  BarcodeViewState\r\n> {\r\n  public componentDidMount() {\r\n    window.moveBy(0, 1000);\r\n    window.print();\r\n  }\r\n\r\n  public render() {\r\n    const barcodeString = localStorage.getItem(\"barcodes\")!;\r\n    let barcodes: Array<string>;\r\n    barcodes = barcodeString.split(\",\");\r\n\r\n    return (\r\n      <div className={Classes.DARK}>\r\n        <table>\r\n          <tbody>{this.renderBarcodes(barcodes)}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderBarcodes(barcodes: Array<string>) {\r\n    var width = 0;\r\n    let row: Array<any>;\r\n    row = [];\r\n    let rows: Array<any>;\r\n    rows = [];\r\n    for (var i = 0; i < barcodes.length; i++) {\r\n      width++;\r\n      if (width < 5) {\r\n        row.push(\r\n          <td className={\"barcode-container\"}>\r\n            <Barcode\r\n              value={barcodes[i]}\r\n              text={\"Hyposoft \" + barcodes[i]}\r\n              text-align=\"left\"\r\n              height={26}\r\n              fontSize={9}\r\n              textMargin={1}\r\n              width={2.25}\r\n              margin={6}\r\n            />\r\n          </td>\r\n        );\r\n      } else {\r\n        width = 1;\r\n        rows.push(<tr className={\"barcode-row\"}>{row}</tr>);\r\n        row = [];\r\n        row.push(\r\n          <td className={\"barcode-container\"}>\r\n            <Barcode\r\n              value={barcodes[i]}\r\n              text={\"Hyposoft \" + barcodes[i]}\r\n              text-align=\"left\"\r\n              height={26}\r\n              fontSize={9}\r\n              textMargin={1}\r\n              width={2.25}\r\n              margin={6}\r\n            />\r\n          </td>\r\n        );\r\n      }\r\n    }\r\n    if (row.length > 0) {\r\n      rows.push(<tr className={\"barcode-row\"}>{row}</tr>);\r\n    }\r\n    return rows;\r\n  }\r\n}\r\n\r\nconst mapStatetoProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n    isAdmin: state.admin,\r\n  };\r\n};\r\n\r\nexport default connect(mapStatetoProps)(withRouter(BarcodeView));\r\n","import * as React from \"react\";\r\nimport { Classes, Callout, Intent } from \"@blueprintjs/core\";\r\nimport { ROUTES } from \"../utils/utils\";\r\nimport { RouteComponentProps } from \"react-router\";\r\n\r\nclass Fallback extends React.Component<RouteComponentProps> {\r\n  isExistingPath() {\r\n    const regex = new RegExp(\r\n      \"^/dashboard/(assets|models|datacenters|racks|bulk-upload|change-plans)|^/dashboard$\"\r\n    );\r\n    if (regex.exec(this.props.location.pathname)) {\r\n      return true;\r\n    }\r\n    return Object.values(ROUTES).some(\r\n      (v) => v === this.props.location.pathname\r\n    );\r\n  }\r\n  render() {\r\n    return this.isExistingPath() ? null : NotFound;\r\n  }\r\n}\r\nexport const NotFound = (\r\n  <Callout intent={Intent.WARNING}>\r\n    <h4 className={Classes.DARK}>\r\n      The page that you are looking for does not exist!\r\n    </h4>\r\n  </Callout>\r\n);\r\n\r\nexport const NotAuthorized = () => {\r\n  return (\r\n    <Callout intent={Intent.WARNING}>\r\n      <h4 className={Classes.DARK}>Please log in to see this page</h4>\r\n    </Callout>\r\n  );\r\n};\r\n\r\nexport const NotAuthorizedAdmin = () => {\r\n  return (\r\n    <Callout intent={Intent.WARNING}>\r\n      <h4 className={Classes.DARK}>\r\n        You are not authorized to view this page.\r\n      </h4>\r\n    </Callout>\r\n  );\r\n};\r\n\r\nexport default Fallback;\r\n","import * as React from \"react\";\r\n\r\ninterface FileProps {\r\n  callback: any;\r\n}\r\n\r\ninterface FileState {\r\n  prompt: string;\r\n}\r\n\r\nexport class FileSelector extends React.Component<FileProps, FileState> {\r\n  public state: FileState = {\r\n    prompt: \"Choose file...\",\r\n  };\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(target: any) {\r\n    let fileRegEx = /.*\\.(\\w+)/;\r\n    let extension = target.files[0].name.match(fileRegEx);\r\n    let ext = extension[extension.length - 1];\r\n    if (ext !== \"csv\") {\r\n      alert(\"WARNING: file must be .csv. You selected a file of type: .\" + ext);\r\n    } else {\r\n      this.setState({\r\n        prompt: target.files[0].name,\r\n      });\r\n      this.props.callback(target.files[0]);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <label className={\"bp3-file-input\"}>\r\n        <input\r\n          type=\"file\"\r\n          onChange={(e: any) => {\r\n            this.handleChange(e.target);\r\n          }}\r\n        />\r\n        <span className={\"bp3-file-upload-input bp3-text-overflow-ellipsis\"}>\r\n          {this.state.prompt}\r\n        </span>\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FileSelector;\r\n","import { Card } from \"@blueprintjs/core\";\r\nimport * as React from \"react\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\n\r\ninterface InstructionsLiteProps {\r\n  uploadType: string;\r\n}\r\n\r\nvar console: any = {};\r\nconsole.log = function () {};\r\nexport class InstructionsLite extends React.PureComponent<\r\n  InstructionsLiteProps\r\n> {\r\n  render() {\r\n    return (\r\n      <div className=\"instructions-div\">\r\n        <Card className=\"instructions-card\">\r\n          <h3>\r\n            The following columns are required for {this.props.uploadType}:\r\n          </h3>\r\n          {this.props.uploadType === \"models\" ? (\r\n            <ul className={\"bp3-list\"}>\r\n              <li>vendor – string</li>\r\n              <li>model number – string</li>\r\n              <li>\r\n                height – positive integer; refers to the height in U of the\r\n                model\r\n              </li>\r\n              <li>\r\n                display color – 6-digit hex triplet (RGB) preceded by a pound\r\n                sign (#); case insen- sitive; e.g. #7FFFD4, #7fffd4\r\n              </li>\r\n              <li>network ports – non-negative integer</li>\r\n              <li>power ports – non-negative integer</li>\r\n              <li>cpu – string</li>\r\n              <li>memory – non-negative integer</li>\r\n              <li>storage – string</li>\r\n              <li>\r\n                comment – string; must be enclosed by double quotes if value\r\n                contains line breaks\r\n              </li>\r\n              <li>\r\n                network port name 1 – string; if left blank and network port\r\n                exists, value defaults to ”1”\r\n              </li>\r\n              <li>\r\n                network port name 2 – string; if left blank and network port\r\n                exists, value defaults to ”2”\r\n              </li>\r\n              <li>\r\n                network port name 3 – string; if left blank and network port\r\n                exists, value defaults to ”3”\r\n              </li>\r\n              <li>\r\n                network port name 4 – string; if left blank and network port\r\n                exists, value defaults to ”4”\r\n              </li>\r\n            </ul>\r\n          ) : null}\r\n          {this.props.uploadType === \"assets\" ? (\r\n            <ul className={\"bp3-list\"}>\r\n              <li>\r\n                <b>asset number</b> – six-digit integer; must be unique unless\r\n                modifying an existing asset; if left blank, a value will be\r\n                generated automatically; matching an existing asset number\r\n                indicates that this row should modify an existing asset in the\r\n                system\r\n              </li>\r\n              <li>\r\n                <b>hostname</b> – complies with RFC 1034 definition of ”label”\r\n              </li>\r\n              <li>\r\n                <b>datacenter</b> – string; refers to the abbreviated form of an\r\n                existing datacenter in the system (e.g. RTP1)\r\n              </li>\r\n              <li>\r\n                <b>rack</b> – string; the address of a rack is by a row letter\r\n                (A-Z) and rack number (positive integer); there is no separator\r\n                between the row letter and rack number\r\n              </li>\r\n              <li>\r\n                <b>rack position</b> – positive integer; refers to the vertical\r\n                location (on a rack, measured in U) of the bottom of the\r\n                equipment\r\n              </li>\r\n              <li>\r\n                <b>vendor</b> – string; refers to the vendor of the model with\r\n                which this asset is associated\r\n              </li>\r\n              <li>\r\n                <b>model number</b> – string; refers to the model number of the\r\n                model with which this asset is associated\r\n              </li>\r\n              <li>\r\n                <b>owner</b> – string; refers to the username of an existing\r\n                user in the system who owns this equipment\r\n              </li>\r\n              <li>\r\n                <b>comment</b> – string; must be enclosed by double quotes if\r\n                value contains line breaks\r\n              </li>\r\n              <li>\r\n                <b>power port connection 1</b> – reference to a PDU in the rack\r\n                (L or R) and a port number (1 - 24); e.g. L5, R24; if left blank\r\n                the power port will be disconnected\r\n              </li>\r\n              <li>\r\n                <b>power port connection 2</b> – reference to a PDU in the rack\r\n                and a port number (1 - 24); e.g.L5, R24; if left blank the power\r\n                port will be disconnected\r\n              </li>\r\n            </ul>\r\n          ) : null}\r\n          {this.props.uploadType === \"network connections\" ? (\r\n            <ul className={\"bp3-list\"}>\r\n              <li>\r\n                <b>src hostname</b> – string; matches the hostname of an\r\n                existing asset in the system\r\n              </li>\r\n              <li>\r\n                <b>src port</b> – string; matches a network port name defined by\r\n                the source asset’s model\r\n              </li>\r\n              <li>\r\n                <b>src mac</b> – six-byte MAC address; format must comply with\r\n                Requirement 2.2.1.5; sets this value for the associated src port\r\n              </li>\r\n              <li>\r\n                <b>dest hostname</b> – string; matches the hostname of an\r\n                existing asset in the system; leaving blank will disconnect src\r\n                port if it’s currently connected\r\n              </li>\r\n              <li>\r\n                <b>dest port</b> – string; matches a network port name defined\r\n                by the destination asset’s model; must be given a value if a\r\n                value is given for dest hostname; must be left blank if dest\r\n                hostname is left blank\r\n              </li>\r\n            </ul>\r\n          ) : null}\r\n          <h3>\r\n            You can find the full technical specification here:&nbsp;\r\n            <a href=\"https://d1b10bmlvqabco.cloudfront.net/attach/k4u27qnccr45oo/i515p00jifO/k6wckku7h5ne/ECE458__Bulk_Format_Proposal__v3.2.pdf\">\r\n              HypoSoft Bulk Import Specifications\r\n            </a>\r\n          </h3>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InstructionsLite;\r\n","import { AnchorButton, Intent } from \"@blueprintjs/core\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport axios from \"axios\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport { API_ROOT } from \"../../utils/api-config\";\r\nimport \"./import.scss\";\r\nimport { ModelObject, RackObject, PowerConnection } from \"../../utils/utils\";\r\n\r\ninterface ModifierProps {\r\n  token: string;\r\n  modelsModified?: Array<any>;\r\n  modelsIgnored?: number;\r\n  modelsAdded?: number;\r\n  callback: (toasts: Array<string>, types: Array<string>) => void;\r\n  operation: string;\r\n}\r\nvar console: any = {};\r\nconsole.log = function () {};\r\n\r\nexport interface AssetObject {\r\n  [key: string]: any;\r\n  hostname: string;\r\n  rack_position: string;\r\n  model: ModelObject;\r\n  rack: RackObject;\r\n  owner?: string;\r\n  comment?: string;\r\n  id: string;\r\n  asset_number: number;\r\n  datacenter: string;\r\n  power_port_connection_1: PowerConnection;\r\n  power_port_connection_2: PowerConnection;\r\n}\r\n\r\nexport interface ModelObjectMod {\r\n  [key: string]: any;\r\n  vendor: string;\r\n  model_number: string;\r\n  height: string;\r\n  display_color?: string;\r\n  network_ports?: string; //\r\n  power_ports?: string; //\r\n  cpu?: string;\r\n  memory?: string; //\r\n  storage?: string;\r\n  comment?: string;\r\n  id: string;\r\n  network_port_name_1?: string;\r\n  network_port_name_2?: string;\r\n  network_port_name_3?: string;\r\n  network_port_name_4?: string;\r\n}\r\n\r\nexport interface NetworkConnection {\r\n  source_port: string;\r\n  destination_hostname: string;\r\n  destination_port: string;\r\n}\r\n\r\ninterface Check {\r\n  model: any;\r\n  checked: boolean;\r\n}\r\n\r\ninterface ModifierState {\r\n  modifiedModels: Array<Check>;\r\n}\r\n\r\nexport class Modifier extends React.PureComponent<\r\n  RouteComponentProps & ModifierProps,\r\n  ModifierState\r\n> {\r\n  public state: ModifierState = {\r\n    modifiedModels: [],\r\n  };\r\n\r\n  renderOneModification(obj: any, fields: any, model: any) {\r\n    return (\r\n      <div>\r\n        <table className={\"bp3-html-table\"}>\r\n          <thead>\r\n            <tr>\r\n              <th>Modified or Original?</th>\r\n              {Object.keys(model).map((item: string) => {\r\n                console.log(item);\r\n                if (item !== \"id\") {\r\n                  if (item === \"power_connections\") {\r\n                    return <th></th>;\r\n                  } else return <th>{fields[item]}</th>;\r\n                }\r\n                // TODO might need to make separate fields arrays based on this.props.operation\r\n                else return <th> </th>;\r\n              })}\r\n              {this.props.operation === \"assets\" ? <th>Power Port 1</th> : null}\r\n              {this.props.operation === \"assets\" ? <th>Power Port 2</th> : null}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>Existing</td>\r\n              {Object.keys(model).map((key: string) => {\r\n                if (!obj.existing[key]) {\r\n                  return <td> </td>;\r\n                }\r\n                if (key === \"rack\")\r\n                  return (\r\n                    <td>\r\n                      {obj.existing.rack.row_letter +\r\n                        \"\" +\r\n                        obj.existing.rack.rack_num}\r\n                    </td>\r\n                  );\r\n                else if (key === \"model\")\r\n                  return (\r\n                    <td>\r\n                      {obj.existing.model.vendor +\r\n                        \" \" +\r\n                        obj.existing.model.model_number}\r\n                    </td>\r\n                  );\r\n                else if (key !== \"id\") {\r\n                  if (key !== \"power_connections\") {\r\n                    if (key === \"network_ports\" && obj.existing.network_ports) {\r\n                      let str = \"\";\r\n                      for (let i = 0; i < obj.existing[key].length; i++) {\r\n                        str = str + obj.existing[key][i] + \", \";\r\n                      }\r\n                      return <td>{str.substring(0, str.length - 2)}</td>;\r\n                    } else {\r\n                      return <td>{obj.existing[key]}</td>;\r\n                    }\r\n                  } else {\r\n                    return <td></td>;\r\n                  }\r\n                } else return <td> </td>;\r\n              })}\r\n              {this.props.operation === \"assets\"\r\n                ? Object.keys(obj.existing.power_connections).map(\r\n                    (portNum: string) => {\r\n                      return (\r\n                        <td>\r\n                          {obj.existing.power_connections[portNum].left_right}\r\n                          {obj.existing.power_connections[portNum].port_number}\r\n                        </td>\r\n                      );\r\n                    }\r\n                  )\r\n                : null}\r\n            </tr>\r\n            <tr>\r\n              <td>Modified</td>\r\n              {Object.keys(model).map((key: string) => {\r\n                if (key === \"rack\")\r\n                  return (\r\n                    <td>\r\n                      {obj.modified.rack.row_letter +\r\n                        \"\" +\r\n                        obj.modified.rack.rack_num}\r\n                    </td>\r\n                  );\r\n                else if (key === \"model\")\r\n                  return (\r\n                    <td>\r\n                      {obj.modified.model.vendor +\r\n                        \" \" +\r\n                        obj.modified.model.model_number}\r\n                    </td>\r\n                  );\r\n                else if (key !== \"id\") {\r\n                  if (key !== \"power_connections\") {\r\n                    if (key === \"network_ports\" && obj.modified.network_ports) {\r\n                      let str = \"\";\r\n                      for (let i = 0; i < obj.modified[key].length; i++) {\r\n                        str = str + obj.modified[key][i] + \", \";\r\n                      }\r\n                      return <td>{str.substring(0, str.length - 2)}</td>;\r\n                    } else {\r\n                      return <td>{obj.modified[key]}</td>;\r\n                    }\r\n                  } else {\r\n                    return <td></td>;\r\n                  }\r\n                } else {\r\n                  return <td> </td>;\r\n                }\r\n              })}\r\n              {this.props.operation === \"assets\"\r\n                ? Object.keys(obj.modified.power_connections).map(\r\n                    (portNum: string) => {\r\n                      return (\r\n                        <td>\r\n                          {obj.modified.power_connections[portNum].left_right}\r\n                          {obj.modified.power_connections[portNum].port_number}\r\n                        </td>\r\n                      );\r\n                    }\r\n                  )\r\n                : null}\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <div className={\"upload-button\"}>\r\n          <Checks\r\n            {...this.props}\r\n            linkedModel={obj.modified}\r\n            callback={(model: any) => {\r\n              var index = this.state.modifiedModels.findIndex(\r\n                (element: Check) => {\r\n                  return element.model === model;\r\n                }\r\n              );\r\n              let check: Array<Check>;\r\n              check = this.state.modifiedModels;\r\n              check[index].checked = !check[index].checked;\r\n              this.setState({\r\n                modifiedModels: check,\r\n              });\r\n              // this.state.modifiedModels[index].checked = !this.state.modifiedModels[index].checked\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderModifications(model: any, fields: any) {\r\n    let mods: Array<any> = [];\r\n    for (let i = 0; i < this.props.modelsModified!.length; i++) {\r\n      let obj = this.props.modelsModified![i];\r\n      let checkObj: Check;\r\n      checkObj = { model: obj.modified, checked: false };\r\n      this.state.modifiedModels.push(checkObj);\r\n      mods.push(this.renderOneModification(obj, fields, model));\r\n    }\r\n    return mods;\r\n  }\r\n\r\n  render() {\r\n    if (this.props.modelsModified !== undefined) {\r\n      let model: any;\r\n      model = this.props.modelsModified[0].modified;\r\n      let fields: any;\r\n      if (this.props.operation === \"models\") {\r\n        fields = {\r\n          vendor: \"Vendor\",\r\n          model_number: \"Model Number\",\r\n          height: \"Height\",\r\n          display_color: \"Display Color\",\r\n          network_ports: \"Network Ports\",\r\n          power_ports: \"Power Ports\",\r\n          cpu: \"CPU\",\r\n          memory: \"Memory\",\r\n          storage: \"Storage\",\r\n          comment: \"Comments\",\r\n          id: \"\",\r\n          network_port_name_1: \"Network Port #1 Name\",\r\n          network_port_name_2: \"Network Port #2 Name\",\r\n          network_port_name_3: \"Network Port #3 Name\",\r\n          network_port_name_4: \"Network Port #4 Name\",\r\n        };\r\n      } else if (this.props.operation === \"assets\") {\r\n        fields = {\r\n          asset_number: \"Asset Number\",\r\n          hostname: \"Hostname\",\r\n          datacenter: \"Datacenter\",\r\n          rack_position: \"Rack position (U)\",\r\n          model: \"Model\",\r\n          rack: \"Rack\",\r\n          owner: \"Owner\",\r\n          comment: \"Comments\",\r\n          id: \"\",\r\n          power_port_connection_1: \"Power Port #1 Connection\",\r\n          power_port_connection_2: \"Power Port #2 Connection\",\r\n        };\r\n      } else if (this.props.operation === \"network\") {\r\n        fields = {\r\n          src_hostname: \"Source Hostname\",\r\n          src_port: \"Source Port\",\r\n          src_mac: \"Source MAC\",\r\n          dest_hostname: \"Destination Hostname\",\r\n          dest_port: \"Destination Port\",\r\n        };\r\n      }\r\n\r\n      return (\r\n        <div>\r\n          {this.renderModifications(model, fields)}\r\n          <h1> </h1>\r\n          <AnchorButton\r\n            className={\"upload-button-import\"}\r\n            large={true}\r\n            intent=\"primary\"\r\n            icon=\"import\"\r\n            text=\"Confirm Changes\"\r\n            onClick={() => {\r\n              if (\r\n                this.state.modifiedModels.length !== 0 &&\r\n                this.props.operation === \"models\"\r\n              ) {\r\n                let modified: Array<ModelObjectMod>;\r\n                modified = [];\r\n                for (var i = 0; i < this.state.modifiedModels.length; i++) {\r\n                  if (this.state.modifiedModels[i].checked)\r\n                    modified.push(this.state.modifiedModels[i].model);\r\n                }\r\n                uploadModified(\r\n                  modified,\r\n                  this.props.token,\r\n                  this.props.operation\r\n                ).then(\r\n                  (res) => {\r\n                    console.log(this.props);\r\n                    let toasts: Array<string>;\r\n                    toasts = [];\r\n                    let types: Array<string>;\r\n                    types = [];\r\n                    toasts.push(\r\n                      \"Success! Modified: \" +\r\n                        modified.length +\r\n                        \"; Added: \" +\r\n                        this.props.modelsAdded! +\r\n                        \"; Ignored: \" +\r\n                        (this.props.modelsIgnored! +\r\n                          this.props.modelsModified!.length -\r\n                          modified.length)\r\n                    );\r\n                    types.push(Intent.SUCCESS);\r\n                    if (res.warning_message) {\r\n                      toasts.push(res.warning_message);\r\n                      types.push(Intent.WARNING);\r\n                    }\r\n                    this.setState({\r\n                      modifiedModels: [],\r\n                    });\r\n                    this.props.callback(toasts, types);\r\n                  },\r\n                  (err) => {\r\n                    this.props.callback(\r\n                      [err.response.data.failure_message],\r\n                      [Intent.DANGER]\r\n                    );\r\n                  }\r\n                );\r\n              } else if (\r\n                this.state.modifiedModels.length !== 0 &&\r\n                this.props.operation === \"assets\"\r\n              ) {\r\n                // TODO check this works and refactor\r\n                let modified: Array<AssetObject>;\r\n                modified = [];\r\n                for (i = 0; i < this.state.modifiedModels.length; i++) {\r\n                  if (this.state.modifiedModels[i].checked)\r\n                    modified.push(this.state.modifiedModels[i].model);\r\n                }\r\n                uploadModified(\r\n                  modified,\r\n                  this.props.token,\r\n                  this.props.operation\r\n                ).then(\r\n                  (res) => {\r\n                    let toasts: Array<string>;\r\n                    toasts = [];\r\n                    let types: Array<string>;\r\n                    types = [];\r\n                    toasts.push(\r\n                      \"Success! Modified: \" +\r\n                        modified.length +\r\n                        \"; Added: \" +\r\n                        this.props.modelsAdded! +\r\n                        \"; Ignored: \" +\r\n                        (this.props.modelsIgnored! +\r\n                          this.props.modelsModified!.length -\r\n                          modified.length)\r\n                    );\r\n                    types.push(Intent.SUCCESS);\r\n                    if (res.warning_message) {\r\n                      toasts.push(res.warning_message);\r\n                      types.push(Intent.WARNING);\r\n                    }\r\n                    this.setState({\r\n                      modifiedModels: [],\r\n                    });\r\n                    this.props.callback(toasts, types);\r\n                  },\r\n                  (err) => {\r\n                    this.props.callback(\r\n                      [err.response.data.failure_message],\r\n                      [Intent.DANGER]\r\n                    );\r\n                  }\r\n                );\r\n              } else {\r\n                let modified: Array<NetworkConnection>;\r\n                modified = [];\r\n                for (i = 0; i < this.state.modifiedModels.length; i++) {\r\n                  if (this.state.modifiedModels[i].checked)\r\n                    modified.push(this.state.modifiedModels[i].model);\r\n                }\r\n                uploadModified(\r\n                  modified,\r\n                  this.props.token,\r\n                  this.props.operation\r\n                ).then(\r\n                  (res) => {\r\n                    // this.addSuccessToast(\r\n                    //   \"Success! Modified: \" +\r\n                    //     modified.length +\r\n                    //     \"; Added: \" +\r\n                    //     this.props.modelsAdded! +\r\n                    //     \"; Ignored: \" +\r\n                    //     (this.props.modelsIgnored! +\r\n                    //       this.props.modelsModified!.length -\r\n                    //       modified.length)\r\n                    // );\r\n                    let toasts: Array<string>;\r\n                    toasts = [];\r\n                    let types: Array<string>;\r\n                    types = [];\r\n                    toasts.push(\r\n                      \"Success! Modified: \" +\r\n                        modified.length +\r\n                        \"; Added: \" +\r\n                        this.props.modelsAdded! +\r\n                        \"; Ignored: \" +\r\n                        (this.props.modelsIgnored! +\r\n                          this.props.modelsModified!.length -\r\n                          modified.length)\r\n                    );\r\n                    types.push(Intent.SUCCESS);\r\n                    if (res.warning_message) {\r\n                      toasts.push(res.warning_message);\r\n                      types.push(Intent.WARNING);\r\n                    }\r\n                    this.setState({\r\n                      modifiedModels: [],\r\n                    });\r\n                    this.props.callback(toasts, types);\r\n                  },\r\n                  (err) => {\r\n                    this.props.callback(\r\n                      [err.response.data.failure_message],\r\n                      [Intent.DANGER]\r\n                    );\r\n                  }\r\n                );\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return <p>No data</p>;\r\n    }\r\n  }\r\n}\r\n// TODO make Array<ModelObjectMod any, assuming the POST header format is the same\r\nasync function uploadModified(\r\n  modelList: Array<any>,\r\n  token: string,\r\n  operation: string\r\n) {\r\n  console.log(API_ROOT + \"api/\" + operation + \"/bulk-approve\");\r\n  console.log(token);\r\n  console.log(modelList);\r\n  const headers = {\r\n    headers: {\r\n      Authorization: \"Token \" + token,\r\n    },\r\n  };\r\n  if (operation === \"network\") {\r\n    return await axios\r\n      .post(\r\n        API_ROOT + \"api/assets/network-bulk-approve\",\r\n        { approved_modifications: modelList },\r\n        headers\r\n      )\r\n      .then((res) => {\r\n        const data = res.data;\r\n        return data;\r\n      });\r\n  }\r\n  return await axios\r\n    .post(\r\n      API_ROOT + \"api/\" + operation + \"/bulk-approve\",\r\n      { approved_modifications: modelList },\r\n      headers\r\n    )\r\n    .then((res) => {\r\n      console.log(res.data);\r\n      const data = res.data;\r\n      return data;\r\n    });\r\n}\r\n\r\ninterface CheckboxProps {\r\n  linkedModel: any;\r\n  callback: Function;\r\n}\r\n\r\nclass Checks extends React.PureComponent<RouteComponentProps & CheckboxProps> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <label className={\"bp3-control bp3-checkbox\"}>\r\n        <input type=\"checkbox\" onChange={this.handleChange} />\r\n        <span className={\"bp3-control-indicator\"}></span>\r\n        Replace existing with modified?\r\n      </label>\r\n    );\r\n  }\r\n\r\n  private handleChange() {\r\n    this.props.callback(this.props.linkedModel);\r\n  }\r\n}\r\n\r\nconst mapStatetoProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n  };\r\n};\r\n\r\nexport default withRouter(connect(mapStatetoProps)(Modifier));\r\n","import {\r\n  Alert,\r\n  AnchorButton,\r\n  Button,\r\n  ButtonGroup,\r\n  Classes,\r\n  Dialog,\r\n  Overlay,\r\n  IToastProps,\r\n  Toaster,\r\n  Spinner,\r\n  Intent,\r\n  Position,\r\n} from \"@blueprintjs/core\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport axios from \"axios\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport { API_ROOT } from \"../../utils/api-config\";\r\nimport { FileSelector } from \"../lib/fileSelect\";\r\nimport \"./import.scss\";\r\nimport InstructionsLite from \"./importInstructionsLite\";\r\nimport { Modifier } from \"./viewModified\";\r\n\r\nvar console: any = {};\r\nconsole.log = function () {};\r\ninterface ImportProps {\r\n  token: string;\r\n}\r\n\r\ninterface AlertState {\r\n  uploadFileIsOpen: boolean;\r\n  modelAlterationsIsOpen: boolean;\r\n  assetAlterationsIsOpen: boolean;\r\n  networkAlterationsIsOpen: boolean;\r\n  selectedFile?: File;\r\n  encodedFile?: string;\r\n  loadedModels: any;\r\n  loadedAssets: any;\r\n  modifiedModels?: Array<any>;\r\n  modifiedAssets?: Array<any>;\r\n  modifiedNetwork?: Array<any>;\r\n  ignoredModels?: number;\r\n  ignoredAssets?: number;\r\n  ignoredNetwork?: number;\r\n  addedModels?: number;\r\n  addedAssets?: number;\r\n  addedNetwork?: number;\r\n  uploading: boolean;\r\n  notify: boolean;\r\n  assetUploadType: string;\r\n}\r\n\r\nexport class BulkImport extends React.PureComponent<\r\n  RouteComponentProps & ImportProps,\r\n  AlertState\r\n> {\r\n  public state: AlertState = {\r\n    uploadFileIsOpen: false,\r\n    modelAlterationsIsOpen: false,\r\n    assetAlterationsIsOpen: false,\r\n    networkAlterationsIsOpen: false,\r\n    loadedModels: [],\r\n    loadedAssets: [],\r\n    uploading: false,\r\n    notify: false,\r\n    assetUploadType: \"assets\",\r\n  };\r\n\r\n  private toaster: Toaster = {} as Toaster;\r\n  private addSuccessToast(message: string) {\r\n    this.addToast({ message: message, intent: Intent.PRIMARY });\r\n  }\r\n  private addErrorToast(message: string) {\r\n    this.addToast({ message: message, intent: Intent.DANGER });\r\n  }\r\n  private addToast(toast: IToastProps) {\r\n    toast.timeout = 5000;\r\n    this.toaster.show(toast);\r\n  }\r\n  private addWarnToast = (message: string) => {\r\n    this.addToast({\r\n      message: message,\r\n      intent: Intent.WARNING,\r\n    });\r\n  };\r\n  private refHandlers = {\r\n    toaster: (ref: Toaster) => (this.toaster = ref),\r\n  };\r\n\r\n  private createAlertToasts(toasts: Array<string>, types: Array<string>) {\r\n    for (let i = 0; i < toasts.length; i++) {\r\n      if (types[i] === Intent.SUCCESS) {\r\n        this.addSuccessToast(toasts[i]);\r\n      } else if (types[i] === Intent.WARNING) {\r\n        this.addWarnToast(toasts[i]);\r\n      } else if (types[i] === Intent.DANGER) {\r\n        this.addErrorToast(toasts[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let params: any;\r\n    params = this.props.match.params;\r\n    const resourceType: string = params.resourceType;\r\n    console.log(\"params\");\r\n    console.log(params);\r\n    //const resourceType = params.resourceType;\r\n    //console.log(\"resourceType\")\r\n    console.log(resourceType);\r\n    const uploadType =\r\n      resourceType === \"models\" ? resourceType : this.state.assetUploadType;\r\n    const selectButtonText = \"Select \" + uploadType + \" file\";\r\n    return (\r\n      <div className={Classes.DARK + \" import\"}>\r\n        <Toaster\r\n          autoFocus={false}\r\n          canEscapeKeyClear={true}\r\n          position={Position.TOP}\r\n          ref={this.refHandlers.toaster}\r\n        />\r\n        <div className={\"row\"}>\r\n          <div className={\"column-third-import\"}>\r\n            {resourceType === \"assets\" ? (\r\n              <ButtonGroup fill={false} style={{ marginTop: 40 }}>\r\n                <Button\r\n                  className=\"import-button\"\r\n                  active={this.state.assetUploadType === \"assets\"}\r\n                  text=\"assets\"\r\n                  onClick={(e: any) => {\r\n                    this.setState({ assetUploadType: \"assets\" });\r\n                  }}\r\n                />\r\n                <Button\r\n                  className=\"import-button\"\r\n                  active={this.state.assetUploadType === \"network connections\"}\r\n                  text=\"network connections\"\r\n                  onClick={(e: any) => {\r\n                    this.setState({ assetUploadType: \"network connections\" });\r\n                  }}\r\n                />\r\n              </ButtonGroup>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n        <div className={\"row\"}>\r\n          <div className={\"column-third-import\"}>\r\n            <p> </p>\r\n            <AnchorButton\r\n              className=\"import-button\"\r\n              large={true}\r\n              intent=\"primary\"\r\n              icon=\"import\"\r\n              text={selectButtonText}\r\n              onClick={this.handleFilepickerOpen}\r\n              style={{ marginTop: 20, marginBottom: 40 }}\r\n            />\r\n            <Overlay\r\n              isOpen={this.state.uploading}\r\n              className={\"uploading-overlay\"}\r\n            >\r\n              {\" \"}\r\n            </Overlay>\r\n            <Alert\r\n              cancelButtonText=\"Cancel\"\r\n              confirmButtonText=\"Confirm Upload\"\r\n              intent=\"primary\"\r\n              isOpen={this.state.uploadFileIsOpen}\r\n              onCancel={this.handleFilepickerCancel}\r\n              onConfirm={this.handleFileUpload}\r\n            >\r\n              <p>Choose a file</p>\r\n              <FileSelector {...this.props} callback={this.setFile} />\r\n            </Alert>\r\n            {this.state.uploading ? (\r\n              <div>\r\n                <p>Uploading data...</p>\r\n                <Spinner size={Spinner.SIZE_STANDARD} />\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <Dialog\r\n            isOpen={this.state.modelAlterationsIsOpen}\r\n            onClose={() =>\r\n              this.setState({\r\n                modelAlterationsIsOpen: false,\r\n                loadedModels: undefined,\r\n                modifiedModels: undefined,\r\n              })\r\n            }\r\n            className={Classes.DARK + \" modify-table\"}\r\n            usePortal={true}\r\n            isCloseButtonShown={true}\r\n            title={\"Model Modifications Menu\"}\r\n          >\r\n            <Modifier\r\n              {...this.props}\r\n              modelsModified={this.state.modifiedModels}\r\n              modelsAdded={this.state.addedModels}\r\n              modelsIgnored={this.state.ignoredModels}\r\n              callback={(toast: Array<string>, messageType: Array<string>) => {\r\n                this.setState({\r\n                  modelAlterationsIsOpen: false,\r\n                  modifiedModels: undefined,\r\n                  loadedModels: undefined,\r\n                });\r\n                console.log(this.state);\r\n                this.createAlertToasts(toast, messageType);\r\n              }}\r\n              operation={\"models\"}\r\n            />\r\n          </Dialog>\r\n          <Alert\r\n            isOpen={this.state.notify}\r\n            confirmButtonText=\"OK\"\r\n            onClose={() => this.setState({ notify: false })}\r\n          >\r\n            <p>Hello</p>\r\n          </Alert>\r\n        </div>\r\n        <div>\r\n          <Dialog\r\n            isOpen={this.state.assetAlterationsIsOpen}\r\n            onClose={() =>\r\n              this.setState({\r\n                assetAlterationsIsOpen: false,\r\n                loadedAssets: undefined,\r\n                modifiedAssets: undefined,\r\n              })\r\n            }\r\n            className={Classes.DARK + \" modify-table\"}\r\n            usePortal={true}\r\n            isCloseButtonShown={true}\r\n            title={\"Asset Modifications Menu\"}\r\n          >\r\n            <Modifier\r\n              {...this.props}\r\n              modelsModified={this.state.modifiedAssets}\r\n              modelsAdded={this.state.addedAssets}\r\n              modelsIgnored={this.state.ignoredAssets}\r\n              callback={(toast: Array<string>, messageType: Array<string>) => {\r\n                this.setState({\r\n                  assetAlterationsIsOpen: false,\r\n                  modifiedAssets: undefined,\r\n                  loadedAssets: undefined,\r\n                });\r\n                this.createAlertToasts(toast, messageType);\r\n              }}\r\n              operation={\"assets\"}\r\n            />\r\n          </Dialog>\r\n        </div>\r\n        <div>\r\n          <Dialog\r\n            isOpen={this.state.networkAlterationsIsOpen}\r\n            onClose={() =>\r\n              this.setState({\r\n                networkAlterationsIsOpen: false,\r\n                modifiedNetwork: undefined,\r\n              })\r\n            }\r\n            className={Classes.DARK + \" modify-table\"}\r\n            usePortal={true}\r\n            isCloseButtonShown={true}\r\n            title={\"Network Connections Modifications Menu\"}\r\n          >\r\n            <Modifier\r\n              {...this.props}\r\n              modelsModified={this.state.modifiedNetwork}\r\n              modelsAdded={this.state.addedNetwork}\r\n              modelsIgnored={this.state.ignoredNetwork}\r\n              callback={(toast: Array<string>, messageType: Array<string>) => {\r\n                this.setState({\r\n                  networkAlterationsIsOpen: false,\r\n                  modifiedNetwork: undefined,\r\n                });\r\n                this.createAlertToasts(toast, messageType);\r\n              }}\r\n              operation={\"network\"}\r\n            />\r\n          </Dialog>\r\n        </div>\r\n        <InstructionsLite uploadType={uploadType} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private handleFilepickerOpen = () =>\r\n    this.setState({ uploadFileIsOpen: true });\r\n  private handleFilepickerCancel = () =>\r\n    this.setState({ uploadFileIsOpen: false });\r\n\r\n  /*\r\n   * serializes data to JSON and\r\n   * makes backend requests\r\n   */\r\n  private handleFileUpload = () => {\r\n    /* Encode to base64 */\r\n    this.setState({ encodedFile: undefined });\r\n    if (this.state.selectedFile !== undefined) {\r\n      getBase64(this.state.selectedFile).then(\r\n        (res: any) => {\r\n          this.setState({\r\n            encodedFile: res,\r\n          });\r\n          this.handleUpload(res);\r\n        },\r\n        (err) => {\r\n          this.addErrorToast(err.response.data.failure_message);\r\n        }\r\n      );\r\n      this.setState({ uploadFileIsOpen: false });\r\n    } else {\r\n      this.addErrorToast(\"No file selected\");\r\n    }\r\n  };\r\n\r\n  private handleUpload = (encodedFile: any) => {\r\n    let params: any;\r\n    params = this.props.match.params;\r\n    const resourceType: string = params.resourceType;\r\n    const uploadType =\r\n      resourceType === \"models\" ? resourceType : this.state.assetUploadType;\r\n    console.log(encodedFile);\r\n    if (encodedFile !== undefined) {\r\n      this.setState({ uploading: true });\r\n      uploadBulk(encodedFile, this.props.token, uploadType).then(\r\n        (res) => {\r\n          console.log(res);\r\n          if (res.modifications.length !== 0) {\r\n            console.log(res.modifications);\r\n            if (uploadType === \"models\") {\r\n              this.setState({\r\n                modelAlterationsIsOpen: true,\r\n                uploading: false,\r\n                modifiedModels: res.modifications,\r\n                ignoredModels: res.ignored,\r\n                addedModels: res.added,\r\n              });\r\n            } else if (uploadType === \"assets\") {\r\n              this.setState({\r\n                assetAlterationsIsOpen: true,\r\n                uploading: false,\r\n                modifiedAssets: res.modifications,\r\n                ignoredAssets: res.ignored,\r\n                addedAssets: res.added,\r\n              });\r\n            } else {\r\n              this.setState({\r\n                networkAlterationsIsOpen: true,\r\n                uploading: false,\r\n                modifiedNetwork: res.modifications,\r\n                ignoredNetwork: res.ignored,\r\n                addedNetwork: res.added,\r\n              });\r\n            }\r\n          } else {\r\n            this.addSuccessToast(\r\n              \"Success! Modified: 0; Added: \" +\r\n                res.added +\r\n                \"; Ignored: \" +\r\n                res.ignored\r\n            );\r\n            if (params.resourceType === \"models\") {\r\n              this.setState({ uploading: false, loadedModels: undefined });\r\n            } else {\r\n              this.setState({ uploading: false, loadedAssets: undefined });\r\n            }\r\n          }\r\n        },\r\n        (err) => {\r\n          this.setState({ uploading: false });\r\n          this.addErrorToast(err.response.data.failure_message);\r\n        }\r\n      );\r\n    } else {\r\n      this.addWarnToast(\"No data to upload\");\r\n    }\r\n    console.log(\"here, regardless of error or success\");\r\n    this.setState({\r\n      loadedModels: undefined,\r\n      loadedAssets: undefined,\r\n      modifiedModels: undefined,\r\n      modifiedAssets: undefined,\r\n    });\r\n  };\r\n\r\n  /*\r\n   * Set file from fileSelect component\r\n   * to state in this component\r\n   */\r\n  private setFile = (file: File) => {\r\n    this.setState({\r\n      selectedFile: file,\r\n    });\r\n  };\r\n}\r\n\r\nasync function uploadBulk(encodedFile: string, token: string, type: string) {\r\n  const url =\r\n    type === \"network connections\"\r\n      ? API_ROOT + \"api/assets/network-bulk-upload\"\r\n      : API_ROOT + \"api/\" + type + \"/bulk-upload\";\r\n  console.log(url);\r\n  console.log(token);\r\n  const headers = {\r\n    headers: {\r\n      Authorization: \"Token \" + token,\r\n    },\r\n  };\r\n  const postBody = { import_csv: encodedFile };\r\n  return await axios.post(url, postBody, headers).then((res) => {\r\n    console.log(res.data);\r\n    const data = res.data;\r\n    return data;\r\n  });\r\n}\r\n\r\nasync function getBase64(file: File) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    let content = \"\";\r\n    reader.onload = function (e: any) {\r\n      content = e.target.result;\r\n      const result = content;\r\n      resolve(result);\r\n    };\r\n    reader.onerror = function (e: any) {\r\n      reject(e);\r\n    };\r\n    reader.readAsDataURL(file);\r\n  });\r\n}\r\n\r\nconst mapStatetoProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n  };\r\n};\r\n\r\nexport default withRouter(connect(mapStatetoProps)(BulkImport));\r\n","import { Classes, Collapse } from \"@blueprintjs/core\";\r\nimport * as React from \"react\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport ElementTabContainer from \"../elementView/elementTabContainer\";\r\n\r\n// var console: any = {};\r\n// console.log = function() {};\r\ninterface LandingViewState {}\r\ninterface LandingViewProps {}\r\nclass LandingView extends React.Component<\r\n  RouteComponentProps & LandingViewProps,\r\n  LandingViewState\r\n> {\r\n  showTabs() {\r\n    const regex = new RegExp(\r\n      \"^/dashboard/(assets|models|datacenters|racks)|^/dashboard$\"\r\n    );\r\n    if (regex.exec(this.props.location.pathname)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        <div className={Classes.DARK + \" landing-view \"}>\r\n          <Collapse\r\n            isOpen={this.showTabs()}\r\n            transitionDuration={0}\r\n            keepChildrenMounted={true}\r\n          >\r\n            <ElementTabContainer {...this.props} />\r\n          </Collapse>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LandingView;\r\n","import \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport * as React from \"react\";\r\nimport {\r\n  Classes,\r\n  Pre,\r\n  Tooltip,\r\n  Position,\r\n  HTMLSelect,\r\n  Icon,\r\n} from \"@blueprintjs/core\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport \"../elementView//elementView.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { API_ROOT } from \"../../utils/api-config\";\r\nimport axios from \"axios\";\r\nimport \"./logs.scss\";\r\nimport {\r\n  FilterTypes,\r\n  TextFilterTypes,\r\n  PagingTypes,\r\n} from \"../elementView/elementUtils\";\r\nimport { IconNames } from \"@blueprintjs/icons\";\r\nimport { ROUTES } from \"../../utils/utils\";\r\n\r\nexport function getLogFilters(filterValue: string) {\r\n  const username_filter = {\r\n    field: \"user__username\",\r\n    filter_type: FilterTypes.TEXT,\r\n    filter: {\r\n      value: filterValue,\r\n      match_type: TextFilterTypes.CONTAINS,\r\n    },\r\n  };\r\n  const hostname_filter = {\r\n    field: \"related_asset__hostname\",\r\n    filter_type: FilterTypes.TEXT,\r\n    filter: {\r\n      value: filterValue,\r\n      match_type: TextFilterTypes.CONTAINS,\r\n    },\r\n  };\r\n  if (Number(filterValue)) {\r\n    const asset_number_filter = {\r\n      field: \"related_asset__asset_number\",\r\n      filter_type: FilterTypes.NUMERIC,\r\n      filter: {\r\n        max: Number(filterValue),\r\n        min: Number(filterValue),\r\n      },\r\n    };\r\n    return [username_filter, hostname_filter, asset_number_filter];\r\n  } else {\r\n    return [username_filter, hostname_filter];\r\n  }\r\n}\r\ninterface LogEntry {\r\n  id: number;\r\n  date: string;\r\n  log_content: string;\r\n  user: number;\r\n  related_asset?: number;\r\n  related_model?: number;\r\n}\r\ninterface LogsProps {\r\n  token: string;\r\n}\r\ninterface LogsState {\r\n  logs: Array<LogEntry>;\r\n  curr_page: number;\r\n  total_pages: number;\r\n  page_type: PagingTypes;\r\n  search_query?: string;\r\n  filters?: Array<any>;\r\n  is_state_loaded: boolean;\r\n}\r\nclass Logs extends React.Component<LogsProps & RouteComponentProps, LogsState> {\r\n  public state: LogsState = {\r\n    logs: [],\r\n    curr_page: 1,\r\n    total_pages: 0,\r\n    page_type: PagingTypes.FIFTY,\r\n    search_query: undefined,\r\n    filters: undefined,\r\n    is_state_loaded: false,\r\n  };\r\n  private getTotalPages = async (\r\n    page_size: number,\r\n    filters?: Array<any>\r\n  ): Promise<number> => {\r\n    const config = {\r\n      headers: {\r\n        Authorization: \"Token \" + this.props.token,\r\n      },\r\n      params: {\r\n        page_size,\r\n      },\r\n    };\r\n    const body =\r\n      filters !== undefined\r\n        ? {\r\n            filters: filters,\r\n          }\r\n        : {};\r\n    return await axios\r\n      .post(API_ROOT + \"api/logs/pages\", body, config)\r\n      .then((res) => {\r\n        return res.data.page_count;\r\n      });\r\n  };\r\n  private getLogs = async (\r\n    page: number,\r\n    page_type: PagingTypes,\r\n    filters?: Array<any>\r\n  ): Promise<Array<LogEntry>> => {\r\n    const config = {\r\n      headers: {\r\n        Authorization: \"Token \" + this.props.token,\r\n      },\r\n      params:\r\n        page_type === PagingTypes.ALL\r\n          ? {}\r\n          : {\r\n              page_size: page_type,\r\n              page,\r\n            },\r\n    };\r\n    const body =\r\n      filters !== undefined\r\n        ? {\r\n            filters: filters,\r\n          }\r\n        : {};\r\n    return await axios\r\n      .post(API_ROOT + \"api/logs/get-many\", body, config)\r\n      .then((res) => {\r\n        return res.data.logs;\r\n      });\r\n  };\r\n  private updateLogsAndPages = (\r\n    page_number: number,\r\n    page_type: PagingTypes,\r\n    filters?: Array<any>\r\n  ) => {\r\n    this.getLogs(page_number, page_type, filters).then((res) => {\r\n      this.setState({\r\n        logs: res,\r\n      });\r\n    });\r\n    if (page_type !== PagingTypes.ALL) {\r\n      this.getTotalPages(page_type, filters).then((res) => {\r\n        this.setState({\r\n          total_pages: res,\r\n        });\r\n      });\r\n    }\r\n  };\r\n  private resetPage = () => {\r\n    this.setState({\r\n      curr_page: 1,\r\n    });\r\n  };\r\n  private previousPage = () => {\r\n    if (this.state.curr_page > 1) {\r\n      const next_page = this.state.curr_page - 1;\r\n      this.getLogs(next_page, this.state.page_type).then((res) => {\r\n        this.setState({\r\n          logs: res,\r\n          curr_page: next_page,\r\n        });\r\n      });\r\n    }\r\n  };\r\n  private nextPage = () => {\r\n    if (this.state.curr_page < this.state.total_pages) {\r\n      const next_page = this.state.curr_page + 1;\r\n      this.getLogs(next_page, this.state.page_type).then((res) => {\r\n        this.setState({\r\n          logs: res,\r\n          curr_page: next_page,\r\n        });\r\n      });\r\n    }\r\n  };\r\n  private handlePagingChange = (page: PagingTypes) => {\r\n    this.resetPage();\r\n    this.setState({\r\n      page_type: page,\r\n    });\r\n    this.updateLogsAndPages(1, page, this.state.filters);\r\n  };\r\n  private handleSearch = () => {\r\n    if (this.state.search_query !== undefined) {\r\n      const query_filters = getLogFilters(this.state.search_query);\r\n      this.setState({\r\n        filters: query_filters,\r\n      });\r\n      this.resetPage();\r\n      this.updateLogsAndPages(1, this.state.page_type, query_filters);\r\n    } else {\r\n      this.setState({\r\n        filters: undefined,\r\n      });\r\n      this.resetPage();\r\n      this.updateLogsAndPages(1, this.state.page_type);\r\n    }\r\n  };\r\n  private renderLinkedLog(log: LogEntry) {\r\n    if (log.related_asset) {\r\n      const id = log.related_asset.toString();\r\n      return (\r\n        <div>\r\n          <Tooltip\r\n            content=\"Click to see related asset\"\r\n            position={Position.BOTTOM_RIGHT}\r\n          >\r\n            <a className=\"log-link\" href={ROUTES.ASSETS + \"/\" + id}>\r\n              {log.log_content}\r\n            </a>\r\n          </Tooltip>\r\n        </div>\r\n      );\r\n    } else if (log.related_model) {\r\n      const id = log.related_model.toString();\r\n      return (\r\n        <div>\r\n          <Tooltip\r\n            content=\"Click to see related model\"\r\n            position={Position.BOTTOM_RIGHT}\r\n          >\r\n            <a className=\"log-link\" href={ROUTES.MODELS + \"/\" + id}>\r\n              {log.log_content}\r\n            </a>\r\n          </Tooltip>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <Tooltip>\r\n            <p className=\"log-no-link\">{log.log_content}</p>\r\n          </Tooltip>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  onFormSubmit = (e: any) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  public render() {\r\n    if (!this.state.is_state_loaded) {\r\n      this.setState({\r\n        is_state_loaded: true,\r\n      });\r\n      this.updateLogsAndPages(\r\n        this.state.curr_page,\r\n        this.state.page_type,\r\n        this.state.filters\r\n      );\r\n    }\r\n    return (\r\n      <div className={Classes.DARK + \" log-view\"}>\r\n        <h1>Audit Logs</h1>\r\n        <div className={Classes.DARK + \" bp3-input-group .modifier\"}>\r\n          <span className=\"search-span bp3-icon bp3-icon-search\"></span>\r\n          <form onSubmit={this.onFormSubmit}>\r\n            <span></span>\r\n            <input\r\n              className=\"search-input bp3-input .modifier\"\r\n              type=\"text\"\r\n              placeholder=\"Search logs by username, asset number, or asset hostname\"\r\n              dir=\"auto\"\r\n              onChange={(e: any) =>\r\n                this.setState({\r\n                  search_query: e.currentTarget.value,\r\n                })\r\n              }\r\n            />\r\n            <button\r\n              className=\"search-button bp3-button bp3-minimal bp3-intent-primary bp3-icon-arrow-right .modifier\"\r\n              onClick={() => this.handleSearch()}\r\n            ></button>\r\n          </form>\r\n        </div>\r\n        <div className=\"page-control\">\r\n          <HTMLSelect\r\n            onChange={(e: any) => this.handlePagingChange(e.target.value)}\r\n          >\r\n            {\" \"}\r\n            <option> {PagingTypes.FIFTY}</option>\r\n            <option>{PagingTypes.HUNDRED}</option>\r\n            <option>{PagingTypes.ALL}</option>\r\n          </HTMLSelect>\r\n          {this.state.page_type !== PagingTypes.ALL\r\n            ? [\r\n                <span>\r\n                  <Icon\r\n                    className=\"icon\"\r\n                    icon={IconNames.CARET_LEFT}\r\n                    iconSize={Icon.SIZE_LARGE}\r\n                    onClick={() => this.previousPage()}\r\n                  />\r\n                </span>,\r\n                <span>\r\n                  page {this.state.curr_page} of {this.state.total_pages}\r\n                </span>,\r\n                <span>\r\n                  <Icon\r\n                    className=\"icon\"\r\n                    icon={IconNames.CARET_RIGHT}\r\n                    iconSize={Icon.SIZE_LARGE}\r\n                    onClick={() => this.nextPage()}\r\n                  />\r\n                </span>,\r\n              ]\r\n            : null}\r\n        </div>\r\n        <div>\r\n          <Pre className=\"log-block\">\r\n            {this.state.logs.map((log) => this.renderLinkedLog(log))}\r\n          </Pre>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Logs);\r\n","import {\r\n  Alignment,\r\n  AnchorButton,\r\n  Button,\r\n  Classes,\r\n  MenuItem,\r\n  Navbar,\r\n  NavbarDivider,\r\n  NavbarGroup,\r\n  NavbarHeading,\r\n} from \"@blueprintjs/core\";\r\nimport { IconNames } from \"@blueprintjs/icons\";\r\nimport axios from \"axios\";\r\nimport * as React from \"react\";\r\nimport Banner from \"react-js-banner\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { BrowserRouter as Router, withRouter } from \"react-router-dom\";\r\nimport { isNullOrUndefined } from \"util\";\r\nimport {\r\n  ChangePlanSelect,\r\n  filterChangePlan,\r\n  renderChangePlanItem,\r\n} from \"../../forms/formUtils\";\r\nimport * as actions from \"../../store/actions/state\";\r\nimport { API_ROOT } from \"../../utils/api-config\";\r\nimport { ChangePlan, ElementType, getHeaders, ROUTES } from \"../../utils/utils\";\r\nimport \"./navigation.scss\";\r\nimport { PermissionState } from \"../../utils/permissionUtils\";\r\nexport interface NavigationProps {\r\n  isAuthenticated: boolean;\r\n  logout(): any;\r\n  setChangePlan(changePlan: ChangePlan | null): void;\r\n  isAdmin: boolean;\r\n  token: string;\r\n  changePlan: ChangePlan;\r\n  updateChangePlansBoolean: boolean;\r\n  updateChangePlans(status: boolean): void;\r\n  permissionState: PermissionState;\r\n}\r\n\r\nexport interface NavigationState {\r\n  username?: string;\r\n  changePlans: Array<ChangePlan>;\r\n}\r\n\r\nconst getChangePlanList = (token: string) => {\r\n  return axios.post(\r\n    API_ROOT + \"api/change-plans/get-many\",\r\n    {},\r\n    getHeaders(token)\r\n  );\r\n};\r\n\r\ntype NavigationPropsAll = NavigationProps & RouteComponentProps;\r\nexport class Navigation extends React.Component<\r\n  NavigationPropsAll,\r\n  NavigationState\r\n> {\r\n  public state = {\r\n    username: undefined,\r\n    changePlans: [],\r\n  };\r\n\r\n  sucessfulChangePlanRequest = false;\r\n  getUsername(token: string) {\r\n    const headers = {\r\n      headers: {\r\n        Authorization: \"Token \" + token,\r\n      },\r\n    };\r\n    axios\r\n      .get(API_ROOT + \"api/users/who-am-i\", headers)\r\n      .then((res) => {\r\n        this.setState({ username: res.data.username });\r\n      })\r\n      .catch((err) => {});\r\n  }\r\n  clearUsernameAndLogout() {\r\n    this.setState({ username: undefined });\r\n    this.props.logout();\r\n  }\r\n\r\n  public render() {\r\n    if (this.props.isAuthenticated && !this.state.username) {\r\n      this.getUsername(this.props.token);\r\n    }\r\n    if (\r\n      !this.sucessfulChangePlanRequest ||\r\n      this.props.updateChangePlansBoolean\r\n    ) {\r\n      getChangePlanList(this.props.token).then((res) => {\r\n        this.sucessfulChangePlanRequest = true;\r\n        this.props.updateChangePlans(false);\r\n        let items: Array<ChangePlan> = res.data[ElementType.CHANGEPLANS];\r\n        items = items.filter((changePlan) =>\r\n          isNullOrUndefined(changePlan.execution_time)\r\n        );\r\n        this.setState({\r\n          changePlans: items,\r\n        });\r\n      });\r\n    }\r\n\r\n    return (\r\n      <Router>\r\n        <div>\r\n          {this.props.changePlan ? (\r\n            <div\r\n              onClick={() =>\r\n                this.props.history.push(\r\n                  ROUTES.CHANGE_PLAN + \"/\" + this.props.changePlan.id\r\n                )\r\n              }\r\n            >\r\n              <Banner\r\n                title={\r\n                  \"Change Plan: \" +\r\n                  this.props.changePlan.name +\r\n                  \"\\n (click here to see summary of this change plan)\"\r\n                }\r\n              />\r\n            </div>\r\n          ) : null}\r\n          <Navbar className={Classes.DARK + \" nav-bar\"}>\r\n            <NavbarGroup>\r\n              <NavbarHeading\r\n                onClick={() => this.props.history.push(ROUTES.DASHBOARD)}\r\n              >\r\n                <AnchorButton\r\n                  onClick={() => this.props.history.push(ROUTES.DASHBOARD)}\r\n                  className=\"nav-bar-button\"\r\n                  icon=\"home\"\r\n                  text=\"HypoSoft\"\r\n                  minimal\r\n                />\r\n              </NavbarHeading>\r\n              <NavbarDivider />\r\n              {this.props.isAuthenticated ? (\r\n                <div>\r\n                  <Button\r\n                    minimal\r\n                    disabled={this.props.changePlan ? true : false}\r\n                    text=\"Report\"\r\n                    icon=\"numbered-list\"\r\n                    onClick={() => this.props.history.push(ROUTES.REPORT)}\r\n                  />\r\n                  <Button\r\n                    minimal\r\n                    onClick={() => this.props.history.push(ROUTES.LOGS)}\r\n                    icon=\"history\"\r\n                    text=\"Logs\"\r\n                    disabled={\r\n                      !(\r\n                        this.props.permissionState.admin ||\r\n                        this.props.permissionState.audit_read\r\n                      )\r\n                    }\r\n                  />\r\n                  <Button\r\n                    minimal\r\n                    icon=\"user\"\r\n                    onClick={() => this.props.history.push(ROUTES.USERS)}\r\n                    disabled={!this.props.permissionState.admin}\r\n                    text=\"Users\"\r\n                  />\r\n                  {/*  */}\r\n                </div>\r\n              ) : (\r\n                <p></p>\r\n              )}\r\n            </NavbarGroup>\r\n\r\n            <NavbarGroup align={Alignment.RIGHT}>\r\n              {this.props.isAuthenticated ? (\r\n                <div className=\"nav-buttons-right\">\r\n                  <ChangePlanSelect\r\n                    popoverProps={{\r\n                      minimal: true,\r\n                      popoverClassName: \"dropdown\",\r\n                      usePortal: true,\r\n                    }}\r\n                    disabled={this.props.location.pathname.includes(\r\n                      \"/dashboard/change-plans/\"\r\n                    )}\r\n                    items={this.state.changePlans}\r\n                    onItemSelect={(changePlan: ChangePlan) => {\r\n                      this.props.setChangePlan(changePlan);\r\n                    }}\r\n                    itemRenderer={renderChangePlanItem}\r\n                    itemPredicate={filterChangePlan}\r\n                    noResults={<MenuItem disabled={true} text=\"No results.\" />}\r\n                  >\r\n                    <Button\r\n                      minimal\r\n                      disabled={this.props.location.pathname.includes(\r\n                        \"/dashboard/change-plans/\"\r\n                      )}\r\n                      rightIcon=\"caret-down\"\r\n                      text={\r\n                        this.props.changePlan\r\n                          ? this.props.changePlan.name\r\n                          : \"Select Change Plan\"\r\n                      }\r\n                      icon={IconNames.GIT_BRANCH}\r\n                    />\r\n                  </ChangePlanSelect>\r\n\r\n                  {this.props.changePlan ? (\r\n                    <AnchorButton\r\n                      minimal\r\n                      disabled={this.props.location.pathname.includes(\r\n                        \"/dashboard/change-plans/\"\r\n                      )}\r\n                      icon={IconNames.DELETE}\r\n                      onClick={() => this.props.setChangePlan(null)}\r\n                    />\r\n                  ) : null}\r\n                  <AnchorButton\r\n                    onClick={() => this.props.history.push(ROUTES.CHANGE_PLAN)}\r\n                    icon=\"clipboard\"\r\n                    minimal\r\n                    text=\"Change Plans\"\r\n                  />\r\n                  <NavbarDivider />\r\n                  {this.state.username ? (\r\n                    <AnchorButton\r\n                      className=\"nav-bar-non-button nav-bar-button\"\r\n                      text={\"Welcome, \" + this.state.username}\r\n                      minimal\r\n                    />\r\n                  ) : null}\r\n\r\n                  <AnchorButton\r\n                    onClick={() => {\r\n                      this.clearUsernameAndLogout();\r\n                      this.props.history.push(ROUTES.LOGIN);\r\n                    }}\r\n                    className=\"nav-bar-button\"\r\n                    icon=\"user\"\r\n                    text=\"Logout\"\r\n                    minimal\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <AnchorButton\r\n                  onClick={() => this.props.history.push(ROUTES.LOGIN)}\r\n                  className=\"nav-bar-button\"\r\n                  icon=\"user\"\r\n                  text=\"Login\"\r\n                  minimal\r\n                />\r\n              )}\r\n            </NavbarGroup>\r\n          </Navbar>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    isAuthenticated: state.token !== null,\r\n    isAdmin: state.admin,\r\n    token: state.token,\r\n    changePlan: state.changePlan,\r\n    updateChangePlansBoolean: state.updateChangePlansBoolean,\r\n    permissionState: state.permissionState,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    logout: () => dispatch(actions.logout()),\r\n    updateChangePlans: (status: boolean) =>\r\n      dispatch(actions.updateChangePlans(status)),\r\n\r\n    setChangePlan: (changePlan: ChangePlan) =>\r\n      dispatch(actions.setChangePlan(changePlan)),\r\n  };\r\n};\r\nexport default withRouter(\r\n  connect(mapStateToProps, mapDispatchToProps)(Navigation)\r\n);\r\n","import {\r\n  Classes,\r\n  Card,\r\n  Elevation,\r\n  AnchorButton,\r\n  Button,\r\n  FormGroup,\r\n  MenuItem,\r\n  Tab,\r\n  Tabs,\r\n  TabId,\r\n  Alert,\r\n  Spinner,\r\n} from \"@blueprintjs/core\";\r\nimport * as React from \"react\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport { API_ROOT } from \"../../utils/api-config\";\r\nimport \"./report.scss\";\r\nimport {\r\n  DatacenterSelect,\r\n  filterDatacenter,\r\n  renderDatacenterItem,\r\n} from \"../../forms/formUtils\";\r\nimport { DatacenterObject, getHeaders } from \"../../utils/utils\";\r\n\r\ninterface ReportProps {\r\n  token: string;\r\n}\r\n\r\ninterface Allocation {\r\n  alloc_pct: number;\r\n}\r\n\r\ninterface ModelAlloc extends Allocation {\r\n  model_number: string;\r\n  vendor: string;\r\n}\r\n\r\ninterface OwnerAlloc extends Allocation {\r\n  owner: string;\r\n}\r\n\r\ninterface VendorAlloc extends Allocation {\r\n  vendor: string;\r\n}\r\n\r\ninterface ReportState {\r\n  datacenterSelectionAlert: boolean;\r\n  freeRack: number;\r\n  model_allocation: Array<ModelAlloc>;\r\n  owner_allocation: Array<OwnerAlloc>;\r\n  vendor_allocation: Array<VendorAlloc>;\r\n  state_loaded: boolean;\r\n  datacenter?: DatacenterObject;\r\n  datacenters?: Array<DatacenterObject>;\r\n  selectedTab: string;\r\n  datacenter_loaded: boolean;\r\n  no_data: boolean;\r\n}\r\nvar console: any = {};\r\nconsole.log = function () {};\r\n\r\nexport class Report extends React.PureComponent<\r\n  ReportProps & RouteComponentProps\r\n> {\r\n  public state: ReportState = {\r\n    freeRack: 0,\r\n    model_allocation: [],\r\n    owner_allocation: [],\r\n    vendor_allocation: [],\r\n    state_loaded: false,\r\n    selectedTab: \"global\",\r\n    datacenter_loaded: false,\r\n    datacenterSelectionAlert: false,\r\n    no_data: false,\r\n  };\r\n\r\n  private modelFields = {\r\n    vendor: \"Vendor\",\r\n    model_number: \"Model Number\",\r\n    allocation_percent: \"Allocation %\",\r\n  };\r\n  private ownerFields = {\r\n    owner: \"Owner\",\r\n    allocation_percent: \"Allocation %\",\r\n  };\r\n  private vendorFields = {\r\n    vendor: \"Vendor\",\r\n    allocation_percent: \"Allocation %\",\r\n  };\r\n\r\n  showReport = (field: string) => {\r\n    return (\r\n      <div>\r\n        {this.state.state_loaded ? (\r\n          this.state.no_data ? (\r\n            <Card elevation={Elevation.TWO}>\r\n              <h2 className={\"report-title\"}>No data available</h2>\r\n            </Card>\r\n          ) : (\r\n            <Card elevation={Elevation.TWO}>\r\n              <h2 className={\"report-title\"}>{field} Datacenter Report</h2>\r\n              <h4 className={\"report-summary\"}>\r\n                Percent of unused rack space:{\" \"}\r\n                {(this.state.freeRack * 100).toFixed(2)}%\r\n              </h4>\r\n              <h4 className={\"report-summary\"}>\r\n                Allocation of used rack space:\r\n              </h4>\r\n              <div className={\"row\"}>\r\n                <div className={\"column-third-report\"}>\r\n                  <h5>Used rack space by vendor:</h5>\r\n                </div>\r\n                <div className={\"column-third-right-report\"}>\r\n                  <h5>Used rack space by model:</h5>\r\n                </div>\r\n                <div className={\"column-third-right-report\"}>\r\n                  <h5>Used rack space by owner:</h5>\r\n                </div>\r\n              </div>\r\n              <div className={\"row\"}>\r\n                <div className={\"column-third-report\"}>\r\n                  <Tabular\r\n                    data={this.state.vendor_allocation}\r\n                    fields={this.vendorFields}\r\n                  />\r\n                </div>\r\n                <div className={\"column-third-right-report\"}>\r\n                  <Tabular\r\n                    data={this.state.model_allocation}\r\n                    fields={this.modelFields}\r\n                  />\r\n                </div>\r\n                <div className={\"column-third-right-report\"}>\r\n                  <Tabular\r\n                    data={this.state.owner_allocation}\r\n                    fields={this.ownerFields}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </Card>\r\n          )\r\n        ) : (\r\n          <Spinner />\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  showDatacenterReport = () => {\r\n    return (\r\n      <div>\r\n        <Card elevation={Elevation.TWO} className={\"row\"}>\r\n          {this.state.datacenters ? (\r\n            <FormGroup label=\"\" inline={true}>\r\n              <DatacenterSelect\r\n                popoverProps={{\r\n                  minimal: true,\r\n                  popoverClassName: \"dropdown\",\r\n                  usePortal: true,\r\n                }}\r\n                items={this.state.datacenters!}\r\n                onItemSelect={(datacenter: DatacenterObject) => {\r\n                  this.onDatacenterSelect(datacenter);\r\n                }}\r\n                itemRenderer={renderDatacenterItem}\r\n                itemPredicate={filterDatacenter}\r\n                noResults={<MenuItem disabled={true} text=\"No results.\" />}\r\n              >\r\n                <Button\r\n                  rightIcon=\"caret-down\"\r\n                  text={\r\n                    this.state.datacenter && this.state.datacenter.name\r\n                      ? this.state.datacenter.name\r\n                      : \"Select datacenter\"\r\n                  }\r\n                />\r\n              </DatacenterSelect>\r\n            </FormGroup>\r\n          ) : null}\r\n          <AnchorButton\r\n            small\r\n            text={\"View Datacenter Report\"}\r\n            onClick={() => {\r\n              if (!this.state.datacenter) {\r\n                this.setState({\r\n                  datacenterSelectionAlert: true,\r\n                });\r\n              } else {\r\n                this.setState({\r\n                  datacenter_loaded: true,\r\n                });\r\n                getDatacenterReport(\r\n                  this.props.token,\r\n                  this.state.datacenter\r\n                ).then((result) => {\r\n                  if (\r\n                    result.free_rackspace_percent === null ||\r\n                    result.free_rackspace_percent === undefined\r\n                  ) {\r\n                    this.setState({\r\n                      state_loaded: true,\r\n                      no_data: true,\r\n                    });\r\n                  } else {\r\n                    this.setState({\r\n                      freeRack: result.free_rackspace_percent,\r\n                      model_allocation: result.model_allocation,\r\n                      owner_allocation: result.owner_allocation,\r\n                      vendor_allocation: result.vendor_allocation,\r\n                      state_loaded: true,\r\n                    });\r\n                  }\r\n                });\r\n              }\r\n            }}\r\n          />\r\n        </Card>\r\n        {this.state.datacenter_loaded\r\n          ? this.showReport(this.state.datacenter!.name)\r\n          : null}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  onDatacenterSelect = (datacenter: DatacenterObject) => {\r\n    this.setState({\r\n      datacenter: datacenter,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .post(\r\n        API_ROOT + \"api/datacenters/get-many\",\r\n        {},\r\n        getHeaders(this.props.token)\r\n      )\r\n      .then((res) => {\r\n        const dcs = res.data.datacenters as Array<DatacenterObject>;\r\n        this.setState({\r\n          datacenters: dcs,\r\n        });\r\n        getGlobalReport(this.props.token).then((result) => {\r\n          this.setState({\r\n            freeRack: result.free_rackspace_percent,\r\n            model_allocation: result.model_allocation,\r\n            owner_allocation: result.owner_allocation,\r\n            vendor_allocation: result.vendor_allocation,\r\n            state_loaded: true,\r\n          });\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={Classes.DARK + \" report-all\"}>\r\n        <Tabs\r\n          className={\"report-all\"}\r\n          id=\"ReportTabs\"\r\n          selectedTabId={this.state.selectedTab}\r\n          animate={true}\r\n          onChange={(newTab: TabId) => {\r\n            this.setState({\r\n              freeRack: 0,\r\n              model_allocation: [],\r\n              owner_allocation: [],\r\n              vendor_allocation: [],\r\n              state_loaded: false,\r\n              datacenter_loaded: false,\r\n              no_data: false,\r\n            });\r\n            if (newTab === \"global\") {\r\n              getGlobalReport(this.props.token).then((result) => {\r\n                if (\r\n                  result.free_rackspace_percent === null ||\r\n                  result.free_rackspace_percent === undefined\r\n                ) {\r\n                  this.setState({\r\n                    state_loaded: true,\r\n                    no_data: true,\r\n                  });\r\n                } else {\r\n                  this.setState({\r\n                    freeRack: result.free_rackspace_percent,\r\n                    model_allocation: result.model_allocation,\r\n                    owner_allocation: result.owner_allocation,\r\n                    vendor_allocation: result.vendor_allocation,\r\n                    state_loaded: true,\r\n                  });\r\n                }\r\n              });\r\n            } else {\r\n              this.setState({\r\n                datacenter: undefined,\r\n                datacenter_loaded: false,\r\n              });\r\n            }\r\n            this.setState({ selectedTab: newTab });\r\n          }}\r\n        >\r\n          <Tab\r\n            className={\"report-all\"}\r\n            id=\"global\"\r\n            title=\"Global Report\"\r\n            panel={this.showReport(\"Global\")}\r\n          />\r\n          <Tab\r\n            className={\"report-all\"}\r\n            id=\"datacenter\"\r\n            title=\"Datacenter Report\"\r\n            panel={this.showDatacenterReport()}\r\n          />\r\n        </Tabs>\r\n        <Alert\r\n          className={Classes.DARK}\r\n          isOpen={this.state.datacenterSelectionAlert}\r\n          confirmButtonText={\"OK\"}\r\n          onConfirm={() => {\r\n            this.setState({\r\n              datacenterSelectionAlert: false,\r\n            });\r\n          }}\r\n        >\r\n          <p>Error: must select a datacenter</p>\r\n        </Alert>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface TabProps {\r\n  data: Array<Allocation>;\r\n  fields: any;\r\n}\r\n\r\nclass Tabular extends React.PureComponent<TabProps> {\r\n  render() {\r\n    return (\r\n      <table\r\n        className={\r\n          \"bp3-html-table bp3-interactive bp3-html-table-bordered bp3-html-table-striped\"\r\n        }\r\n      >\r\n        <thead>\r\n          <tr>\r\n            {Object.keys(this.props.data[0]).map((item: string) => {\r\n              console.log(item);\r\n              return <th>{this.props.fields[item]}</th>;\r\n            })}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {this.props.data.map((entry: any) => {\r\n            return (\r\n              <tr>\r\n                {Object.keys(entry).map((item: string) => {\r\n                  if (item === \"owner\" && entry[item] === null)\r\n                    entry[item] = \"(No owner)\";\r\n                  if (item === \"allocation_percent\")\r\n                    return <td>{(entry[item] * 100).toFixed(2)}</td>;\r\n                  else return <td>{entry[item]}</td>;\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nasync function getGlobalReport(token: string) {\r\n  const headers = {\r\n    headers: {\r\n      Authorization: \"Token \" + token,\r\n    },\r\n  };\r\n  return await axios\r\n    .get(API_ROOT + \"api/report/global\", headers)\r\n    .then((res) => {\r\n      return res.data;\r\n    });\r\n}\r\n\r\nasync function getDatacenterReport(\r\n  token: string,\r\n  datacenter: DatacenterObject\r\n) {\r\n  const headers = {\r\n    headers: {\r\n      Authorization: \"Token \" + token,\r\n    },\r\n  };\r\n  return await axios\r\n    .get(API_ROOT + \"api/report/datacenter/\" + datacenter.id, headers)\r\n    .then((res) => {\r\n      return res.data;\r\n    });\r\n}\r\n\r\nconst mapStatetoProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n  };\r\n};\r\n\r\nexport default withRouter(connect(mapStatetoProps)(Report));\r\n","import {\r\n  Alert,\r\n  AnchorButton,\r\n  Callout,\r\n  Classes,\r\n  Collapse,\r\n  Divider,\r\n  Intent,\r\n  IToastProps,\r\n  Position,\r\n  Pre,\r\n  Spinner,\r\n  Toaster,\r\n  Checkbox,\r\n} from \"@blueprintjs/core\";\r\nimport axios from \"axios\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { isNullOrUndefined } from \"util\";\r\nimport * as actions from \"../../store/actions/state\";\r\nimport { API_ROOT } from \"../../utils/api-config\";\r\nimport {\r\n  AssetCPObject,\r\n  AssetFieldsTable,\r\n  AssetObject,\r\n  ChangePlan,\r\n  getHeaders,\r\n  isModelObject,\r\n  isObject,\r\n  isRackObject,\r\n  ROUTES,\r\n} from \"../../utils/utils\";\r\nimport \"./changePlanner.scss\";\r\ninterface CPDetailViewProps {\r\n  token: string;\r\n  updateChangePlans(status: boolean): void;\r\n  setChangePlan(changePlan: ChangePlan | null): void;\r\n}\r\nenum ModificationType {\r\n  MODIFY = \"Modify\",\r\n  CREATE = \"Create\",\r\n  DECOMMISSION = \"Decommission\",\r\n}\r\n\r\ninterface Conflict {\r\n  conflict_message: string;\r\n  conflicting_asset: string;\r\n  conflict_resolvable: boolean;\r\n}\r\ninterface Modification {\r\n  title: string;\r\n  asset_cp: AssetCPObject;\r\n  type: ModificationType;\r\n  asset: AssetObject;\r\n  changes: Array<string>;\r\n  conflicts: Array<Conflict>;\r\n}\r\ninterface CPDetailViewState {\r\n  isOpen: Array<boolean>;\r\n  isAlertOpen: boolean;\r\n  changePlan: ChangePlan;\r\n  modifications: Array<Modification>;\r\n  username: string;\r\n  disableButtons: boolean;\r\n}\r\n\r\nfunction getChangePlanDetail(token: string, id: string) {\r\n  return axios.get(API_ROOT + \"api/change-plans/\" + id, getHeaders(token));\r\n}\r\nclass CPDetailView extends React.Component<\r\n  CPDetailViewProps & RouteComponentProps,\r\n  CPDetailViewState\r\n> {\r\n  route_id = (this.props.match.params as any).id;\r\n  loading = false;\r\n\r\n  dataLoaded = false;\r\n  openPrint = false;\r\n  public state = {\r\n    isOpen: [] as Array<boolean>,\r\n    changePlan: {} as ChangePlan,\r\n    modifications: [],\r\n    isAlertOpen: false,\r\n    username: \"\",\r\n    disableButtons: false,\r\n  };\r\n  printWorkOrder = () => {\r\n    this.getUsername(this.props.token);\r\n    const isOpen = this.state.isOpen.map(() => {\r\n      return true;\r\n    });\r\n    this.setState({\r\n      isOpen,\r\n    });\r\n    this.openPrint = true;\r\n  };\r\n\r\n  setButtonState() {\r\n    let disable = false;\r\n    if (\r\n      this.loading ||\r\n      this.state.modifications.length === 0 ||\r\n      !isNullOrUndefined(this.state.changePlan.execution_time)\r\n    ) {\r\n      disable = true;\r\n    }\r\n\r\n    this.state.modifications.forEach((modification: Modification) => {\r\n      if (modification.conflicts && modification.conflicts.length > 0) {\r\n        disable = true;\r\n      }\r\n    });\r\n    this.setState({\r\n      disableButtons: disable,\r\n    });\r\n  }\r\n  removeModification(modification: Modification) {\r\n    axios\r\n      .post(\r\n        API_ROOT +\r\n          \"api/change-plans/\" +\r\n          this.state.changePlan.id +\r\n          \"/remove-asset\",\r\n        { asset_cp: modification.asset_cp.id },\r\n        getHeaders(this.props.token)\r\n      )\r\n      .then((res) => {\r\n        this.addSuccessToast(res.data.success_message);\r\n        this.updateData();\r\n\r\n        // const modifications: Array<Modification> = this.state.modifications.slice();\r\n        // const index = modifications.indexOf(modification);\r\n        // modifications.splice(index, 1);\r\n        // console.log(modifications, index);\r\n        // const isOpen = this.state.isOpen;\r\n        // isOpen.splice(index, 1);\r\n        //   this.setState({\r\n        //     modifications,\r\n        //     isOpen\r\n        //   });\r\n      })\r\n      .catch((err) => {\r\n        this.addErrorToast(err.response.data.failure_message);\r\n      });\r\n  }\r\n  updateData() {\r\n    this.loading = true;\r\n    getChangePlanDetail(this.props.token, this.route_id)\r\n      .then((res) => {\r\n        this.loading = false;\r\n        this.dataLoaded = true;\r\n        const changePlan: ChangePlan = res.data.change_plan;\r\n        if (isNullOrUndefined(changePlan.execution_time)) {\r\n          this.props.setChangePlan(changePlan);\r\n        } else {\r\n          this.props.setChangePlan(null);\r\n        }\r\n        const isOpen = new Array(res.data.modifications.length).fill(false);\r\n        this.setState({\r\n          changePlan: res.data.change_plan,\r\n          modifications: res.data.modifications,\r\n          isOpen,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        this.loading = false;\r\n        this.addErrorToast(err.response.data.failure_message);\r\n      });\r\n  }\r\n\r\n  resolveConflict(\r\n    modification: Modification,\r\n    conflict: Conflict,\r\n    override_live: boolean\r\n  ) {\r\n    axios\r\n      .post(\r\n        API_ROOT +\r\n          \"api/change-plans/\" +\r\n          this.state.changePlan.id +\r\n          \"/resolve-conflict\",\r\n        { asset_cp: modification.asset_cp.id, override_live },\r\n        getHeaders(this.props.token)\r\n      )\r\n      .then((res) => {\r\n        this.addSuccessToast(res.data.success_message);\r\n        this.updateData();\r\n\r\n        // const modifications: Array<Modification> = this.state.modifications.slice();\r\n        // const index = modifications.indexOf(modification);\r\n        // if (override_live) {\r\n        //   modification.conflicts.splice(\r\n        //     modification.conflicts.indexOf(conflict),\r\n        //     1\r\n        //   );\r\n\r\n        //   modifications[index] = modification;\r\n        // } else {\r\n        //   modifications.splice(index, 1);\r\n        //   const isOpen = this.state.isOpen;\r\n        //   isOpen.splice(index, 1);\r\n        //   this.setState({\r\n        //     isOpen\r\n        //   });\r\n        // }\r\n        // this.setState({\r\n        //   modifications\r\n        // });\r\n      })\r\n      .catch((err) => {\r\n        this.addErrorToast(err.response.data.failure_message);\r\n      });\r\n  }\r\n  handleExecuteCancel() {\r\n    this.setState({\r\n      isAlertOpen: false,\r\n    });\r\n  }\r\n  handleExecute() {\r\n    axios\r\n      .post(\r\n        API_ROOT + \"api/change-plans/\" + this.state.changePlan.id + \"/execute\",\r\n        {},\r\n        getHeaders(this.props.token)\r\n      )\r\n      .then((res) => {\r\n        this.addSuccessToast(res.data.success_message);\r\n        this.setState({\r\n          isAlertOpen: false,\r\n        });\r\n        this.setState({\r\n          disableButtons: true,\r\n        });\r\n\r\n        this.updateData();\r\n      })\r\n      .catch((err) => {\r\n        this.addErrorToast(err.response.data.failure_message);\r\n        this.setState({\r\n          isAlertOpen: false,\r\n        });\r\n      });\r\n  }\r\n\r\n  toggleCollapse(index: number) {\r\n    const isOpen = this.state.isOpen;\r\n    isOpen[index] = !isOpen[index];\r\n    this.setState({\r\n      isOpen,\r\n    });\r\n  }\r\n  getHighlightStyle(modification: Modification, col: string) {\r\n    const highlight =\r\n      modification.changes && modification.changes.includes(col);\r\n\r\n    return {\r\n      fontWeight: highlight ? (\"bold\" as any) : (\"normal\" as any),\r\n      color: highlight ? \"#bf8c0a\" : \"white\",\r\n    };\r\n  }\r\n  private toaster: Toaster = {} as Toaster;\r\n  private addToast(toast: IToastProps) {\r\n    toast.timeout = 5000;\r\n    this.toaster.show(toast);\r\n  }\r\n\r\n  private refHandlers = {\r\n    toaster: (ref: Toaster) => (this.toaster = ref),\r\n  };\r\n\r\n  private addSuccessToast = (message: string) => {\r\n    this.addToast({ message: message, intent: Intent.PRIMARY });\r\n  };\r\n  private addWarnToast = (message: string) => {\r\n    this.addToast({\r\n      message: message,\r\n      intent: Intent.WARNING,\r\n    });\r\n  };\r\n  private addErrorToast = (message: string) => {\r\n    this.addToast({ message: message, intent: Intent.DANGER });\r\n  };\r\n  renderAssetData(\r\n    asset: AssetObject | AssetCPObject,\r\n    modification: Modification\r\n  ) {\r\n    return (\r\n      <table>\r\n        {Object.entries(asset).map(([col, value]) => {\r\n          let field;\r\n          if (col === \"network_ports\" && value) {\r\n            const network_ports: Array<string> = value;\r\n            field = <td> {network_ports.toString()}</td>;\r\n          } else if (isModelObject(value)) {\r\n            field = (\r\n              <td\r\n                style={this.getHighlightStyle(modification, col)}\r\n                className=\"clickable\"\r\n                onClick={(e) =>\r\n                  this.props.history.push(ROUTES.MODELS + \"/\" + value.id)\r\n                }\r\n              >\r\n                {value.vendor + \" \" + value.model_number}\r\n              </td>\r\n            );\r\n          } else if (isRackObject(value)) {\r\n            return [\r\n              <tr>\r\n                <td style={this.getHighlightStyle(modification, col)} key={col}>\r\n                  {AssetFieldsTable[col]}:\r\n                </td>\r\n\r\n                <td style={this.getHighlightStyle(modification, col)}>\r\n                  {value.row_letter + \"\" + value.rack_num}\r\n                </td>\r\n              </tr>,\r\n              <tr>\r\n                <td\r\n                  style={this.getHighlightStyle(modification, col)}\r\n                  key={\"datacenter\"}\r\n                >\r\n                  {AssetFieldsTable[\"rack__datacenter__name\"]}:\r\n                </td>\r\n\r\n                <td style={this.getHighlightStyle(modification, col)}>\r\n                  {value.datacenter.name}\r\n                </td>\r\n              </tr>,\r\n            ];\r\n          } else if (col === \"comment\") {\r\n            field = (\r\n              <td\r\n                style={this.getHighlightStyle(modification, col)}\r\n                className=\"comment\"\r\n              >\r\n                {value}\r\n              </td>\r\n            );\r\n          } else if (!isObject(value)) {\r\n            field = (\r\n              <td style={this.getHighlightStyle(modification, col)}>{value}</td>\r\n            );\r\n          } else if (col === \"network_connections\") {\r\n            return (\r\n              <tr>\r\n                <td style={this.getHighlightStyle(modification, col)} key={col}>\r\n                  Network Connections\r\n                </td>\r\n                <td style={this.getHighlightStyle(modification, col)}>\r\n                  <pre>{JSON.stringify(value, null, 2)}</pre>\r\n                </td>\r\n              </tr>\r\n            );\r\n          } else if (col === \"power_connections\") {\r\n            return (\r\n              <tr>\r\n                <td style={this.getHighlightStyle(modification, col)} key={col}>\r\n                  Power Connections\r\n                </td>\r\n                <td style={this.getHighlightStyle(modification, col)}>\r\n                  <pre>{JSON.stringify(value, null, 2)}</pre>\r\n                </td>\r\n              </tr>\r\n            );\r\n          }\r\n\r\n          return AssetFieldsTable[col] ? (\r\n            <tr>\r\n              <td\r\n                style={this.getHighlightStyle(modification, col)}\r\n                // className=\"label\"\r\n                key={col}\r\n              >\r\n                {AssetFieldsTable[col]}:\r\n              </td>\r\n\r\n              {field}\r\n            </tr>\r\n          ) : null;\r\n        })}\r\n      </table>\r\n    );\r\n  }\r\n  componentDidMount() {\r\n    if (!this.dataLoaded && this.route_id) {\r\n      this.loading = true;\r\n      getChangePlanDetail(this.props.token, this.route_id)\r\n        .then((res) => {\r\n          this.loading = false;\r\n          this.dataLoaded = true;\r\n\r\n          const changePlan: ChangePlan = res.data.change_plan;\r\n          if (isNullOrUndefined(changePlan.execution_time)) {\r\n            this.props.setChangePlan(changePlan);\r\n          } else {\r\n            this.props.setChangePlan(null);\r\n          }\r\n          this.setButtonState();\r\n          const isOpen = new Array(res.data.modifications.length).fill(false);\r\n          this.setState({\r\n            changePlan: res.data.change_plan,\r\n            modifications: res.data.modifications,\r\n            isOpen,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          this.loading = false;\r\n          this.addErrorToast(err.response.data.failure_message);\r\n        });\r\n    }\r\n  }\r\n  getUsername(token: string) {\r\n    const headers = {\r\n      headers: {\r\n        Authorization: \"Token \" + token,\r\n      },\r\n    };\r\n    axios\r\n      .get(API_ROOT + \"api/users/who-am-i\", headers)\r\n      .then((res) => {\r\n        this.setState({ username: res.data.username });\r\n      })\r\n      .catch((err) => {});\r\n  }\r\n  public render() {\r\n    if (\r\n      this.openPrint &&\r\n      this.state.isOpen.every((item: boolean) => item === true)\r\n    ) {\r\n      this.openPrint = false;\r\n      setTimeout(() => {\r\n        window.print();\r\n      }, 1000);\r\n    }\r\n    if (!this.dataLoaded && this.route_id) {\r\n      this.loading = true;\r\n      getChangePlanDetail(this.props.token, this.route_id)\r\n        .then((res) => {\r\n          this.loading = false;\r\n          this.dataLoaded = true;\r\n          const changePlan: ChangePlan = res.data.change_plan;\r\n          if (isNullOrUndefined(changePlan.execution_time)) {\r\n            this.props.setChangePlan(changePlan);\r\n          } else {\r\n            this.props.setChangePlan(null);\r\n          }\r\n          this.setButtonState();\r\n          const isOpen = new Array(res.data.modifications.length).fill(false);\r\n          this.setState({\r\n            changePlan: res.data.change_plan,\r\n            modifications: res.data.modifications,\r\n            isOpen,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          this.loading = false;\r\n          this.addErrorToast(err.response.data.failure_message);\r\n        });\r\n    }\r\n    return (\r\n      <div className={Classes.DARK + \" asset-view\"}>\r\n        <Alert\r\n          cancelButtonText=\"Cancel\"\r\n          confirmButtonText=\"Execute\"\r\n          intent={Intent.WARNING}\r\n          className={Classes.DARK}\r\n          isOpen={this.state.isAlertOpen}\r\n          onCancel={() => this.handleExecuteCancel()}\r\n          onConfirm={() => this.handleExecute()}\r\n        >\r\n          <p>\r\n            Are you sure you want to execute this change plan? You will not be\r\n            able to generate a work order for this change plan anymore.\r\n          </p>\r\n        </Alert>\r\n        <Toaster\r\n          autoFocus={false}\r\n          canEscapeKeyClear={true}\r\n          position={Position.TOP}\r\n          ref={this.refHandlers.toaster}\r\n        />\r\n        <h1 className={Classes.DARK}>\r\n          Change Plan:{\" \"}\r\n          {this.state.changePlan ? this.state.changePlan.name : null}\r\n        </h1>\r\n\r\n        {this.loading ? <Spinner /> : null}\r\n        <ul className=\"bp3-list-unstyled\">\r\n          <Callout className=\"print\" intent=\"primary\">\r\n            This work order was generated by user {this.state.username} on{\" \"}\r\n            {new Date().toString()}\r\n          </Callout>\r\n          {this.state.changePlan && this.state.changePlan.execution_time ? (\r\n            <Callout intent=\"primary\">\r\n              This change plan was executed at:{\" \"}\r\n              {this.state.changePlan.execution_time}\r\n            </Callout>\r\n          ) : null}\r\n          {this.state.modifications.length > 0 ? (\r\n            this.state.modifications.map(\r\n              (modification: Modification, index: number) => {\r\n                return (\r\n                  <li>\r\n                    <Callout\r\n                      icon={null}\r\n                      intent={\r\n                        modification.conflicts &&\r\n                        modification.conflicts.length > 0\r\n                          ? Intent.DANGER\r\n                          : Intent.NONE\r\n                      }\r\n                      className=\"change-plan-item\"\r\n                      onClick={(e) => this.toggleCollapse(index)}\r\n                    >\r\n                      <Checkbox className=\"print\" />\r\n                      {modification.title}\r\n                      <AnchorButton\r\n                        className=\"cp-remove\"\r\n                        intent={Intent.DANGER}\r\n                        minimal\r\n                        disabled={\r\n                          !isNullOrUndefined(this.state.changePlan) &&\r\n                          !isNullOrUndefined(\r\n                            this.state.changePlan.execution_time\r\n                          )\r\n                        }\r\n                        icon=\"delete\"\r\n                        onClick={(e: any) => {\r\n                          this.removeModification(modification);\r\n                          e.stopPropagation();\r\n                        }}\r\n                        text=\"Discard change\"\r\n                      />\r\n                    </Callout>\r\n                    <Collapse isOpen={this.state.isOpen[index]}>\r\n                      <div className=\"cp-collapse-body\">\r\n                        {modification.conflicts\r\n                          ? modification.conflicts.map((conflict: Conflict) => {\r\n                              return (\r\n                                <Callout intent={Intent.DANGER}>\r\n                                  {conflict.conflict_message}\r\n                                  {conflict.conflict_resolvable ? (\r\n                                    <div className=\"merge-options\">\r\n                                      <AnchorButton\r\n                                        onClick={() =>\r\n                                          this.resolveConflict(\r\n                                            modification,\r\n                                            conflict,\r\n                                            false\r\n                                          )\r\n                                        }\r\n                                        icon=\"properties\"\r\n                                        text=\"Discard change plan modifications\"\r\n                                      />\r\n                                      <AnchorButton\r\n                                        onClick={() =>\r\n                                          this.resolveConflict(\r\n                                            modification,\r\n                                            conflict,\r\n                                            true\r\n                                          )\r\n                                        }\r\n                                        icon=\"properties\"\r\n                                        text=\"Keep change plan modifications\"\r\n                                      />\r\n                                    </div>\r\n                                  ) : null}\r\n                                </Callout>\r\n                              );\r\n                            })\r\n                          : null}\r\n\r\n                        <AnchorButton\r\n                          className=\"asset-detail\"\r\n                          icon=\"properties\"\r\n                          onClick={(e: any) => {\r\n                            this.props.history.push(\r\n                              ROUTES.ASSETS + \"/\" + modification.asset_cp.id\r\n                            );\r\n                          }}\r\n                          text=\"Go to change plan asset detail page\"\r\n                        />\r\n                        {modification.asset &&\r\n                        isNullOrUndefined(\r\n                          this.state.changePlan.execution_time\r\n                        ) ? (\r\n                          <div className=\"cp-details\">\r\n                            <Pre>\r\n                              <h3>Live Asset </h3>\r\n                              {this.renderAssetData(\r\n                                modification.asset,\r\n                                modification\r\n                              )}\r\n                            </Pre>\r\n                            <Pre>\r\n                              <h3>Change Plan Asset</h3>\r\n                              {modification.asset_cp\r\n                                ? this.renderAssetData(\r\n                                    modification.asset_cp,\r\n                                    modification\r\n                                  )\r\n                                : null}\r\n                            </Pre>\r\n                          </div>\r\n                        ) : (\r\n                          <div className=\"cp-details\">\r\n                            <Pre>\r\n                              <h3>Change Plan Asset</h3>\r\n                              {modification.asset_cp\r\n                                ? this.renderAssetData(\r\n                                    modification.asset_cp,\r\n                                    modification\r\n                                  )\r\n                                : null}\r\n                            </Pre>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </Collapse>\r\n                  </li>\r\n                );\r\n              }\r\n            )\r\n          ) : (\r\n            <Callout title=\"No modifications for this change plan\"> </Callout>\r\n          )}\r\n        </ul>\r\n        <div className=\"detail-buttons-wrapper\">\r\n          <div className={\"detail-buttons-cp\"}>\r\n            <div>\r\n              <AnchorButton\r\n                onClick={() => this.printWorkOrder()}\r\n                disabled={this.state.disableButtons}\r\n                intent=\"none\"\r\n                icon=\"document-open\"\r\n                text=\"Generate Work Order\"\r\n              />\r\n            </div>\r\n            <div className=\"cp-dividers\">\r\n              <Divider className=\"cp-detail-divider\" />\r\n              <p className={Classes.DARK + \" cp-detail-divider-text\"}>then</p>\r\n              <Divider className=\"cp-detail-divider\" />\r\n            </div>\r\n            <div>\r\n              <AnchorButton\r\n                disabled={this.state.disableButtons}\r\n                icon=\"build\"\r\n                intent=\"primary\"\r\n                text=\"Execute Change Plan\"\r\n                onClick={() =>\r\n                  this.setState({\r\n                    isAlertOpen: true,\r\n                  })\r\n                }\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStatetoProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    logout: () => dispatch(actions.logout()),\r\n    updateChangePlans: (status: boolean) =>\r\n      dispatch(actions.updateChangePlans(status)),\r\n\r\n    setChangePlan: (changePlan: ChangePlan) =>\r\n      dispatch(actions.setChangePlan(changePlan)),\r\n  };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStatetoProps, mapDispatchToProps)(CPDetailView)\r\n);\r\n","import \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport * as React from \"react\";\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport ElementTab from \"../elementView/elementTab\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport \"../elementView//elementView.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { ElementType } from \"../../utils/utils\";\r\nimport \"./user.scss\";\r\n\r\ninterface UserProps {\r\n  isAdmin: boolean;\r\n}\r\n\r\nclass User extends React.Component<UserProps & RouteComponentProps> {\r\n  public render() {\r\n    return (\r\n      <div className={Classes.DARK + \" user-view\"}>\r\n        <h1>Users</h1>\r\n        <ElementTab {...this.props} element={ElementType.USER} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    isAdmin: state.admin,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(User);\r\n","import \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport * as React from \"react\";\r\nimport { Classes } from \"@blueprintjs/core\";\r\nimport ElementTab from \"../elementView/elementTab\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { connect } from \"react-redux\";\r\nimport { ElementType } from \"../../utils/utils\";\r\n\r\ninterface ChangePlannerProps {\r\n  isAdmin: boolean;\r\n}\r\n\r\nclass ChangePlannerView extends React.Component<\r\n  ChangePlannerProps & RouteComponentProps\r\n> {\r\n  public render() {\r\n    return (\r\n      <div className={Classes.DARK + \" user-view\"}>\r\n        <h1>Change Plans</h1>\r\n        <ElementTab {...this.props} element={ElementType.CHANGEPLANS} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    isAdmin: state.admin,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ChangePlannerView);\r\n","import {\r\n  Button,\r\n  Classes,\r\n  InputGroup,\r\n  Callout,\r\n  Intent,\r\n  Spinner,\r\n} from \"@blueprintjs/core\";\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport { Form } from \"antd\";\r\nimport { FormComponentProps } from \"antd/lib/form/Form\";\r\nimport * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, RouteComponentProps } from \"react-router\";\r\nimport * as actions from \"../../store/actions/state\";\r\nimport \"./login.scss\";\r\ninterface LoginFormProps {\r\n  loading: boolean;\r\n  error: any;\r\n  token: string;\r\n  onAuth(username: string, password: string): any;\r\n}\r\nvar console: any = {};\r\nconsole.log = function () {};\r\nclass NormalLoginForm extends React.Component<\r\n  LoginFormProps & FormComponentProps & RouteComponentProps\r\n> {\r\n  handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        this.props.onAuth(values.username, values.password);\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n\r\n    return (\r\n      <div>\r\n        {this.props.error ? (\r\n          <Callout className={Classes.DARK} intent={Intent.DANGER}>\r\n            {this.props.error.response.data.non_field_errors\r\n              ? this.props.error.response.data.non_field_errors.toString()\r\n              : \"\"}\r\n          </Callout>\r\n        ) : null}\r\n\r\n        {this.props.token !== null ? (\r\n          <Redirect to=\"/\" />\r\n        ) : (\r\n          <div className={Classes.DARK + \" login-container\"}>\r\n            <Form\r\n              onSubmit={this.handleSubmit}\r\n              className=\"login-form .bp3-form-group\"\r\n            >\r\n              <Form.Item>\r\n                {getFieldDecorator(\"username\", {\r\n                  rules: [\r\n                    { required: true, message: \"Please input your username!\" },\r\n                  ],\r\n                })(<InputGroup id=\"username\" placeholder=\"username\" />)}\r\n              </Form.Item>\r\n              <Form.Item>\r\n                {getFieldDecorator(\"password\", {\r\n                  rules: [\r\n                    { required: true, message: \"Please input your Password!\" },\r\n                  ],\r\n                })(\r\n                  <InputGroup\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    placeholder=\"password\"\r\n                  />\r\n                )}\r\n              </Form.Item>\r\n              <Form.Item>\r\n                <Button className=\"login-button\" type=\"submit\">\r\n                  Login\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n            {this.props.loading ? (\r\n              <Spinner size={Spinner.SIZE_STANDARD} />\r\n            ) : null}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStatetoProps = (state: any) => {\r\n  return {\r\n    loading: state.loading,\r\n    error: state.error,\r\n    token: state.token,\r\n  };\r\n};\r\nconst WrappedNormalLoginForm = Form.create({ name: \"normal_login\" })(\r\n  NormalLoginForm\r\n);\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onAuth: (username: string, password: string) =>\r\n      dispatch(actions.authLogin(username, password)),\r\n  };\r\n};\r\nexport default connect(\r\n  mapStatetoProps,\r\n  mapDispatchToProps\r\n)(WrappedNormalLoginForm);\r\n","import * as React from \"react\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport WrappedNormalLoginForm from \"./login\";\r\nimport { Classes, AnchorButton, Card, Elevation } from \"@blueprintjs/core\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./loginView.scss\";\r\nimport * as QueryString from \"query-string\";\r\nimport { isNullOrUndefined } from \"util\";\r\nimport * as actions from \"../../store/actions/state\";\r\n\r\nexport interface LoginViewProps {\r\n  token: string;\r\n  onAuth(acess_token: string): any;\r\n}\r\nvar console: any = {};\r\nconsole.log = function () {};\r\nexport class LoginView extends React.PureComponent<\r\n  RouteComponentProps & LoginViewProps\r\n> {\r\n  private handleSSOClick = () => {\r\n    const redirect_uri = window.location.href\r\n      .replace(new RegExp(\":\", \"g\"), \"%3A\")\r\n      .replace(new RegExp(\"/\", \"g\"), \"%2F\");\r\n    window.location.href = actions.DUKE_OAUTH_URI + redirect_uri;\r\n  };\r\n  public componentDidMount() {\r\n    const params = QueryString.parse(window.location.hash.substring(1));\r\n    const access_token = params.access_token;\r\n    if (!isNullOrUndefined(access_token)) {\r\n      this.props.onAuth(access_token.toString());\r\n    }\r\n  }\r\n  public render() {\r\n    return (\r\n      <div className={Classes.DARK + \" login-container\"}>\r\n        <h2>Login</h2>\r\n        <Card className=\"login-card\" elevation={Elevation.ZERO}>\r\n          <WrappedNormalLoginForm />\r\n        </Card>\r\n        <Card className=\"login-card\" elevation={Elevation.ZERO}>\r\n          <AnchorButton onClick={this.handleSSOClick} rightIcon=\"log-in\">\r\n            Duke SSO Login\r\n          </AnchorButton>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStatetoProps = (state: any) => {\r\n  return {\r\n    token: state.token,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onAuth: (acess_token: string) =>\r\n      dispatch(actions.netidAuthLogin(acess_token)),\r\n  };\r\n};\r\nexport default connect(\r\n  mapStatetoProps,\r\n  mapDispatchToProps\r\n)(withRouter(LoginView));\r\n","import \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\nimport \"normalize.css/normalize.css\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  BrowserRouter,\r\n  Redirect,\r\n  Route,\r\n  RouteComponentProps,\r\n} from \"react-router-dom\";\r\nimport AssetView from \"./components/elementView/detailedView/assetView/assetView\";\r\nimport ModelView from \"./components/elementView/detailedView/modelView/modelView\";\r\nimport RackView from \"./components/elementView/detailedView/rackView/rackView\";\r\nimport BarcodeView from \"./components/elementView/detailedView/assetView/barcodeView\";\r\nimport Fallback, {\r\n  NotAuthorized,\r\n  NotAuthorizedAdmin,\r\n} from \"./components/fallback\";\r\nimport BulkImport from \"./components/import/import\";\r\nimport LandingView from \"./components/landingView/landingView\";\r\nimport Logs from \"./components/logs/logs\";\r\nimport Navigation from \"./components/navigation/navigation\";\r\nimport Report from \"./components/report/report\";\r\nimport User from \"./components/userView/user\";\r\nimport ChangePlannerView from \"./components/changePlanner/changePlannerView\";\r\nimport LoginView from \"./forms/auth/loginView\";\r\n// import BulkExport from \"./components/export/export\";\r\nimport \"./index.scss\";\r\nimport * as actions from \"./store/actions/state\";\r\nimport { ROUTES } from \"./utils/utils\";\r\nimport CPDetailView from \"./components/changePlanner/CPDetailView\";\r\nimport { PermissionState } from \"./utils/permissionUtils\";\r\n\r\nvar console: any = {};\r\nconsole.log = function () {};\r\nexport interface AppProps {\r\n  isAuthenticated?: boolean;\r\n  onTryAutoSignup: any;\r\n  isAdmin: boolean;\r\n  loading: boolean;\r\n  permissionState: PermissionState;\r\n}\r\n\r\nclass App extends React.Component<AppProps> {\r\n  componentDidMount() {\r\n    console.log(this.props.isAuthenticated);\r\n    this.props.onTryAutoSignup();\r\n  }\r\n\r\n  RedirectToLoginRoute = ({ ...rest }: any) => {\r\n    return this.props.isAuthenticated ? (\r\n      <Route {...rest} />\r\n    ) : (\r\n      <Route {...rest}>\r\n        <Redirect to={ROUTES.LOGIN} />\r\n      </Route>\r\n    );\r\n  };\r\n\r\n  PrivateRoute = ({ path, component, render, ...rest }: any) => {\r\n    return component ? (\r\n      <Route\r\n        path={path}\r\n        {...rest}\r\n        component={this.props.isAuthenticated ? component : NotAuthorized}\r\n      />\r\n    ) : render ? (\r\n      <Route\r\n        path={path}\r\n        {...rest}\r\n        render={this.props.isAuthenticated ? render : NotAuthorized}\r\n      />\r\n    ) : null;\r\n  };\r\n\r\n  AdminRoute = ({ path, component, ...rest }: any) => {\r\n    return (\r\n      <Route\r\n        path={path}\r\n        component={\r\n          this.props.isAuthenticated\r\n            ? this.props.permissionState.admin\r\n              ? component\r\n              : NotAuthorizedAdmin\r\n            : NotAuthorized\r\n        }\r\n        {...rest}\r\n      />\r\n    );\r\n  };\r\n\r\n  detectMob() {\r\n      const toMatch = [\r\n          /Android/i,\r\n          /webOS/i,\r\n          /iPhone/i,\r\n          /iPad/i,\r\n          /iPod/i,\r\n          /BlackBerry/i,\r\n          /Windows Phone/i\r\n      ];\r\n\r\n      return toMatch.some((toMatchItem) => {\r\n          return navigator.userAgent.match(toMatchItem);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <BrowserRouter basename=\"/\">\r\n        <div>\r\n          <Navigation {...this.props} />\r\n\r\n          <Route path={ROUTES.LOGIN} component={LoginView} />\r\n          <div className=\"dashboard \">\r\n            <this.PrivateRoute\r\n              path={ROUTES.DASHBOARD}\r\n              render={(props: RouteComponentProps) => (\r\n                <LandingView {...props} />\r\n              )}\r\n            />\r\n            <this.RedirectToLoginRoute exact path=\"/\">\r\n              {\" \"}\r\n              <Redirect to={ROUTES.DASHBOARD} />\r\n            </this.RedirectToLoginRoute>\r\n            <Route path=\"/\" component={Fallback}></Route>\r\n\r\n            <this.PrivateRoute\r\n              path={ROUTES.MODELS + \"/:rid\"}\r\n              component={ModelView}\r\n            />\r\n            <this.PrivateRoute\r\n              path={ROUTES.ASSETS + \"/:rid\"}\r\n              component={AssetView}\r\n            />\r\n            <this.PrivateRoute\r\n              path={ROUTES.CHANGE_PLAN + \"/:id\"}\r\n              component={CPDetailView}\r\n            />\r\n          </div>\r\n          <this.PrivateRoute path={ROUTES.REPORT} component={Report} />\r\n          <this.PrivateRoute path={ROUTES.LOGS} component={Logs} />\r\n          <this.PrivateRoute path={ROUTES.RACK_PRINT} component={RackView} />\r\n          <this.PrivateRoute\r\n            path={ROUTES.BARCODE_PRINT}\r\n            component={BarcodeView}\r\n          />\r\n          <this.PrivateRoute\r\n            exact\r\n            path={ROUTES.CHANGE_PLAN}\r\n            component={ChangePlannerView}\r\n          />\r\n          <this.PrivateRoute path={ROUTES.BULK_IMPORT} component={BulkImport} />\r\n\r\n          {/* admin paths */}\r\n          <this.AdminRoute path={ROUTES.USERS} component={User} />\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    isAuthenticated: state.token !== null,\r\n    isAdmin: state.admin,\r\n    permissionState: state.permissionState,\r\n    loading: state.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onTryAutoSignup: () => {\r\n      dispatch(actions.authCheckState());\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport { updateObject } from \"../utility\";\r\nimport { ChangePlan } from \"../../utils/utils\";\r\nimport { PermissionState } from \"../../utils/permissionUtils\";\r\ninterface ReduxState {\r\n  token: string | null;\r\n  error: string | null;\r\n  loading: boolean;\r\n  changePlan: ChangePlan | null;\r\n  permissionState: PermissionState;\r\n}\r\nconst initialState: ReduxState = {\r\n  token: null,\r\n  error: null,\r\n  loading: false,\r\n  changePlan: null,\r\n  permissionState: {\r\n    model_management: false,\r\n    asset_management: false,\r\n    power_control: false,\r\n    audit_read: false,\r\n    admin: false,\r\n    datacenter_permissions: [],\r\n  } as PermissionState,\r\n};\r\nconst setChangePlan = (state: any, action: any) => {\r\n  return updateObject(state, {\r\n    changePlan: action.changePlan,\r\n  });\r\n};\r\nconst updateChangePlans = (state: any, action: any) => {\r\n  return updateObject(state, {\r\n    updateChangePlansBoolean: action.updateChangePlansBoolean,\r\n  });\r\n};\r\n\r\nconst setPermissionState = (state: any, action: any) => {\r\n  return updateObject(state, {\r\n    permissionState: action.permissionState,\r\n  });\r\n};\r\nconst authStart = (state: any, action: any) => {\r\n  return updateObject(state, {\r\n    error: null,\r\n    loading: true,\r\n  });\r\n};\r\n\r\nconst authSuccess = (state: any, action: any) => {\r\n  return updateObject(state, {\r\n    token: action.token,\r\n    error: null,\r\n    loading: false,\r\n  });\r\n};\r\n\r\nconst authFail = (state: any, action: any) => {\r\n  return updateObject(state, {\r\n    error: action.error,\r\n    loading: false,\r\n  });\r\n};\r\n\r\nconst authLogout = (state: any, action: any) => {\r\n  return updateObject(state, {\r\n    token: null,\r\n    admin: null,\r\n  });\r\n};\r\n\r\nconst authAdmin = (state: any, aciton: any) => {\r\n  return updateObject(state, {\r\n    admin: true,\r\n  });\r\n};\r\n\r\n// define when actions take place\r\n\r\nconst reducer = (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case actionTypes.AUTH_START:\r\n      return authStart(state, action);\r\n    case actionTypes.AUTH_SUCCESS:\r\n      return authSuccess(state, action);\r\n    case actionTypes.AUTH_FAIL:\r\n      return authFail(state, action);\r\n    case actionTypes.AUTH_LOGOUT:\r\n      return authLogout(state, action);\r\n    case actionTypes.AUTH_ADMIN:\r\n      return authAdmin(state, action);\r\n    case actionTypes.SWITCH_CHANGE_PLAN:\r\n      return setChangePlan(state, action);\r\n    case actionTypes.UPDATE_CHANGE_PLANS:\r\n      return updateChangePlans(state, action);\r\n    case actionTypes.SET_PERMISSION_STATE:\r\n      return setPermissionState(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\nimport \"@blueprintjs/datetime/lib/css/blueprint-datetime.css\";\r\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\";\r\nimport \"normalize.css/normalize.css\";\r\nimport \"normalize.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport App from \"./App\";\r\nimport { createStore, compose, applyMiddleware } from \"redux\";\r\nimport reducer from \"./store/reducers/state\";\r\nimport thunk from \"redux-thunk\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nconst composeEnhances =\r\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose || compose;\r\n\r\nconst store = createStore(reducer, composeEnhances(applyMiddleware(thunk)));\r\n\r\nconst app = (\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}